<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React - The full course on Fireship</title>
    <link>https://fireship.io/courses/react/</link>
    <description>Recent content in React - The full course on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Feb 2022 11:11:30 -0900</lastBuildDate><atom:link href="https://fireship.io/courses/react/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>React in 100 Seconds</title>
      <link>https://fireship.io/courses/react/basics-react/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-react/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Anatomy</title>
      <link>https://fireship.io/courses/react/basics-anatomy/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-anatomy/</guid>
      <description>React Build Tools There are many ways to build a react app. The most common options include:
Create React App Vite Next.js Gatsby React Files Get familiar with the files in your React project.
package.json - The main file that defines the dependencies and other settings for your project. node_modules - Source code for depencies. Do not touch. public - The directory where your static files are stored. src/index.js - Main entrypoint to bootstrap the app.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://fireship.io/courses/react/basics-components/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-components/</guid>
      <description>React Dev Tools React Components are reusable pieces of UI that developers compose together as a tree to represent a complete frontend application. Before writing any code, install the React Dev Tools extension and go to a website like Facebook that uses react and inspect its code.
Define Components with JSX Now in your code, define a component by declaring a JavaScript function. It can use the function keyword, or be a function expression if you prefer.</description>
    </item>
    
    <item>
      <title>Conditional Rendering</title>
      <link>https://fireship.io/courses/react/basics-conditional-rendering/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-conditional-rendering/</guid>
      <description>Conditional rendering is a very common pattern where you render a component based on a boolean condition. There are several ways to implement conditional rendering in React.
Option 1: If Else App.js function Conditional({ count }) { if (count &amp;gt; 5) { return &amp;lt;h1&amp;gt;Count is greater than 5&amp;lt;/h1&amp;gt;; } else { return &amp;lt;h1&amp;gt;Count is less than 5&amp;lt;/h1&amp;gt;; } } Option 2: Ternary App.js {count % 2 === 0 ? &amp;lt;h1&amp;gt;Count is even&amp;lt;/h1&amp;gt; : &amp;lt;h1&amp;gt;Count is odd&amp;lt;/h1&amp;gt; } Option 3: Logical And App.</description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://fireship.io/courses/react/basics-loops/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-loops/</guid>
      <description>Array Map The most common way to loop over a collection of data in React is to use the Array map method. It takes a callback function that gets called on each element to transform the data into UI elements.
App.js const data = [ { id: 1, name: &amp;#39;Fido üêï&amp;#39; }, { id: 2, name: &amp;#39;Snowball üêà&amp;#39; }, { id: 3, name: &amp;#39;Murph üêà‚Äç‚¨õ&amp;#39; }, { id: 4, name: &amp;#39;Zelda üêà&amp;#39; }, ]; function ListOfAnimals() { return ( &amp;lt;ul&amp;gt; {data &amp;amp;&amp;amp; // Only render if there&amp;#39;s data - see &amp;#39;Conditional Rendering&amp;#39; data.</description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://fireship.io/courses/react/basics-events/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-events/</guid>
      <description>Events in Vanilla JS file_type_js app.js const button = document.querySelector(&amp;#39;button&amp;#39;); button.addEventListener(&amp;#39;click&amp;#39;, (event) =&amp;gt; { console.log(event); }) Events in React App.js function Events() { return &amp;lt;button onClick={(event =&amp;gt; console.log(event))}&amp;gt;Click&amp;lt;/button&amp;gt; } Challenge Implement a text input that updates the input value and logs the event target.</description>
    </item>
    
    <item>
      <title>State</title>
      <link>https://fireship.io/courses/react/basics-state/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-state/</guid>
      <description>Basic Usage App.js function Stateful() { const [count, setCount] = useState(0); const [prevCount, setPrevCount] = useState(0); const handleClick = () =&amp;gt; { setCount((prev) =&amp;gt; { setPrevCount(prev); setCount(count + 1); }); }; return ( &amp;lt;&amp;gt; &amp;lt;h3&amp;gt;Current count: {count}&amp;lt;/h3&amp;gt; &amp;lt;h3&amp;gt;Previous count: {prevCount}&amp;lt;/h3&amp;gt; &amp;lt;button onClick={handleClick}&amp;gt;Increment&amp;lt;/button&amp;gt; &amp;lt;/&amp;gt; ); } Updating Objects with useState App.js function Stateful() { const [state, setState] = useState({ count: 0, user: &amp;#39;Bob&amp;#39; }); const handleClick = () =&amp;gt; { setState({ .</description>
    </item>
    
    <item>
      <title>Lifecycle and Effects</title>
      <link>https://fireship.io/courses/react/basics-lifecycle/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-lifecycle/</guid>
      <description>Lifecycle with Class Components App.js class Lifecycle extends React.Component { componentDidMount() { // Initialize } componentDidUpdate() { // Updated } componentWillUnmount() { // Removed } } Lifecycle with useEffect App.js function Lifecycle() { const [count] = useState(0); useEffect(() =&amp;gt; { console.log(&amp;#39;count updated!&amp;#39;) return () =&amp;gt; console.log(&amp;#39;destroyed!&amp;#39;) }, [count]); } Challenge Implement a CountdownTimer component that implements useState() and useEffect() in conjunction with setInterval to handle the timer. Make sure you use the useEffect() hook to call clearTimeout() when the component is destroyed.</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>https://fireship.io/courses/react/basics-context/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-context/</guid>
      <description>Example of Prop Drilling App.js function PropDrilling() { const [count] = useState(0); return &amp;lt;Child count={count} /&amp;gt; } function Child({ count }) { return &amp;lt;GrandChild count={count} /&amp;gt; } function GrandChild({ count }) { return &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt; } Sharing Data with Context App.js function PropDrilling() { const [count] = useState(0); return ( &amp;lt;CountContext.Provider value={count}&amp;gt; &amp;lt;Child /&amp;gt; &amp;lt;/CountContext.Provider&amp;gt; ) } function Child() { return &amp;lt;GrandChild /&amp;gt; } function GrandChild() { const count = useContext(CountContext); return &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt; } Challenge Create CountContext and CountProvider that uses { count, setCount } as its values.</description>
    </item>
    
    <item>
      <title>Error Boundries</title>
      <link>https://fireship.io/courses/react/basics-error-boundry/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-error-boundry/</guid>
      <description>App.js class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { console.log(&amp;#39;something went horribly wrong&amp;#39;, error, errorInfo); } render() { if (this.state.hasError) { return &amp;lt;h1&amp;gt;Fallback UI&amp;lt;/h1&amp;gt;; } return this.props.children; } } // Example Usage function Main() { return ( &amp;lt;Dashboard&amp;gt; &amp;lt;ErrorBoundary&amp;gt; &amp;lt;Orders /&amp;gt; &amp;lt;/ErrorBoundary&amp;gt; &amp;lt;/Dashboard&amp;gt; ); } Challenge Create an ErrorBoundary class component that provides a fallback UI in the event an error occurs.</description>
    </item>
    
    <item>
      <title>Suspense</title>
      <link>https://fireship.io/courses/react/basics-suspense/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-suspense/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://fireship.io/courses/react/basics-animation/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-animation/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>React Router</title>
      <link>https://fireship.io/courses/react/basics-router/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-router/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>Next.js</title>
      <link>https://fireship.io/courses/react/basics-nextjs/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-nextjs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Prisma</title>
      <link>https://fireship.io/courses/react/basics-prisma/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-prisma/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vite</title>
      <link>https://fireship.io/courses/react/basics-vite/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-vite/</guid>
      <description>Vite.js is a build tool that can be used to build React projects. It is exceptionally fast and easy to use.
Challenge Create a react project with Vite
command line npm init vite my-app </description>
    </item>
    
    <item>
      <title>React Query</title>
      <link>https://fireship.io/courses/react/basics-query/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-query/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PWAs</title>
      <link>https://fireship.io/courses/react/basics-pwa/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-pwa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Redux</title>
      <link>https://fireship.io/courses/react/basics-redux/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-redux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://fireship.io/courses/react/1-intro/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-intro/</guid>
      <description>Source Code React Instant Search Demo
React Setup command line npm init vite animalfarm cd animalfarm npm install npm run dev Node.js Setup command line cd server npm init -y npm install express cors chance </description>
    </item>
    
    <item>
      <title>Express Server</title>
      <link>https://fireship.io/courses/react/1-express-server/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-express-server/</guid>
      <description>Additional Learning CORS in 100 Seconds REST in 100 Seconds Complete Server Code file_type_js index.js import express from &amp;#39;express&amp;#39;; import cors from &amp;#39;cors&amp;#39;; // Initialize the express app const app = express(); app.use(cors()); app.use(express.json()); // Make some animals import Chance from &amp;#39;chance&amp;#39;; const chance = new Chance(); const animals = [...Array(250).keys()].map(id =&amp;gt; { return { id, type: chance.animal(), age: chance.age(), name: chance.name(), } }); // Endpoint to search for animals app.</description>
    </item>
    
    <item>
      <title>Search Frontend</title>
      <link>https://fireship.io/courses/react/1-react-search/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-react-search/</guid>
      <description>Additional Learning React Hooks Tutorial
Complete Code App.js import { useEffect, useState } from &amp;#39;react&amp;#39;; function App() { const { search, animals } = useAnimalSearch(); return ( &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;Animal Farm&amp;lt;/h1&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Search&amp;#34; onChange={(e) =&amp;gt; search(e.target.value)} /&amp;gt; &amp;lt;ul&amp;gt; {animals.map((animal) =&amp;gt; ( &amp;lt;Animal key={animal.id} {...animal} /&amp;gt; ))} {animals.length === 0 &amp;amp;&amp;amp; &amp;#39;No animals found&amp;#39;} &amp;lt;/ul&amp;gt; &amp;lt;/main&amp;gt; ); } // Dumb UI component function Animal({ type, name, age }) { return ( &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;{type}&amp;lt;/strong&amp;gt; {name} ({age} years old) &amp;lt;/li&amp;gt; ); } // Custom Hook function useAnimalSearch() { const [animals, setAnimals] = useState([]); useEffect(() =&amp;gt; { const lastQuery = localStorage.</description>
    </item>
    
    <item>
      <title>Intro</title>
      <link>https://fireship.io/courses/react/2-intro/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-intro/</guid>
      <description>Links Source Code Live Demo Create React App Use the CRA PWA template to create a new React app.
command line npx create-react-app my-app --template cra-template-pwa Firebase Create a Firebase project and deploy the app to the cloud.
command line npm install -g firebase-tools firebase init --hosting npm run build firebase deploy </description>
    </item>
    
    <item>
      <title>Game UI</title>
      <link>https://fireship.io/courses/react/2-game-ui/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-game-ui/</guid>
      <description>App App.js import { useState } from &amp;#39;react&amp;#39;; import Card from &amp;#39;./components/Card&amp;#39;; import shuffle from &amp;#39;./utilities/shuffle&amp;#39;; function App() { const [cards, setCards] = useState(shuffle); // Cards array from assets return ( &amp;lt;&amp;gt; &amp;lt;div className=&amp;#34;grid&amp;#34;&amp;gt; {cards.map((card) =&amp;gt; { const { image, id, matched } = card; return ( &amp;lt;Card key={id} image={image} selected={false} onClick={() =&amp;gt; {}} /&amp;gt; ); })} &amp;lt;/div&amp;gt; &amp;lt;/&amp;gt; ); } export default App; Card Card.js const Card = ({ image, selected, onClick }) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;div className={selected &amp;amp;&amp;amp; &amp;#39;selected&amp;#39;}&amp;gt; &amp;lt;img alt=&amp;#34;&amp;#34; src={image} className=&amp;#34;card-face&amp;#34; /&amp;gt; &amp;lt;img alt=&amp;#34;&amp;#34; className=&amp;#34;card-back&amp;#34; src={&amp;#39;/assets/fireship.</description>
    </item>
    
    <item>
      <title>Game Logic</title>
      <link>https://fireship.io/courses/react/2-game-logic/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-game-logic/</guid>
      <description>Game Logic App.js import { useState, useEffect } from &amp;#39;react&amp;#39;; import Card from &amp;#39;./components/Card&amp;#39;; import shuffle from &amp;#39;./utilities/shuffle&amp;#39;; function App() { const [cards, setCards] = useState(shuffle); // Cards array from assets const [pickOne, setPickOne] = useState(null); // First selection const [pickTwo, setPickTwo] = useState(null); // Second selection const [disabled, setDisabled] = useState(false); // Delay handler const [wins, setWins] = useState(0); // Win streak // Handle card selection const handleClick = (card) =&amp;gt; { if (!</description>
    </item>
    
    <item>
      <title>PWA</title>
      <link>https://fireship.io/courses/react/2-pwa/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-pwa/</guid>
      <description>App Badge Hook useAppBadge.jsx import { useState } from &amp;#39;react&amp;#39;; const useAppBadge = () =&amp;gt; { const [counter, setCounter] = useState(1); const setBadge = () =&amp;gt; { setCounter(counter + 1); if (navigator.setAppBadge) { navigator.setAppBadge(counter); } else if (navigator.setClientBadge) { navigator.setClientBadge(); } }; const clearBadge = () =&amp;gt; { setCounter(1); if (navigator.clearAppBadge) { navigator.clearAppBadge(); } else if (navigator.clearClientBadge) { navigator.clearClientBadge(); } }; return [setBadge, clearBadge]; }; export default useAppBadge; </description>
    </item>
    
  </channel>
</rss>
