<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stripe Payments JavaScript Course on Fireship</title>
    <link>https://fireship.io/courses/stripe-js/</link>
    <description>Recent content in Stripe Payments JavaScript Course on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Oct 2021 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/courses/stripe-js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/stripe-js/intro-resources/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-resources/</guid>
      <description>Course Resources Project Source Code Stripe Docs Stripe API Reference Social Slack Chat YouTube &amp;amp; Twitter </description>
    </item>
    
    <item>
      <title>How does Stripe Work?</title>
      <link>https://fireship.io/courses/stripe-js/intro-what-is-stripe/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-what-is-stripe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>API Keys</title>
      <link>https://fireship.io/courses/stripe-js/intro-stripe-api-keys/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-stripe-api-keys/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intro to HTTP and REST</title>
      <link>https://fireship.io/courses/stripe-js/intro-rest/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-rest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Node Setup</title>
      <link>https://fireship.io/courses/stripe-js/intro-node-setup/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-node-setup/</guid>
      <description>Create a Node Project Start with an empty Node project.
command line npm init -y Dependencies Add the following dependencies and scripts.
file_type_npm package.json { &amp;#34;name&amp;#34;: &amp;#34;stripe-server&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;build&amp;#34;: &amp;#34;tsc&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;node lib/index.js&amp;#34;, &amp;#34;dev&amp;#34;: &amp;#34;concurrently \&amp;#34;tsc -w\&amp;#34; \&amp;#34;nodemon lib/index.js\&amp;#34;&amp;#34; }, &amp;#34;keywords&amp;#34;: [], &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;, &amp;#34;dependencies&amp;#34;: { &amp;#34;cors&amp;#34;: &amp;#34;^2.8.5&amp;#34;, &amp;#34;dotenv&amp;#34;: &amp;#34;^8.2.0&amp;#34;, &amp;#34;express&amp;#34;: &amp;#34;^4.17.1&amp;#34;, &amp;#34;firebase-admin&amp;#34;: &amp;#34;^8.6.0&amp;#34;, &amp;#34;stripe&amp;#34;: &amp;#34;^8.43.0&amp;#34; }, &amp;#34;devDependencies&amp;#34;: { &amp;#34;@types/express&amp;#34;: &amp;#34;^4.17.6&amp;#34;, &amp;#34;@types/cors&amp;#34;: &amp;#34;^2.</description>
    </item>
    
    <item>
      <title>Express</title>
      <link>https://fireship.io/courses/stripe-js/intro-express-setup/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-express-setup/</guid>
      <description>Create an Express App file_type_typescript api.ts import express, { Request, Response } from &amp;#39;express&amp;#39;; export const app = express(); // Allows cross origin requests import cors from &amp;#39;cors&amp;#39;; app.use(cors({ origin: true })); app.use(express.json()); app.post(&amp;#39;/test&amp;#39;, (req: Request, res: Response) =&amp;gt; { const amount = req.body.amount; res.status(200).send({ with_tax: amount * 7 }); }); Listen to Incoming Requests file_type_typescript index.ts // Start the API with Express import { app } from &amp;#39;./api&amp;#39;; const port = process.</description>
    </item>
    
    <item>
      <title>React Setup</title>
      <link>https://fireship.io/courses/stripe-js/intro-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-react/</guid>
      <description>Create a React App command line npx create-react-app myapp Setup Stripe file_type_js command line npm install @stripe/react-stripe-js @stripe/stripe-js index.js import { Elements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { loadStripe } from &amp;#39;@stripe/stripe-js&amp;#39;; export const stripePromise = loadStripe( &amp;#39;pk_test_...&amp;#39; ); ReactDOM.render( &amp;lt;React.StrictMode&amp;gt; &amp;lt;Elements stripe={stripePromise}&amp;gt; &amp;lt;App /&amp;gt; &amp;lt;/Elements&amp;gt; &amp;lt;/React.StrictMode&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) ); React Router command line npm install react-router-dom Create empty files for the components referenced in the router below, like Checkout.js, Payments.js, etc.</description>
    </item>
    
    <item>
      <title>Stripe Checkout</title>
      <link>https://fireship.io/courses/stripe-js/checkout-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stripe Checkout on the Server</title>
      <link>https://fireship.io/courses/stripe-js/checkout-server/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-server/</guid>
      <description>Stripe Checkout on the Server file_type_typescript checkout.ts import { stripe } from &amp;#39;./&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; /** * Creates a Stripe Checkout session with line items */ export async function createStripeCheckoutSession( line_items: Stripe.Checkout.SessionCreateParams.LineItem[] ) { const url = &amp;#39;http://localhost:3000&amp;#39;; //process.env.WEBAPP_URL; const session = await stripe.checkout.sessions.create({ payment_method_types: [&amp;#39;card&amp;#39;], line_items, success_url: `${url}/success?session_id={CHECKOUT_SESSION_ID}`, cancel_url: `${url}/failed`, }); return session; } API Endpoint file_type_typescript api.ts /** * Catch async errors when awaiting promises */ function runAsync(callback: Function) { return (req: Request, res: Response, next: NextFunction) =&amp;gt; { callback(req, res, next).</description>
    </item>
    
    <item>
      <title>Checkout with React</title>
      <link>https://fireship.io/courses/stripe-js/checkout-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-react/</guid>
      <description>API Fetch Helper file_type_js helpers.js const API = &amp;#39;http://localhost:3333&amp;#39;; /** * A helper function to fetch data from your API. */ export async function fetchFromAPI(endpointURL, opts) { const { method, body } = { method: &amp;#39;POST&amp;#39;, body: null, ...opts }; const res = await fetch(`${API}/${endpointURL}`, { method, ...(body &amp;amp;&amp;amp; { body: JSON.stringify(body) }), headers: { &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;, }, }); return res.json(); } Checkout Component App.js import React, { useState } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Payment Intents API</title>
      <link>https://fireship.io/courses/stripe-js/payments-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Create a Payment Intent</title>
      <link>https://fireship.io/courses/stripe-js/payments-create/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-create/</guid>
      <description>Create a Payment Intent file_type_typescript payments.ts import { stripe } from &amp;#39;./&amp;#39;; /** * Create a Payment Intent with a specific amount */ export async function createPaymentIntent(amount: number) { const paymentIntent = await stripe.paymentIntents.create({ amount, currency: &amp;#39;usd&amp;#39;, // receipt_email: &amp;#39;hello@fireship.io&amp;#39;, }); paymentIntent.status return paymentIntent; } Payments Endpoint file_type_typescript api.ts import { createPaymentIntent } from &amp;#39;./payments&amp;#39;; /** * Payment Intents */ app.post( &amp;#39;/payments&amp;#39;, runAsync(async ({ body }: Request, res: Response) =&amp;gt; { res.</description>
    </item>
    
    <item>
      <title>Stripe Webhooks</title>
      <link>https://fireship.io/courses/stripe-js/payments-fulfill-webhook/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-fulfill-webhook/</guid>
      <description>Install the Stripe CLI on your local system.
Trigger Webhooks Locally Open a terminal to forward webhooks to the server.
command line stripe listen --forward-to localhost:3333/hooks Then open another terminal to trigger a mock webhook. command line stripe trigger payment_intent.created Webhook Handler Update the express middleware to include the body buffer.
file_type_typescript api.ts app.use( express.json({ verify: (req, res, buffer) =&amp;gt; (req[&amp;#39;rawBody&amp;#39;] = buffer), }) ); file_type_typescript index.ts import { stripe } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>React</title>
      <link>https://fireship.io/courses/stripe-js/payments-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-react/</guid>
      <description>React Payments UI Payments.js import React, { useState } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; function Payments() { const stripe = useStripe(); const elements = useElements(); const [amount, setAmount] = useState(0); const [paymentIntent, setPaymentIntent] = useState(); // Create a payment intent on the server const createPaymentIntent = async (event) =&amp;gt; { // Clamp amount to Stripe min/max const validAmount = Math.</description>
    </item>
    
    <item>
      <title>Customers and Saved Cards</title>
      <link>https://fireship.io/courses/stripe-js/customers-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/stripe-js/customers-firebase/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-firebase/</guid>
      <description>Learn more about Firestore.
Server Firebase Admin Setup command line npm install firebase-admin Download your service account, then add add it&amp;rsquo;s path as an environment variable.
file_type_config .env GOOGLE_APPLICATION_CREDENTIALS=&amp;#34;./service-account.json&amp;#34; file_type_typescript firebase.ts // Initialize Firebase Admin resources import * as firebaseAdmin from &amp;#39;firebase-admin&amp;#39;; firebaseAdmin.initializeApp(); export const db = firebaseAdmin.firestore(); export const auth = firebaseAdmin.auth(); React Firebase Setup command line npm install firebase reactfire App.js import { FirebaseAppProvider } from &amp;#39;reactfire&amp;#39;; export const firebaseConfig = { // your config }; ReactDOM.</description>
    </item>
    
    <item>
      <title>API Authentication</title>
      <link>https://fireship.io/courses/stripe-js/customers-auth/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-auth/</guid>
      <description>SignIn and SignOut in React App.js import firebase from &amp;#39;firebase/app&amp;#39;; import { auth, db } from &amp;#39;./firebase&amp;#39;; export function SignIn() { const signIn = async () =&amp;gt; { const credential = await auth.signInWithPopup( new firebase.auth.GoogleAuthProvider() ); const { uid, email } = credential.user; db.collection(&amp;#39;users&amp;#39;).doc(uid).set({ email }, { merge: true }); }; return ( &amp;lt;button onClick={signIn}&amp;gt; Sign In with Google &amp;lt;/button&amp;gt; ); } export function SignOut(props) { return props.user &amp;amp;&amp;amp; ( &amp;lt;button onClick={() =&amp;gt; auth.</description>
    </item>
    
    <item>
      <title>Create a Customer</title>
      <link>https://fireship.io/courses/stripe-js/customers-create/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-create/</guid>
      <description>Get or Create a Stripe Customer file_type_typescript customers.ts /** * Gets the exsiting Stripe customer or creates a new record */ export async function getOrCreateCustomer(userId: string, params?: Stripe.CustomerCreateParams) { const userSnapshot = await db.collection(&amp;#39;users&amp;#39;).doc(userId).get(); const { stripeCustomerId, email } = userSnapshot.data(); // If missing customerID, create it if (!stripeCustomerId) { // CREATE new customer const customer = await stripe.customers.create({ email, metadata: { firebaseUID: userId }, ...params }); await userSnapshot.ref.update({ stripeCustomerId: customer.</description>
    </item>
    
    <item>
      <title>Save and List Card</title>
      <link>https://fireship.io/courses/stripe-js/customers-save-card/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-save-card/</guid>
      <description>Save and List Credit Cards file_type_typescript customers.ts /** * Creates a SetupIntent used to save a credit card for later use */ export async function createSetupIntent(userId: string) { const customer = await getOrCreateCustomer(userId); return stripe.setupIntents.create({ customer: customer.id, }) } /** * Returns all payment sources associated to the user */ export async function listPaymentMethods(userId: string) { const customer = await getOrCreateCustomer(userId); return stripe.paymentMethods.list({ customer: customer.id, type: &amp;#39;card&amp;#39;, }); } API Endpoints file_type_typescript api.</description>
    </item>
    
    <item>
      <title>React</title>
      <link>https://fireship.io/courses/stripe-js/customers-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-react/</guid>
      <description>App.js import React, { useState, useEffect, Suspense } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { useUser, AuthCheck } from &amp;#39;reactfire&amp;#39;; import firebase from &amp;#39;firebase/app&amp;#39;; import { auth, db } from &amp;#39;./firebase&amp;#39;; function SaveCard(props) { const stripe = useStripe(); const elements = useElements(); const user = useUser(); const [setupIntent, setSetupIntent] = useState(); const [wallet, setWallet] = useState([]); // Get the user&amp;#39;s wallet on mount useEffect(() =&amp;gt; { getWallet(); }, [user]); // Create the setup intent const createSetupIntent = async (event) =&amp;gt; { const si = await fetchFromAPI(&amp;#39;wallet&amp;#39;); setSetupIntent(si); }; // Handle the submission of card details const handleSubmit = async (event) =&amp;gt; { event.</description>
    </item>
    
    <item>
      <title>Billing</title>
      <link>https://fireship.io/courses/stripe-js/billing-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Create a Subscription</title>
      <link>https://fireship.io/courses/stripe-js/billing-create-subscription/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-create-subscription/</guid>
      <description>Webhooks NOTE. I also highly recommend listening to the customer.subscription.created to update Firestore when a new subscription is created and/or customer.subscription.deleted for cancellations. See the full source code for implementation examples.
Create a Subscription for Existing Customer file_type_typescript billing.ts import { stripe } from &amp;#39;./&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; import { getOrCreateCustomer } from &amp;#39;./customers&amp;#39;; import { firestore } from &amp;#39;firebase-admin&amp;#39;; /** * Attaches a payment method to the Stripe customer, * subscribes to a Stripe plan, and saves the plan to Firestore */ export async function createSubscription( userId: string, plan: string, payment_method: string ) { const customer = await getOrCreateCustomer(userId); // Attach the payment method to the customer await stripe.</description>
    </item>
    
    <item>
      <title>Cancel a Subscription</title>
      <link>https://fireship.io/courses/stripe-js/billing-cancel-subscription/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-cancel-subscription/</guid>
      <description>List and Cancel Subscriptions file_type_typescript index.ts /** * Cancels an active subscription, syncs the data in Firestore */ export async function cancelSubscription( userId: string, subscriptionId: string ) { const customer = await getOrCreateCustomer(userId); if (customer.metadata.firebaseUID !== userId) { throw Error(&amp;#39;Firebase UID does not match Stripe Customer&amp;#39;); } const subscription = await stripe.subscriptions.del(subscriptionId); // Cancel at end of period // const subscription = stripe.subscriptions.update(subscriptionId, { cancel_at_period_end: true }); if (subscription.status === &amp;#39;canceled&amp;#39;) { await db .</description>
    </item>
    
    <item>
      <title>Recurring Payments</title>
      <link>https://fireship.io/courses/stripe-js/billing-recurring/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-recurring/</guid>
      <description>Subscription Billing Webhook Examples file_type_typescript billing.ts import { stripe } from &amp;#39;./&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import { firestore } from &amp;#39;firebase-admin&amp;#39;; /** * Business logic for specific webhook event types */ const webhookHandlers = { &amp;#39;payment_intent.succeeded&amp;#39;: async (data: Stripe.PaymentIntent) =&amp;gt; { // Add your business logic here }, &amp;#39;payment_intent.payment_failed&amp;#39;: async (data: Stripe.PaymentIntent) =&amp;gt; { // Add your business logic here }, &amp;#39;customer.subscription.deleted&amp;#39;: async (data: Stripe.</description>
    </item>
    
    <item>
      <title>Billing with React</title>
      <link>https://fireship.io/courses/stripe-js/billing-react/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-react/</guid>
      <description>Subscriptions.js import React, { useState, useEffect, Suspense } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { useUser, AuthCheck } from &amp;#39;reactfire&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import { SignIn, SignOut } from &amp;#39;./Customers&amp;#39;; // Shows user document in Firestore function UserData(props) { const [data, setData] = useState({}); // Subscribe to the user&amp;#39;s data in Firestore useEffect( () =&amp;gt; { const unsubscribe = db.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://fireship.io/courses/stripe-js/deployment-docker/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/deployment-docker/</guid>
      <description>Dockerize command line docker build -t fireship/stripe-server . docker run -p 3333:3333 fireship/stripe-server Deploy to Cloud Run Push the container to Container Registry.
command line gcloud config set project &amp;lt;PROJECT_ID&amp;gt; gcloud builds submit --tag gcr.io/PROJECT_ID/stripe-server Then follow the steps in the video to create a Cloud Run Service.</description>
    </item>
    
    <item>
      <title>Firebase Cloud Functions</title>
      <link>https://fireship.io/courses/stripe-js/deployment-cloud-functions/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/deployment-cloud-functions/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
