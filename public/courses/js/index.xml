<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Modern JavaScript Full Course on Fireship</title>
    <link>https://fireship.io/courses/js/</link>
    <description>Recent content in Modern JavaScript Full Course on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2022 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/courses/js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/js/101-resources/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-resources/</guid>
      <description> Why should you learn JavaScript? Course Resources Source Code Required Tools Node.js. I would recommend using nvm mac/linux or nvm windows to install Node.js. Get Help Discord </description>
    </item>
    
    <item>
      <title>JavaScript in 100 Seconds</title>
      <link>https://fireship.io/courses/js/101-js-in-100-seconds/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-js-in-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JavaScript Crash Course</title>
      <link>https://fireship.io/courses/js/101-basics/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-basics/</guid>
      <description>Which term does NOT describe JavaScript? Let&amp;rsquo;s a quick look at 100 essential concepts that every developer should know. At this point, you don&amp;rsquo;t need to understand everything. Just get a feel for the topics and we&amp;rsquo;ll dive deeper throughout the course. Come back to this lesson at end and it should make a lot more sense.
If you want to learn more about a topic, check out the MDN&amp;rsquo;s JavaScript content - it is the unofficial JS documentation.</description>
    </item>
    
    <item>
      <title>Prototype Chain</title>
      <link>https://fireship.io/courses/js/102-prototype-chain/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-prototype-chain/</guid>
      <description>Which class does an Array inherit from? Prototype Chain The prototype chain is a mechanism that allows objects to inherit properties and methods from other objects. Every object can have exactly one prototype object. That prototype object can also have a prototype object, and so on, creating a chain of inheritied properties and methods. The end of this chain is called the null prototype.
In general, you don&amp;rsquo;t need to think about the prototype chain when doing everyday JavaScript development.</description>
    </item>
    
    <item>
      <title>Destructuring</title>
      <link>https://fireship.io/courses/js/102-destructuring/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-destructuring/</guid>
      <description> What is the name of the variable declared below? const { foo: bar } = { foo: 23 } Destructuring Examples // Object destructuring const person = { name: &amp;#39;John&amp;#39;, age: 32, city: &amp;#39;New York&amp;#39;, country: &amp;#39;USA&amp;#39; }; const { name, age } = person; // Object destructuring with alias const { name: firstName, age: years } = person; // Array destructuring const fruits = [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;orange&amp;#39;]; const [first, second, third] = fruits; </description>
    </item>
    
    <item>
      <title>Spread</title>
      <link>https://fireship.io/courses/js/102-spread/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-spread/</guid>
      <description>What is the value of property foo below? const obj = { foo: 1, bar: 2, baz: 3 }; const newObj = { foo: 4 ...obj, }; Spread Syntax The spread syntax ... is a relatively new operator that was introduced in ES2018. It provides a concise way to combine objects and arrays.
const obj = { foo: 1, bar: 2, baz: 3 }; const newObj = { foo: 4 .</description>
    </item>
    
    <item>
      <title>Optional Chaining</title>
      <link>https://fireship.io/courses/js/102-optional-chaining/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-optional-chaining/</guid>
      <description>What is the return value when calling a property that does not exist with optional chaining? Optional Chaining Optional chaining ? is a relatively new operator that was introduced in ES2020. It allows you to call object properties safely, without throwing an error. When calling properties without this operator, you many crash your applcation with the error Cannot read property &#39;foo&#39; of undefined.
const person = { }; const dude = person.</description>
    </item>
    
    <item>
      <title>Nullish Coalescing</title>
      <link>https://fireship.io/courses/js/102-nullish-coalescing/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-nullish-coalescing/</guid>
      <description> Which one of these values is truthy? Nullish Coalescing Nullish coalescing is a relativly new operator that was introduced in ES2020. It is similar to the logical OR operator ||, but it only returns the right-hand side if the left-hand side is null or undefined.
const foo = null ?? &amp;#39;bar&amp;#39;; console.log(foo); // &amp;#39;bar&amp;#39; const foo = 0 ?? &amp;#39;bar&amp;#39;; console.log(foo); // 0 </description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://fireship.io/courses/js/102-higher-order-functions/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-higher-order-functions/</guid>
      <description> Which one is a function declaration? Higher Order Functions A higher order function is a function that takes a function as an argument, or returns a function. They are commonly used in functional programming, and are a powerful tool for abstracting away complexity.
// A function that takes a function as an argument function add(x, y) { return x + y; } function subtract(x, y) { return x - y; } function math(x, y, operator) { return operator(x, y); } math(5, 2, add); // 7 </description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://fireship.io/courses/js/102-closures/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-closures/</guid>
      <description> Where in memory does the JS engine store the state of a closure? Closures A closure is a function that has access to the parent scope, even after the parent function has closed. JS will automatically store the state of a closure in the heap memory, even after the parent function has returned. This behavior makes them useful for encapsulating private variables.
function encapsulatedState(x) { let state = 10; return function() { state += x; return state; } } </description>
    </item>
    
    <item>
      <title>Array Tricks</title>
      <link>https://fireship.io/courses/js/102-array-tricks/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-array-tricks/</guid>
      <description>Which looping method is NOT recommended in most situations? Create a Range of Numbers const range = Array(100).fill(0).map((_, i) =&amp;gt; i + 1); // OR const range = [...Array(100).keys()]; Remove Duplicates from an Array const unique = [...new Set(arr)]; Get a Random Element const random = arr[Math.floor(Math.random() * arr.length)]; Loop over a Key-Value Pair for(const [i, val] of arr.entries()) { console.log(i, val); } Homework: Array Methods to Study arr.forEach(); arr.</description>
    </item>
    
    <item>
      <title>History of JavaScript</title>
      <link>https://fireship.io/courses/js/102-history-of-js/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-history-of-js/</guid>
      <description>What is the name of the first browser that supported JavaScript? History of JavaScript Read the full Weird History of JavaScript article.</description>
    </item>
    
    <item>
      <title>Cumulative Sum</title>
      <link>https://fireship.io/courses/js/algo-sum/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-sum/</guid>
      <description>I am an odd number. Take away one letter and I become even. What number am I? Cumulative Sum Interview Question Create a function that takes an array of numbers and returns a number that is the sum of all values in the array.
Cumulative Sum Implementation // Solution 1 function cumSum(arr) { return arr.reduce((acc, cur) =&amp;gt; acc + cur, 0); } // Solution 2 export function cumSum(arr) { let total = 0; for(let i = 0; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://fireship.io/courses/js/algo-binary-search/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-binary-search/</guid>
      <description>What is the time complexity of binary search? Binary search is a faster way to find an item in a sorted array with O(log n) time complexity, compared to a regular loop with O(n) time complexity.
Binary Search Interview Question Create a function that takes a sorted array and a target value. Return the index of the target value in the array. If the target value is not in the array, return -1.</description>
    </item>
    
    <item>
      <title>Least Recently Used (LRU) Cache</title>
      <link>https://fireship.io/courses/js/algo-lru/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-lru/</guid>
      <description>Which feature makes a JS Map suitable for an LRU cache? The LRU cache is one of the most commoly asked algorithm questions on interviews.
LRU Interview Question Create a data structure that implements the requirements of a Least Recently Used (LRU) cache with O(1) average time complexity.
Initialize an object with a maxium capacity of elements. getItem Return the value of the key. Update cache with the most recently used key.</description>
    </item>
    
    <item>
      <title>TDD with Vitest</title>
      <link>https://fireship.io/courses/js/algo-vitest/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-vitest/</guid>
      <description>Use Vitest to create a few basic unit test for the algorithims in the previous lessons.
npm init -y npm i -D vitest Update the package.json with a test script.
file_type_npm package.json &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;vitest&amp;#34; }, Vitest Basic Example import { expect, test } from &amp;#39;vitest&amp;#39;; import { cumSum } from &amp;#39;./sum&amp;#39;; test(&amp;#39;cumulative sum of an array&amp;#39;, () =&amp;gt; { expect(cumSum([1, 3, 5, 7])).toBe(16); expect(cumSum([-2, -4, -8])).toBe(-14); }); </description>
    </item>
    
    <item>
      <title>Initial Setup</title>
      <link>https://fireship.io/courses/js/app-setup/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-setup/</guid>
      <description>Initial Setup In this lesson, we will create a vanilla JavaScript app with vite. Vite is a fast and lightweight development server that uses native ES modules to serve your code.
The app will also use OpenAI&amp;rsquo;s Image Generation API to create a unique image with its Dalle-2 model.
npm init vite@latest dream cd dream npm install npm run dev </description>
    </item>
    
    <item>
      <title>RESTful APIs</title>
      <link>https://fireship.io/courses/js/app-rest/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-rest/</guid>
      <description> How is a POST request different from a GET request? </description>
    </item>
    
    <item>
      <title>Text-to-Image Server</title>
      <link>https://fireship.io/courses/js/app-server/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-server/</guid>
      <description>Why do we store the API key as an env variable? Server Setup First, make sure to sign up for an OpenAI account and create an API key. Then store the API key in a file named .env. If it&amp;rsquo;s included in your .gitignore, this file will be ignored by Git so that you don&amp;rsquo;t accidentally share your API key with the world.
touch server.js npm i dotenv express cors openai node server.</description>
    </item>
    
    <item>
      <title>Rest Client</title>
      <link>https://fireship.io/courses/js/app-rest-client/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-rest-client/</guid>
      <description>Why are REST clients useful? Rest Clients In this lesson, we will use a REST client built into VSCode called ThunderClient to test our API. It is much easier to test requests with a REST client than with a browser or command line. Other popular REST clients include Postman and Insomnia.</description>
    </item>
    
    <item>
      <title>Text-to-Image Frontend UI</title>
      <link>https://fireship.io/courses/js/app-frontend/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-frontend/</guid>
      <description>The FormData object is closely related to which built-in JS class? Text-to-Image Frontend Code First, build out the HTML for the UI. It has a placeholder for the image and a simple form with a single textarea element.
file_type_html index.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; type=&amp;#34;image/svg+xml&amp;#34; href=&amp;#34;favicon.svg&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Vite App&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;AI Photo Generator&amp;lt;/h1&amp;gt; &amp;lt;div id=&amp;#34;result&amp;#34;&amp;gt; Image will appear here &amp;lt;/div&amp;gt; &amp;lt;form&amp;gt; &amp;lt;label for=&amp;#34;prompt&amp;#34;&amp;gt;Prompt&amp;lt;/label&amp;gt; &amp;lt;textarea name=&amp;#34;prompt&amp;#34; maxlength=&amp;#34;160&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Dream&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;/main.</description>
    </item>
    
    <item>
      <title>Loading Spinner</title>
      <link>https://fireship.io/courses/js/app-loader/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-loader/</guid>
      <description> What state should a button typically be in when the app performing an async operation? Let&amp;rsquo;s add a loading indicator to our UI that replaces the text inside the submit button.
Loading Code function showSpinner() { const button = document.querySelector(&amp;#39;button&amp;#39;); button.disabled = true; button.innerHTML = &amp;#39;Dreaming... &amp;lt;span class=&amp;#34;spinner&amp;#34;&amp;gt;🧠&amp;lt;/span&amp;gt;&amp;#39;; } function hideSpinner() { const button = document.querySelector(&amp;#39;button&amp;#39;); button.disabled = false; button.innerHTML = &amp;#39;Dream&amp;#39;; } </description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://fireship.io/courses/js/app-error-handling/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-error-handling/</guid>
      <description>What is the usual way to handle errors in an async function? Server Error Handling Errors can happen on the server when the user submits bad data from the form. Let&amp;rsquo;s catch the errors and send a useful message back to the client.
app.post(&amp;#39;/dream&amp;#39;, async (req, res) =&amp;gt; { try { // main code here } catch (error) { console.error(error) res.status(500).send(error?.response.data.error.message || &amp;#39;Something went wrong&amp;#39;); } }); Frontend Error Handling When the server fails, we can check the response status and display an error message to the user.</description>
    </item>
    
    <item>
      <title>JavaScript for the Haters</title>
      <link>https://fireship.io/courses/js/bonus-haters/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/bonus-haters/</guid>
      <description>Coming Soon&amp;hellip; JavaScript for the Haters will drop on Thanksgiving, November 24th, 2022.</description>
    </item>
    
  </channel>
</rss>
