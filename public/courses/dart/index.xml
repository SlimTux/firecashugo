<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dart 101 on Fireship</title>
    <link>https://fireship.io/courses/dart/</link>
    <description>Recent content in Dart 101 on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Jul 2022 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/courses/dart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dart in 100 Seconds</title>
      <link>https://fireship.io/courses/dart/basics-dart-100-seconds/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-dart-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Getting Started with Dart</title>
      <link>https://fireship.io/courses/dart/basics-install/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-install/</guid>
      <description>How to Follow Along I&amp;rsquo;d recommend that you code along with each video in your own editor. You can find the full source code for each video on GitHub.
Option 1 - Install Flutter If you plan on using Flutter, follow the Flutter installation instructions.
Option 2 - Install Dart If you don&amp;rsquo;t care about Flutter, checkout the Dart SDK Install guide
Option 3 - Use Dart Pad If you want to use the browser, try DartPad</description>
    </item>
    
    <item>
      <title>Dart CLI</title>
      <link>https://fireship.io/courses/dart/basics-cli/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-cli/</guid>
      <description>Create a New Dart Project Learn about the available commands and how to use them.
command line dart --help Create a new project.
command line dart create -t console-simple my_app # OR use the current directory (if it&amp;#39;s empty) dart create -t console-simple . --force Run the application.
command line dart run Compile Dart Code Compile dart code to an executable.
command line dart compile exe bin/dart.dart bin/dart.exe Compile your code to JavaScript and run it with Node.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://fireship.io/courses/dart/basics-variables/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-variables/</guid>
      <description>Basic data types Declare a variable by putting the data type in front of the variable name.
file_type_dartlang main.dart int num1 = 2; double num2 = 3.0; bool isTrue = true; String str = &amp;#39;Hello&amp;#39;; Runtime Type Checking You can check the runtime type of a variable using the is keyword, or via its runtimeType property.
file_type_dartlang main.dart (num1 + num2) is int (num1 + num2).runtimeType Var Keyword The var keyword is like saying I don&amp;rsquo;t care to annotate the variable with a type.</description>
    </item>
    
    <item>
      <title>Null Safety Explained</title>
      <link>https://fireship.io/courses/dart/basics-null-safety/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-null-safety/</guid>
      <description>Sound null safety is a feature added to Dart 2.0. It means variables can no longer be assigned null by default. This reduces the risk of runtime bugs and general makes our code more concise because &amp;ldquo;null checking&amp;rdquo; is no longer necessary.
Non-Nullable by Default Variables cannot be null by default. Attempting to assign a null value will result in a compile-time error.
file_type_dartlang main.dart int age = 75; // non-nullable int age = null; // error Allow Null In some cases, it is useful to allow a variable to be null, which is achieved by adding question mark to the end of the variable&amp;rsquo;s type.</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://fireship.io/courses/dart/syntax-control-flow/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-control-flow/</guid>
      <description>Conditional Statements file_type_dartlang control-flow.dart String color = &amp;#39;blue&amp;#39;; if (color == &amp;#39;blue&amp;#39;) { // } else if (color == &amp;#39;green&amp;#39;) { // } else { // default } // One liner if (color == &amp;#39;red&amp;#39;) print(&amp;#39;hello red!&amp;#39;); Loops file_type_dartlang control-flow.dart for (var i = 0; i &amp;lt; 5; i++) { print(i); // break; // continue; } int i = 0; while (i &amp;lt; 5) { print(i); i++; } i = 0; do { print(i); } while (i &amp;lt; 5); Assertions file_type_dartlang control-flow.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://fireship.io/courses/dart/syntax-operators/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-operators/</guid>
      <description>Let&amp;rsquo;s take a look at some of the more interesting operators in Dart.
Assignment Use the assignment operator to assign a value to a variable, ONLY if it&amp;rsquo;s not already assigned.
file_type_dartlang main.dart String? name; name ??= &amp;#39;Guest&amp;#39;; var z = name ?? &amp;#39;Guest&amp;#39;; Ternary Operator Use a ternary to replace the if/else statement.
file_type_dartlang main.dart String color = &amp;#39;blue&amp;#39;; var isThisBlue = color == &amp;#39;blue&amp;#39; ? &amp;#39;Yep, blue it is&amp;#39; : &amp;#39;Nah, it aint blue&amp;#39;; Cascade Use the cascade operator to call methods on an object without having to create a new line of code.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://fireship.io/courses/dart/syntax-functions/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-functions/</guid>
      <description>Basic Functions Function with positional parameters:
file_type_dartlang functions.dart // Basic Function String takeFive(int number) { return &amp;#39;$number minus five equals ${number - 5}&amp;#39;; } Function with named parameters:
file_type_dartlang functions.dart // Named parameters namedParams({required int a, int b = 5}) { return a - b; } namedParams(a: 23, b: 10); Arrow Functions Arrow functions are useful when passing functions as parameters to other functions.
file_type_dartlang functions.dart // Arrow Function String takeFive(int number) =&amp;gt; &amp;#39;$number minus five equals ${number - 5}&amp;#39;; Callback Functions Many APIs in Dart use callback functions, often to handle events or gestures in Flutter.</description>
    </item>
    
    <item>
      <title>List</title>
      <link>https://fireship.io/courses/dart/syntax-list/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-list/</guid>
      <description>Basic Lists file_type_dartlang lists.dart List&amp;lt;int&amp;gt; list = [1, 2, 3, 4, 5]; list[0]; // 1 list.length; // 5 list.last; // 5 list.first; // 1 Loops file_type_dartlang lists.dart for (int n in list) { print(n); } list.forEach((n) =&amp;gt; print(n)); var doubled = list.map((n) =&amp;gt; n * 2); Spread Syntax file_type_dartlang lists.dart var combined = [...list, ...doubled]; combined.forEach(print); Conditions in Lists file_type_dartlang lists.dart bool depressed = false; var cart = [ &amp;#39;milk&amp;#39;, &amp;#39;eggs&amp;#39;, if (depressed) &amp;#39;Vodka&amp;#39; ]; </description>
    </item>
    
    <item>
      <title>Map</title>
      <link>https://fireship.io/courses/dart/syntax-map/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-map/</guid>
      <description>Basic Maps file_type_dartlang maps.dart Map&amp;lt;String, dynamic&amp;gt; book = { &amp;#39;title&amp;#39;: &amp;#39;Moby Dick&amp;#39;, &amp;#39;author&amp;#39;: &amp;#39;Herman Melville&amp;#39;, &amp;#39;pages&amp;#39;: 752, }; book[&amp;#39;title&amp;#39;]; book[&amp;#39;published&amp;#39;] = 1851; Loop over a Map file_type_dartlang maps.dart book.keys; book.values; book.values.toList(); for (MapEntry b in book.entries) { print(&amp;#39;Key ${b.key}, Value ${b.value}&amp;#39;); } book.forEach((k, v) =&amp;gt; print(&amp;#34;Key : $k, Value : $v&amp;#34;)); </description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://fireship.io/courses/dart/classes-basic/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-basic/</guid>
      <description>Create a Class Classes are a way to group data and behavior together, like a blueprint for an Object.
file_type_dartlang classes.dart class Basic { int id; Basic(this.id); doStuff() { print(&amp;#39;Hello my ID is $id&amp;#39;); } } Create an Object Use the class to instantiate an Object. The new keyword is optional.
file_type_dartlang classes.dart Basic thing = new Basic(55); thing.id; thing.doStuff(); Static Methods You can call static methods on the class itself without creating a new object.</description>
    </item>
    
    <item>
      <title>Constructors</title>
      <link>https://fireship.io/courses/dart/classes-constructors/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-constructors/</guid>
      <description>Constructor Basics The this keyword is used to refer to the current instance of a class and is optional unless there is a name collision.
file_type_dartlang constructors.dart class Rectangle { final int width; final int height; String? name; late final int area; Rectangle(this.width, this.height, [this.name]) { area = width * height; } } Named Parameters In Flutter, all widgets used named parameters.
file_type_dartlang constructors.dart class Circle { const Circle({required int radius, String?</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://fireship.io/courses/dart/classes-interfaces/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-interfaces/</guid>
      <description>An interface is a contract that a class must follow. Prefixing a method or variable with _ makes it private, so it won&amp;rsquo;t be visible when imported from a different file.
file_type_dartlang interfaces.dart class Elephant { // Public interface final String name; // In the interface, but visible only in this library. (private) final int _id = 23; // Not in the interface, since this is a constructor. Elephant(this.name); // Public method.</description>
    </item>
    
    <item>
      <title>Extend</title>
      <link>https://fireship.io/courses/dart/classes-extend/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-extend/</guid>
      <description>Superclass The superclass or parent class contains the behaviors that is shared by all subclasses. The abstract keyword is used to indicate that the class is not meant to be instantiated, but rather to be inherited from.
file_type_dartlang extend.dart abstract class Dog { void walk() { print(&amp;#39;walking...&amp;#39;); } } Subclass The subclass can @override the behavior of the superclass.
file_type_dartlang extend.dart class Pug extends Dog { String breed = &amp;#39;pug&amp;#39;; @override void walk() { super.</description>
    </item>
    
    <item>
      <title>Mixin</title>
      <link>https://fireship.io/courses/dart/classes-mixin/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-mixin/</guid>
      <description>What are mixins? A mixin is just like a class, it can have methods and properties, but it can&amp;rsquo;t be instantiated.
file_type_dartlang mixins.dart mixin Strong { bool doesLift = true; void benchPress() { print(&amp;#39;doing bench press...&amp;#39;); } } mixin Fast { bool doesRun = true; void sprint() { print(&amp;#39;running fast...&amp;#39;); } } What are mixins used for? Mixins are used to extend specific behaviors to classes with the with keyword. Certain Flutter libaries use mixins to extend shared behaviors to classes.</description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://fireship.io/courses/dart/classes-generics/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-generics/</guid>
      <description>What are Generics? Generics are a way to parameterize types. They allow a class to wrap a type, and then use that type in multiple places. For example, we can have a Box class that wraps an double or String type.
file_type_dartlang generics.dart Box&amp;lt;String&amp;gt; box1 = Box(&amp;#39;cool&amp;#39;); Box&amp;lt;double&amp;gt; box2 = Box(2.23); Using Generics in a Class A generic type is a type that can be used as a substitute for a type parameter.</description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://fireship.io/courses/dart/advanced-packages/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-packages/</guid>
      <description>Namespace packages The easiest way to deal with name conflicts is to use a namespace package.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; as External; Exclude code from a package Exclude code from a package with the hide keyword.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; hide Circle; Isolate code from a package Import individual classes from a package with the show keyword.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; show Rectangle; </description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://fireship.io/courses/dart/advanced-future/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-future/</guid>
      <description>Create a Future Many APIs in Dart/Flutter return Futures. To simulate an async event, we can create a future that will resolve after a 5 second delay.
file_type_dartlang futures.dart var delay = Future.delayed(Duration(seconds: 5)); Handle a Future A future can either be a success or a error. Use then then to handle a successful resolution and catchError to handle an error.
file_type_dartlang futures.dart delay .then((value) =&amp;gt; print(&amp;#39;I have been waiting&amp;#39;)) .</description>
    </item>
    
    <item>
      <title>Stream</title>
      <link>https://fireship.io/courses/dart/advanced-stream/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-stream/</guid>
      <description>Create a Stream A Stream provides a way to handle multiple async events. Simulate a stream of events by creating one from a list of numbers.
file_type_dartlang streams.dart var stream = Stream.fromIterable([1, 2, 3]); By default, a Stream can only have one listener. If you intend to have multiple listeners convert it to a broadcast stream.
file_type_dartlang streams.dart var stream = Stream.fromIterable([1, 2, 3]).asBroadcastStream(); Listen to a Stream Listen to a Stream by subscribing to it with the listen method.</description>
    </item>
    
  </channel>
</rss>
