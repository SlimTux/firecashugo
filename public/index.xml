<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fireship - Learn to Code Faster on Fireship</title>
    <link>https://fireship.io/</link>
    <description>Recent content in Fireship - Learn to Code Faster on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Sep 2022 08:36:36 -0700</lastBuildDate><atom:link href="https://fireship.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Meet Zack</title>
      <link>https://fireship.io/courses/supabase/intro-zack/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/intro-zack/</guid>
      <description>More Content from Zack Subscribe to the Supaship YouTube Channel Follow Zack on Twitter </description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/js/101-resources/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-resources/</guid>
      <description> Why should you learn JavaScript? Course Resources Source Code Required Tools Node.js. I would recommend using nvm mac/linux or nvm windows to install Node.js. Get Help Discord </description>
    </item>
    
    <item>
      <title>Angular Beginner Project</title>
      <link>https://fireship.io/courses/angular/start-angular-beginner-tutorial/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/start-angular-beginner-tutorial/</guid>
      <description>Brand New to Angular? The following beginner-level tutorial teaches you how to build a Tic-Tac-Toe game with Angular. It&amp;rsquo;s not part of the full course, but rather a gentle intro project to get acquainted with the Angular ecosystem. It is completely optional.
Tic-Tac-Toe Source Code
Example of the final tic-tac-toe PWA deployed in this section
Recommended Lessons You may also find the following lessons useful for mastering the basics of Angular.</description>
    </item>
    
    <item>
      <title>Flutter Explained in 100 Seconds</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-flutter-100s/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-flutter-100s/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/intro-resources/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/intro-resources/</guid>
      <description>Course Resources QuizApp Source Code Quiz Questions Repo Flutter Docs FlutterFire Docs Social Slack Chat YouTube &amp;amp; Twitter Additional Resources Get it on the App Store Get it on Google Play Advanced Flutter Tutorials </description>
    </item>
    
    <item>
      <title>VS Code in 100 Seconds</title>
      <link>https://fireship.io/courses/vscode-tricks/vscode-100-seconds/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/vscode-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>README</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-resources/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-resources/</guid>
      <description>I updated my package.json with the versions specified in this lesson? Using other versions could result in broken code
Essentials üöÄ Live Demo üíæ Source code üí¨ Slack Official Resources Next Docs Firebase Docs React Docs Helpful Bonus Content React Dropdown Firebase Data Modeling Course Firebase Security Course Packages It is highly recommended that you follow along with the same package versions show below.
file_type_npm package.json { // ... &amp;#34;dependencies&amp;#34;: { &amp;#34;firebase&amp;#34;: &amp;#34;^8.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/ionic/intro-resources/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-resources/</guid>
      <description>How to Follow this Course You should clone the project source code as a reference. However, I recommend that you create your own project from scratch, then pause after each video and write some code. You will get the most out of a project-based course like this when you learn by doing. Experiment with your own code throughout the process and break things.
Resources Bookmark these pages:
Project The soruce code if the source of truth for this project.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/firestore-data-modeling/intro-course-resources/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/intro-course-resources/</guid>
      <description>Course Resources Query Code Snippets on Github Cloud Firestore Docs Social Slack Chat YouTube &amp;amp; Twitter Additional Resources Get to Know Cloud Firestore Data Modeling AngularFirebase.com Cloud Functions Master Course </description>
    </item>
    
    <item>
      <title>The History of JavaScript</title>
      <link>https://fireship.io/courses/javascript/intro-history/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/intro-history/</guid>
      <description>JavaScript started as a prototype scripting language written by Brendan Eich in 1995 for the Netscape Navigator browser under the working name of &amp;ldquo;Mocha&amp;rdquo;. After being renamed to &amp;ldquo;JavaScript&amp;rdquo;, it was standardized by ECMA International as ECMA-262, or ECMAScript in 1997. The authoritative group of people/orgs in charge of the standard is known as TC-39.
Over the next 25 years, it would see a variety of highs and lows. The most notable releases include</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/cloud-functions/intro-course-resources/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/intro-course-resources/</guid>
      <description>If you get stuck or have questions, feel free to reach out for 1-on-1 support:
Chat Support on Slack I recommend following along and writing your own code from scratch, but the source code is available on Github as a reference:
Project Source Code We are only scratching the surface, check out these learning resources:
AngularFirebase Cloud Functions Lessons Official Firebase Functions Docs and Video Series Also, follow me on Github and Twitter to stay up to date:</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/supabase/intro-resources/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/intro-resources/</guid>
      <description>Essentials Live App: https://supaship.io Demo of our course&amp;rsquo;s endpoint (note: auth will not work): https://supaship-course-demo.netlify.app Github repo: https://github.com/fireship-io/supaship.io Branch showing the end state of our course: https://github.com/fireship-io/supaship.io/tree/course-end-point Official Resources Supabase Docs: https://supabase.com/docs Playwright Docs: https://playwright.dev/docs/intro React Docs: https://reactjs.org/ React Router Docs: https://reactrouter.com/en/main Tailwind Docs: https://tailwindcss.com/ Vite Docs: https://vitejs.dev/guide/ Docker installation: https://docs.docker.com/get-docker/ Postgres installation: https://www.postgresql.org/download/ For Questions Zack&amp;rsquo;s Twitter: https://www.twitter.com/zackderose Fireship Discord: https://discord.gg/SpDdJ3qaKK Supaship Live: https://www.youtube.com/@Supaship6000 Dependencies &amp;#34;dependencies&amp;#34;: { &amp;#34;@supabase/auth-ui-react&amp;#34;: &amp;#34;^0.2.6&amp;#34;, &amp;#34;@supabase/supabase-js&amp;#34;: &amp;#34;^2.</description>
    </item>
    
    <item>
      <title>JavaScript in 100 Seconds</title>
      <link>https://fireship.io/courses/js/101-js-in-100-seconds/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-js-in-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>React in 100 Seconds</title>
      <link>https://fireship.io/courses/react/basics-react/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-react/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-cli/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-cli/</guid>
      <description>When you install VS Code, it adds the code command to your terminal.
‚ö†Ô∏è If you do not have access to the code command, follow the setup instructions for your machine here.
‚ú® Trick - Open VS Code from the Terminal Use the CLI to launch a new VS Code window, or open a file in the current workspace.
command line code . # current working dir code /path/to/dir # path code ~/.</description>
    </item>
    
    <item>
      <title>Flutter Overview</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/intro-how-flutter-works/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/intro-how-flutter-works/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-resources/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-resources/</guid>
      <description>Code QuizApp Source Code Quiz Questions Repo Optional Courses Dart Course Firestore Data Modeling Course Advanced Flutter Tutorials Social Slack Chat YouTube &amp;amp; Twitter Apps Get it on the App Store Get it on Google Play Docs Flutter Docs FlutterFire Docs </description>
    </item>
    
    <item>
      <title>What is Ionic</title>
      <link>https://fireship.io/courses/ionic/intro-what-ionic/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-what-ionic/</guid>
      <description></description>
    </item>
    
    <item>
      <title>React Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-react-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-react-basics/</guid>
      <description>Which hook will be fired when the component is first mounted or created? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for React. It is not required to build the main demo app in the course.</description>
    </item>
    
    <item>
      <title>Firebase Security in 100 Seconds</title>
      <link>https://fireship.io/courses/firebase-security/intro-firebase-security-100-seconds/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/intro-firebase-security-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How JavaScript Works</title>
      <link>https://fireship.io/courses/javascript/intro-how-js-works/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/intro-how-js-works/</guid>
      <description>JavaScript is often described as some variation of &amp;ldquo;high-level, single-threaded, garbage-collected, interpreted (or just-in-time compiled), prototype-based, multi-paradigm, dynamic language with a non-blocking event loop&amp;rdquo;. You may encounter these terms during an JS job interview, but understanding their meaning will help you better understand the behavior of your code. Let&amp;rsquo;s unpack each of these key terms.
Keep in mind, you don&#39;t *need* to know these concepts to start using JavaScript productively. It may take years of development experience before they really start to sink in, so don&#39;t worry if it feels overwhelming.</description>
    </item>
    
    <item>
      <title>What is Firestore</title>
      <link>https://fireship.io/courses/firestore-data-modeling/intro-what-is-firestore/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/intro-what-is-firestore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What is Serverless?</title>
      <link>https://fireship.io/courses/cloud-functions/intro-what-is-serverless/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/intro-what-is-serverless/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Supabase in 100 Seconds</title>
      <link>https://fireship.io/courses/supabase/intro-supbase-100-seconds/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/intro-supbase-100-seconds/</guid>
      <description> What is the biggest different between Supabase and Firebase? </description>
    </item>
    
    <item>
      <title>JavaScript Crash Course</title>
      <link>https://fireship.io/courses/js/101-basics/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/101-basics/</guid>
      <description>Which term does NOT describe JavaScript? Let&amp;rsquo;s a quick look at 100 essential concepts that every developer should know. At this point, you don&amp;rsquo;t need to understand everything. Just get a feel for the topics and we&amp;rsquo;ll dive deeper throughout the course. Come back to this lesson at end and it should make a lot more sense.
If you want to learn more about a topic, check out the MDN&amp;rsquo;s JavaScript content - it is the unofficial JS documentation.</description>
    </item>
    
    <item>
      <title>Installation and Setup</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/intro-flutter-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/intro-flutter-setup/</guid>
      <description>Tasks Install Flutter and run flutter doctor. Add Flutter to your Path Download Android Studio and configure an Emulator. Download XCode (MacOS) Dependencies The current version of this course uses the following dependencies. For the most reliable results, you should use the same versions.
Flutter &amp;amp; Firebase regularly update these packages and later versions may break the code in this course, so update them at your own risk.
file_type_dartlang pubspec.yaml dependencies: flutter: sdk: flutter cupertino_icons: ^0.</description>
    </item>
    
    <item>
      <title>Installation and Setup</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-flutter-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-flutter-setup/</guid>
      <description>Tasks Install Flutter Add Flutter to your Path Run flutter doctor Download Android Studio and configure an Emulator. Download XCode (MacOS only) </description>
    </item>
    
    <item>
      <title>Migration from Ionic v3 to v4</title>
      <link>https://fireship.io/courses/ionic/intro-ionic3-migration-tips/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-ionic3-migration-tips/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tweak Settings</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-settings/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-settings/</guid>
      <description>Tasks Customize your color theme like Atom One Dark Update your Icon Theme with VSCode-icons Add a custom font like Fira Code ‚ú® Trick - Ligatures Font ligatures are special symbols that combine multiple characters into a single symbol and arguably make your code more readable. Enable ligatures in VS Code by adding the following changes to your settings (note: you must install Fira Code font on your machine).
file_type_config settings.</description>
    </item>
    
    <item>
      <title>Anatomy</title>
      <link>https://fireship.io/courses/react/basics-anatomy/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-anatomy/</guid>
      <description>React Build Tools There are many ways to build a react app. The most common options include:
Create React App Vite Next.js Gatsby React Files Get familiar with the files in your React project.
package.json - The main file that defines the dependencies and other settings for your project. node_modules - Source code for depencies. Do not touch. public - The directory where your static files are stored. src/index.js - Main entrypoint to bootstrap the app.</description>
    </item>
    
    <item>
      <title>Firebase Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-firebase-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-firebase-basics/</guid>
      <description>What is the name of the function used to listen to realtime Firestore data? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for Firebase. It is not required to build the main demo app in the course.
Read the full Firebase lesson here.</description>
    </item>
    
    <item>
      <title>Next.js Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-next-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-next-basics/</guid>
      <description>Where do you define routes in Next.js? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for Next.js. It is not required to build the main demo app in the course.
Next.js Basics Source Code</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://fireship.io/courses/firebase-security/intro-get-started/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/intro-get-started/</guid>
      <description>Important Links Project Source Code Security Rules Docs Firestore Data Modeling Course 1. Create a Firebase Project Create a Firebase project or use an existing one.
2. Create a Frontend Project Create a frontend project or use an existing one. As a bare minimum requirement, simply initialize an NPM project using the command below.
command line npm init -y # OR npx create-react-app myapp 3. Connect your Local Code to Firebase command line npm -g firebase-tools firebase-login firebase init # choose firestore, functions, storage, and emulators </description>
    </item>
    
    <item>
      <title>Firestore vs SQL</title>
      <link>https://fireship.io/courses/firestore-data-modeling/intro-relational-data-sql-vs-nosql/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/intro-relational-data-sql-vs-nosql/</guid>
      <description>Focus on how you will access the data from the app for a specific view or screen, NOT the most efficient normalized structure. Favor efficient reads over efficient writes.</description>
    </item>
    
    <item>
      <title>How to Run JavaScript Code</title>
      <link>https://fireship.io/courses/javascript/beginner-js-where-to-run/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-where-to-run/</guid>
      <description>In order to follow along with this course, you need to know how and where you run your JavaScript code. You have several options to run your first hello world programming:
Open your editor and create a file named index.js.
file_type_js index.js console.log(&amp;#39;hello world&amp;#39;) How to Run JavaScript from the Command Line Running a JS program from the command line is handled by NodeJS. Start by installing NodeJS on local machine if necessary.</description>
    </item>
    
    <item>
      <title>Firebase Cloud Functions Setup</title>
      <link>https://fireship.io/courses/cloud-functions/intro-setting-up-firebase-cloud-functions/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/intro-setting-up-firebase-cloud-functions/</guid>
      <description>Installation and setup is identical for Mac, Windows, and Linux. The only requirement is NodeJS which is likely available on your system, but if not, install NVM https://github.com/nvm-sh/nvm.
Install Node Cloud functions in either Node 6 or 8, so it is recommended that you setup your local env with. For example, with NVM
command line nvm install 8 nvm use 8 Setup Cloud Functions command line npm install firebase-tools -g firebase login firebase init functions cd functions Common Issue on Windows Incorrect environment path on windows https://github.</description>
    </item>
    
    <item>
      <title>React Primer</title>
      <link>https://fireship.io/courses/supabase/intro-react-basics/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/intro-react-basics/</guid>
      <description>Which Hook is used to run code when a component is first mounted to the DOM? Optional This video was originally released on YouTube and is intended to be a primer for React. It is not required to build the main demo app in the course.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://fireship.io/courses/react/basics-components/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-components/</guid>
      <description>React Dev Tools React Components are reusable pieces of UI that developers compose together as a tree to represent a complete frontend application. Before writing any code, install the React Dev Tools extension and go to a website like Facebook that uses react and inspect its code.
Define Components with JSX Now in your code, define a component by declaring a JavaScript function. It can use the function keyword, or be a function expression if you prefer.</description>
    </item>
    
    <item>
      <title>Firebase setup</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/intro-firebase-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/intro-firebase-setup/</guid>
      <description>Tasks Create a Firebase Project Add an iOS app to your project Add an Android app to your project Use the keytool to generate an SHA Certificate. See my Flutter Firebase SHA guide if you get stuck at this part. Also reference the latest Official FlutterFire Setup Docs</description>
    </item>
    
    <item>
      <title>Flutter Create</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-flutter-create/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-flutter-create/</guid>
      <description>Create an App Create an app with a bundle ID. Choose any bundle ID you&amp;rsquo;d like, following the reverse domain naming convention.
command line flutter create --org io.fireship myapp Dependencies The current version of this course uses the following dependencies. For the most reliable results, you should use the same versions.
Flutter &amp;amp; Firebase regularly update these packages and later versions may break the code in this course, so update them at your own risk.</description>
    </item>
    
    <item>
      <title>Ionic Setup</title>
      <link>https://fireship.io/courses/ionic/intro-ionic-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-ionic-setup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-datatypes/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-datatypes/</guid>
      <description>Learn more about Firestore&amp;rsquo;s supported data types</description>
    </item>
    
    <item>
      <title>The JavaScript Survival Guide</title>
      <link>https://fireship.io/courses/javascript/beginner-js-survival-guide/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-survival-guide/</guid>
      <description>The JavaScript Survival Guide is a primer for the so-called &amp;ldquo;weird&amp;rdquo; features of the language. These concepts are common pain-points for developers, but they become relatively simple when you understand relationship between your code and the JS engine. Not to mention, these topics come up frequently on JS interviews.
All research this section is based on the guidance from Mozilla - the holy grail of JS documentation.
Primitive vs Object The lowest level building blocks in JavaScript are primitives, which include: undefined, null, string, number, bigint, boolean, and symbol.</description>
    </item>
    
    <item>
      <title>Project Structure</title>
      <link>https://fireship.io/courses/cloud-functions/intro-project-structure/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/intro-project-structure/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Supabase Primer</title>
      <link>https://fireship.io/courses/supabase/intro-supabase-basics/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/intro-supabase-basics/</guid>
      <description>What type of authentication mechanism does Supabase use by default? Optional: Supabase Project The video in this section contains a simplifed project designed to showcase the various features of Supabase. You can follow along with the video, or you can skip ahead to the next section if you already feel comfortable with the platform.</description>
    </item>
    
    <item>
      <title>Conditional Rendering</title>
      <link>https://fireship.io/courses/react/basics-conditional-rendering/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-conditional-rendering/</guid>
      <description>Conditional rendering is a very common pattern where you render a component based on a boolean condition. There are several ways to implement conditional rendering in React.
Option 1: If Else App.js function Conditional({ count }) { if (count &amp;gt; 5) { return &amp;lt;h1&amp;gt;Count is greater than 5&amp;lt;/h1&amp;gt;; } else { return &amp;lt;h1&amp;gt;Count is less than 5&amp;lt;/h1&amp;gt;; } } Option 2: Ternary App.js {count % 2 === 0 ? &amp;lt;h1&amp;gt;Count is even&amp;lt;/h1&amp;gt; : &amp;lt;h1&amp;gt;Count is odd&amp;lt;/h1&amp;gt; } Option 3: Logical And App.</description>
    </item>
    
    <item>
      <title>Command Palette</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-cmd-palette/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-cmd-palette/</guid>
      <description>Tasks Open the Command Palette with ctrl + shift + p ‚ú® Trick - Symbol Search From the command palette, type @ to quickly navigate to symbols within a file.</description>
    </item>
    
    <item>
      <title>Editor Tricks</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-vscode/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-vscode/</guid>
      <description> Use the Flutter Extension Outline to navigate your code and move widgets around. Use Quick Fix to handle linting errors. Use Snippets to write boilerplate automatically. Use the Refactor Tool to add widgets to your code. </description>
    </item>
    
    <item>
      <title>File Explorer</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-explorer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-explorer/</guid>
      <description>Tasks Open the File Explorer with ctrl + b Close a file with ctrl + w Save a file with ctrl + s ‚ú® Trick - Collapse Folders In the file explorer, find the icon to collapse all folders and click it. This will save you the tedious task of closing them one-by-one.
‚ú® Trick - Show hidden files VS code excludes certain hidden files from the file explorer by default, like .</description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/ionic/intro-setup-firebase/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-setup-firebase/</guid>
      <description>Native Tooling Overview </description>
    </item>
    
    <item>
      <title>VS Code</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/vs-code-pro-tips/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/vs-code-pro-tips/</guid>
      <description>TIP! The Refactor Tool is your new best friend!</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://fireship.io/courses/javascript/beginner-js-functions/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-functions/</guid>
      <description>Functions are the backbone of JavaScript development, but perhaps the most difficult concept to master. The following section defines key concepts related to JS functions with practical examples that you can try on your own.
Anatomy of a Function A function is piece of code that can be called during the lifecycle of the app to perform a task or return a value. A function declaration can be broken down into the following pieces.</description>
    </item>
    
    <item>
      <title>Techniques</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-collections-documents/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-collections-documents/</guid>
      <description> Embed. Model data directly on a document. Root collection. Normalize data into separate collections, then reference document IDs. Subcollection. Nest data in a collection under a document. Bucket. Separate data into multiple documents, but embed as much as possible. </description>
    </item>
    
    <item>
      <title>Deployment</title>
      <link>https://fireship.io/courses/cloud-functions/intro-deployment/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/intro-deployment/</guid>
      <description> command line firebase deploy --only functions or firebase deploy --only functions:your-function-name </description>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://fireship.io/courses/react/basics-loops/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-loops/</guid>
      <description>Array Map The most common way to loop over a collection of data in React is to use the Array map method. It takes a callback function that gets called on each element to transform the data into UI elements.
App.js const data = [ { id: 1, name: &amp;#39;Fido üêï&amp;#39; }, { id: 2, name: &amp;#39;Snowball üêà&amp;#39; }, { id: 3, name: &amp;#39;Murph üêà‚Äç‚¨õ&amp;#39; }, { id: 4, name: &amp;#39;Zelda üêà&amp;#39; }, ]; function ListOfAnimals() { return ( &amp;lt;ul&amp;gt; {data &amp;amp;&amp;amp; // Only render if there&amp;#39;s data - see &amp;#39;Conditional Rendering&amp;#39; data.</description>
    </item>
    
    <item>
      <title>AngularFire Setup</title>
      <link>https://fireship.io/courses/ionic/intro-angular-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/intro-angular-setup/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dev Tools</title>
      <link>https://fireship.io/courses/flutter-firebase/intro-dev-tools/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/intro-dev-tools/</guid>
      <description>Find Flutter dev tools in the bottom left corner of VS Code OR click the link in the terminal.</description>
    </item>
    
    <item>
      <title>Keyboard Shortcuts</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-keyboard-shortcuts/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-keyboard-shortcuts/</guid>
      <description>Tasks Open the keyboard shortcuts page by clicking the cog icon in the activity bar. ‚ú® Trick - VS Code Cheat Sheet Print out the VS Code cheat sheet and hang it on your wall. It&amp;rsquo;s a great reference until you have these shortcuts permanently burned into your brain.
Windows Cheat Sheet MacOS Cheat Sheet Linux Cheat Sheet </description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-stateful-stateless/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-stateful-stateless/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://fireship.io/courses/javascript/beginner-js-objects/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-objects/</guid>
      <description>The JavaScript object is a collection of key-value pairs, similar to a map, dictionary, or hash-table in other programming languages. Anything that is not a JS primitive is an Object.
An Object is a collection of properties. A Property is a key-value pair that contains a name and a value. A Property Name is a unique value that can be coerced to a string that points to a value. A Property Value can be any value, including other objects or functions, that associated with the name/key.</description>
    </item>
    
    <item>
      <title>Read</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-read-documents/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-read-documents/</guid>
      <description>Use the helper function below to query an array of document IDs. This is especially useful when you have a many-to-many data model that references IDs from a separate collection.
file_type_js firestore.js // Helper: Reads an array of IDs from a collection concurrently const readIds = async (collection, ids) =&amp;gt; { const reads = ids.map(id =&amp;gt; collection.doc(id).get() ); const result = await Promise.all(reads); return result.map(v =&amp;gt; v.data()); } </description>
    </item>
    
    <item>
      <title>Intro to HTTP Functions</title>
      <link>https://fireship.io/courses/cloud-functions/http-intro/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/http-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Events</title>
      <link>https://fireship.io/courses/react/basics-events/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-events/</guid>
      <description>Events in Vanilla JS file_type_js app.js const button = document.querySelector(&amp;#39;button&amp;#39;); button.addEventListener(&amp;#39;click&amp;#39;, (event) =&amp;gt; { console.log(event); }) Events in React App.js function Events() { return &amp;lt;button onClick={(event =&amp;gt; console.log(event))}&amp;gt;Click&amp;lt;/button&amp;gt; } Challenge Implement a text input that updates the input value and logs the event target.</description>
    </item>
    
    <item>
      <title>Code Organization</title>
      <link>https://fireship.io/courses/ionic/basics-code-organization/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-code-organization/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intellisense</title>
      <link>https://fireship.io/courses/vscode-tricks/basics-intellisense/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/basics-intellisense/</guid>
      <description>Tasks Make sure you have the VS Code extension installed for your preferred language. TypeScript and JavaScript work out of the box. ‚ú® Trick - Dig into Intellisense Right click on any symbol in the editor and select Go to Definition or Peek Definition. The type definition file is used by VS Code to perform autocompletion.
‚ú® Trick - Force Intellisense Use the ctrl + space key combination to force Intellisense to show up.</description>
    </item>
    
    <item>
      <title>Platform Checking</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-platform-checking/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-platform-checking/</guid>
      <description>Example Code file_type_dartlang main.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:flutter/cupertino.dart&amp;#39;; import &amp;#39;dart:io&amp;#39; show Platform; void main() =&amp;gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: Center( child: Platform.isAndroid ? Switch(value: true, onChanged: (v) =&amp;gt; null) : CupertinoSwitch(value: true, onChanged: (v) =&amp;gt; null), ), ), ); } } </description>
    </item>
    
    <item>
      <title>Query</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-query-collections/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-query-collections/</guid>
      <description>Examples of how to make queries in Firestore that resemble SQL.
file_type_js firestore.js // Basic Where const rangeQuery = db.collection(&amp;#39;users&amp;#39;).where(&amp;#39;age&amp;#39;, &amp;#39;&amp;gt;=&amp;#39;, 21); // AND const andQuery = db.collection(&amp;#39;users&amp;#39;) .where(&amp;#39;age&amp;#39;, &amp;#39;==&amp;#39;, 21) .where(&amp;#39;sex&amp;#39;, &amp;#39;==&amp;#39;, &amp;#39;M&amp;#39;) // OR const q1 = db.collection(&amp;#39;users&amp;#39;).where(&amp;#39;age&amp;#39;, &amp;#39;==&amp;#39;, 21); const q2 = db.collection(&amp;#39;users&amp;#39;).where(&amp;#39;age&amp;#39;, &amp;#39;==&amp;#39;, 25); // NOT const not1 = db.collection(&amp;#39;users&amp;#39;).where(&amp;#39;age&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, 21); const not2 = db.collection(&amp;#39;users&amp;#39;).where(&amp;#39;age&amp;#39;, &amp;#39;&amp;lt;&amp;#39;, 21); </description>
    </item>
    
    <item>
      <title>HTTP Functions Basics</title>
      <link>https://fireship.io/courses/cloud-functions/http-basic/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/http-basic/</guid>
      <description> file_type_typescript http.ts export const basicHTTP = functions.https.onRequest((request, response) =&amp;gt; { const name = request.query.name; if (!name) { response.status(400).send(&amp;#39;ERROR you must supply a name :(&amp;#39;); } response.send(`hello ${name}`); }); </description>
    </item>
    
    <item>
      <title>State</title>
      <link>https://fireship.io/courses/react/basics-state/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-state/</guid>
      <description>Basic Usage App.js function Stateful() { const [count, setCount] = useState(0); const [prevCount, setPrevCount] = useState(0); const handleClick = () =&amp;gt; { setCount((prev) =&amp;gt; { setPrevCount(prev); setCount(count + 1); }); }; return ( &amp;lt;&amp;gt; &amp;lt;h3&amp;gt;Current count: {count}&amp;lt;/h3&amp;gt; &amp;lt;h3&amp;gt;Previous count: {prevCount}&amp;lt;/h3&amp;gt; &amp;lt;button onClick={handleClick}&amp;gt;Increment&amp;lt;/button&amp;gt; &amp;lt;/&amp;gt; ); } Updating Objects with useState App.js function Stateful() { const [state, setState] = useState({ count: 0, user: &amp;#39;Bob&amp;#39; }); const handleClick = () =&amp;gt; { setState({ .</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://fireship.io/courses/ionic/basics-components/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-components/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Material App &amp; Scaffold</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-scaffold/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-scaffold/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar(title: Text(&amp;#39;My Cool App&amp;#39;),), body: Center(child: Icon(Icons.cake),), floatingActionButton: FloatingActionButton(onPressed: () {}), drawer: Drawer(), bottomNavigationBar: BottomNavigationBar(items: [ BottomNavigationBarItem(label: &amp;#39;foo&amp;#39;, icon: Icon(Icons.call)), BottomNavigationBarItem(label: &amp;#39;bar&amp;#39;, icon: Icon(Icons.cached)) ]), ), ); } } </description>
    </item>
    
    <item>
      <title>The Console</title>
      <link>https://fireship.io/courses/javascript/concepts-console/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/concepts-console/</guid>
      <description>At this point in your JS career, you likely know what console.log does - but the Console API can do so much more! It can be an effective debugging tool, but it can also be nightmare when abused. Let&amp;rsquo;s take a look at some tricks that will keep your console output concise and beautiful. Open the console on your browser by running Ctrl + Shift + J to get started with this section.</description>
    </item>
    
    <item>
      <title>Indexes</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-indexes/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-indexes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ExpressJS</title>
      <link>https://fireship.io/courses/cloud-functions/http-expressjs/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/http-expressjs/</guid>
      <description> file_type_typescript http.ts // Multi Route ExpressJS HTTP Function const app = express(); app.get(&amp;#39;/cat&amp;#39;, (request, response) =&amp;gt; { response.send(&amp;#39;CAT&amp;#39;); }); app.get(&amp;#39;/dog&amp;#39;, (request, response) =&amp;gt; { response.send(&amp;#39;DOG&amp;#39;); }); export const api = functions.https.onRequest(app); </description>
    </item>
    
    <item>
      <title>Lifecycle and Effects</title>
      <link>https://fireship.io/courses/react/basics-lifecycle/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-lifecycle/</guid>
      <description>Lifecycle with Class Components App.js class Lifecycle extends React.Component { componentDidMount() { // Initialize } componentDidUpdate() { // Updated } componentWillUnmount() { // Removed } } Lifecycle with useEffect App.js function Lifecycle() { const [count] = useState(0); useEffect(() =&amp;gt; { console.log(&amp;#39;count updated!&amp;#39;) return () =&amp;gt; console.log(&amp;#39;destroyed!&amp;#39;) }, [count]); } Challenge Implement a CountdownTimer component that implements useState() and useEffect() in conjunction with setInterval to handle the timer. Make sure you use the useEffect() hook to call clearTimeout() when the component is destroyed.</description>
    </item>
    
    <item>
      <title>Component APIs</title>
      <link>https://fireship.io/courses/ionic/basics-component-apis/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-component-apis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Single Widget Layout</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-single-layout/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-single-layout/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What is git?</title>
      <link>https://fireship.io/courses/git/basics-what-is-git/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-what-is-git/</guid>
      <description> Who invent Git? </description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://fireship.io/courses/javascript/concepts-modules/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/concepts-modules/</guid>
      <description>A module is just a file that exports some JavaScript code.
First, a file exports (package) something useful&amp;hellip;
file_type_js awesome-pacakge.js export default &amp;#39;üßÅ&amp;#39;; Second, a different file uses this code by importing it.
file_type_js my-app.js import cupcake from &amp;#39;../path/to/awesome-package.js&amp;#39;; Pretty simple! But there more you should know.
Default Exports A module can specify at most 1 default export.
export default &amp;#39;üßÅ&amp;#39;; This allows the consumer to name the module whatever it prefers when importing.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://fireship.io/courses/firestore-data-modeling/basics-security/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/basics-security/</guid>
      <description> file_type_firebase rules.json service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } match /accounts/{id} { allow read, write: if false; } match /users/{id} { allow read, write: if id == request.auth.uid; } match /profiles/{id} { allow read; allow write: if id == request.auth.uid; } } } </description>
    </item>
    
    <item>
      <title>ExpressJS Middleware</title>
      <link>https://fireship.io/courses/cloud-functions/http-middleware/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/http-middleware/</guid>
      <description> file_type_typescript http.ts // Custom Middleware const auth = (request, response, next) =&amp;gt; { if (!request.headers.authorization) { response.status(400).send(&amp;#39;unauthorized&amp;#39;); } next(); }; // Multi Route ExpressJS HTTP Function const app = express(); app.use(cors({ origin: true })); app.use(auth); </description>
    </item>
    
    <item>
      <title>Frontend Setup</title>
      <link>https://fireship.io/courses/supabase/setup-repo/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/setup-repo/</guid>
      <description>Vite getting started guide: https://vitejs.dev/guide/</description>
    </item>
    
    <item>
      <title>Context</title>
      <link>https://fireship.io/courses/react/basics-context/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-context/</guid>
      <description>Example of Prop Drilling App.js function PropDrilling() { const [count] = useState(0); return &amp;lt;Child count={count} /&amp;gt; } function Child({ count }) { return &amp;lt;GrandChild count={count} /&amp;gt; } function GrandChild({ count }) { return &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt; } Sharing Data with Context App.js function PropDrilling() { const [count] = useState(0); return ( &amp;lt;CountContext.Provider value={count}&amp;gt; &amp;lt;Child /&amp;gt; &amp;lt;/CountContext.Provider&amp;gt; ) } function Child() { return &amp;lt;GrandChild /&amp;gt; } function GrandChild() { const count = useContext(CountContext); return &amp;lt;div&amp;gt;{count}&amp;lt;/div&amp;gt; } Challenge Create CountContext and CountProvider that uses { count, setCount } as its values.</description>
    </item>
    
    <item>
      <title>Box Decoration</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-box-decoration/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-box-decoration/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: Center( child: Container( alignment: Alignment.center, decoration: BoxDecoration( color: Colors.blue, border: Border.all(width: 5), boxShadow: [ BoxShadow(offset: Offset(40, 40), color: Colors.pink), BoxShadow(offset: Offset(20, 20), color: Colors.yellow), ], gradient: RadialGradient(colors: [Colors.yellow, Colors.pink]) ), ) ), ), ); } } </description>
    </item>
    
    <item>
      <title>Flutter Basics Tutorial</title>
      <link>https://fireship.io/courses/flutter-firebase/basic-training/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/basic-training/</guid>
      <description>Before we build our first app, let&amp;rsquo;s get familiar with the core UI building blocks of Flutter. This tutorial is a quick introduction to the basic building blocks of Flutter that we&amp;rsquo;ll be using throughout the rest of the course. Play around with these code samples to get a feel for how UI design in Flutter works.
Main Function Flutter will inflate the widget passed to runApp into the root widget of the application.</description>
    </item>
    
    <item>
      <title>Param Hints</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-hints/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-hints/</guid>
      <description>‚ú® Trick - Parameter Hints When inside a method paranthesis, press ctrl+shift+space to trigger parameter hints.</description>
    </item>
    
    <item>
      <title>Routing and Navigation</title>
      <link>https://fireship.io/courses/ionic/basics-routing-navigation/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-routing-navigation/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dart in 100 Seconds</title>
      <link>https://fireship.io/courses/dart/basics-dart-100-seconds/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-dart-100-seconds/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://fireship.io/courses/git/basics-install/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-install/</guid>
      <description>Check your machine&amp;rsquo;s current git version:
command line git config --global user.name &amp;#34;Jeff Delaney&amp;#34; git config --global user.email &amp;#34;hello@fireship.io&amp;#34; Set a Username &amp;amp; Email command line git config --list Windows Installation On Windows, I recommend downloading Git for Windows. In addition, you may want to use git-bash as your terminal (like me), but that is optional - and check out bash in 100 seconds.
Mac Installation On MacOS, I recommend installing git with Homebrew.</description>
    </item>
    
    <item>
      <title>Technical Overview</title>
      <link>https://fireship.io/courses/react-next-firebase/app-technical-overview/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-technical-overview/</guid>
      <description> Which page must be BOTH server and client rendered? </description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/stripe-js/intro-resources/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-resources/</guid>
      <description>Course Resources Project Source Code Stripe Docs Stripe API Reference Social Slack Chat YouTube &amp;amp; Twitter </description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/vue/intro-resources/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/intro-resources/</guid>
      <description>Course Resources VueFire Walkie-Talkie Source Code Vue Docs VueFire Docs Firebase Web Docs Social Slack Chat YouTube Twitter To start things off, I first want to talk about how to be successful in this course. You can find the full source code for the project on GitHub. I recommend cloning this remote to your local system and you&amp;rsquo;ll find instructions in the read me on how to run it. But to really get the most out of this course, I recommend starting a brand new Vue project from scratch and following along with the videos by writing every single line of code that I do or better yet modify and experiment with my code to make it do something unique for you now in the videos, you&amp;rsquo;ll see me working through the code and Bs code and if you&amp;rsquo;re doing the same Recommend installing the Vue extension for vs code.</description>
    </item>
    
    <item>
      <title>Resources</title>
      <link>https://fireship.io/courses/angular/basics-resources/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-resources/</guid>
      <description>Course Resources Firestarter Source Code Angular Docs AngularFire Docs Highly Recommended Supplementary Videos While not required, I highly recommend watching the following YouTube videos to get familiar with RxJS and TypeScript.
TypeScript - The Basics RxJS Top Ten Concepts Social Slack Chat YouTube &amp;amp; Twitter </description>
    </item>
    
    <item>
      <title>Cardinality</title>
      <link>https://fireship.io/courses/firestore-data-modeling/relational-cardinality/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/relational-cardinality/</guid>
      <description>Consider the cardinality or maximum size of a set. A loose rule to follow is&amp;hellip;
One-to-Few. Embed. One-to-Hundreds. Bucket. One-to-Billions. Collection. </description>
    </item>
    
    <item>
      <title>Intro to Auth Functions</title>
      <link>https://fireship.io/courses/cloud-functions/auth-intro/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/auth-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Supabase CLI</title>
      <link>https://fireship.io/courses/supabase/setup-supabase/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/setup-supabase/</guid>
      <description> What does DDL stand for? Resources Supabase Architecture: https://supabase.com/docs/architecture Supabase CLI Docs: https://supabase.com/docs/reference/cli Create your Prod Supabase instance by creating an account on supabase: https://app.supabase.com Commands To install supbase cli:
yarn add supabase To initialize a local supabase project:
npx supabase init To start your local supabase instance:
npx supabase start To create a new migration file:
npx supabase migration new &amp;lt;migration name&amp;gt; </description>
    </item>
    
    <item>
      <title>Error Boundries</title>
      <link>https://fireship.io/courses/react/basics-error-boundry/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-error-boundry/</guid>
      <description>App.js class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { return { hasError: true }; } componentDidCatch(error, errorInfo) { console.log(&amp;#39;something went horribly wrong&amp;#39;, error, errorInfo); } render() { if (this.state.hasError) { return &amp;lt;h1&amp;gt;Fallback UI&amp;lt;/h1&amp;gt;; } return this.props.children; } } // Example Usage function Main() { return ( &amp;lt;Dashboard&amp;gt; &amp;lt;ErrorBoundary&amp;gt; &amp;lt;Orders /&amp;gt; &amp;lt;/ErrorBoundary&amp;gt; &amp;lt;/Dashboard&amp;gt; ); } Challenge Create an ErrorBoundary class component that provides a fallback UI in the event an error occurs.</description>
    </item>
    
    <item>
      <title>Async Widgets</title>
      <link>https://fireship.io/courses/flutter-firebase/basic-async/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/basic-async/</guid>
      <description>Example of StreamBuilder file_type_flutter main.dart class DemoApp extends StatelessWidget { const DemoApp({ Key? key }) : super(key: key); @override Widget build(BuildContext context) { return StreamBuilder&amp;lt;int&amp;gt;( stream: Stream.fromIterable([1,2,3,4]), builder: (context, snapshot) { var count = snapshot.data; // Add UI here return Text(&amp;#39;$count&amp;#39;); }, ); } } </description>
    </item>
    
    <item>
      <title>Auto-Directory</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-auto-dir/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-auto-dir/</guid>
      <description>‚ú® Trick - Auto-create Multiple Directories Create a new file using the File Explorer. When typing the path, also include directories that do not exist and they will be created automatically, i.e somewhere/cool/myfile.txt.</description>
    </item>
    
    <item>
      <title>Ionic Storage</title>
      <link>https://fireship.io/courses/ionic/basics-storage/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-storage/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Text</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-text/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-text/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: Center( child: Row( children: &amp;lt;Widget&amp;gt;[ Expanded( child: Container( height: 100, child: Text( &amp;#39;Hello World this is too long&amp;#39;, overflow: TextOverflow.ellipsis, style: TextStyle( fontSize: 50, fontWeight: FontWeight.bold, ), ), ), ), ], ), ), ), ); } } </description>
    </item>
    
    <item>
      <title>Getting Started with Dart</title>
      <link>https://fireship.io/courses/dart/basics-install/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-install/</guid>
      <description>How to Follow Along I&amp;rsquo;d recommend that you code along with each video in your own editor. You can find the full source code for each video on GitHub.
Option 1 - Install Flutter If you plan on using Flutter, follow the Flutter installation instructions.
Option 2 - Install Dart If you don&amp;rsquo;t care about Flutter, checkout the Dart SDK Install guide
Option 3 - Use Dart Pad If you want to use the browser, try DartPad</description>
    </item>
    
    <item>
      <title>git init</title>
      <link>https://fireship.io/courses/git/basics-init/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-init/</guid>
      <description>Crate a new git repository:
command line git init How do you un-initialize a git repo? git provides a tools like init to start a repo, but how do you remove git from a project? </description>
    </item>
    
    <item>
      <title>Next.js Setup</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-setup/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-setup/</guid>
      <description>Create a Next.js App command line npx create-next-app nextfire File Structure components reusable UI components lib reusable JavaScript libraries and/or helper functions pages main routes for site Global CSS https://raw.githubusercontent.com/fireship-io/next-firebase-course/main/styles/globals.css</description>
    </item>
    
    <item>
      <title>How does Stripe Work?</title>
      <link>https://fireship.io/courses/stripe-js/intro-what-is-stripe/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-what-is-stripe/</guid>
      <description></description>
    </item>
    
    <item>
      <title>One-to-One</title>
      <link>https://fireship.io/courses/firestore-data-modeling/relational-one-to-one/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/relational-one-to-one/</guid>
      <description> file_type_js firestore.js const userId = &amp;#39;ayn-rand&amp;#39;; // 1. Embedded, all data contained on single document, One-to-few const authorWithAccount = db.collection(&amp;#39;authors&amp;#39;).doc(userId) // 2. Shared Document ID const author = db.collection(&amp;#39;authors&amp;#39;).doc(userId) const account = db.collection(&amp;#39;account&amp;#39;).doc(userId); // 3. Join related documents with different IDs, const getAccount = async (userId) =&amp;gt; { const snapshot = await db.collection(&amp;#39;authors&amp;#39;).doc(userId).get(); const user = snapshot.data(); return db.collection(&amp;#39;accounts&amp;#39;).doc(user.accountId) } </description>
    </item>
    
    <item>
      <title>Async/Await Primer</title>
      <link>https://fireship.io/courses/cloud-functions/auth-async-await/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/auth-async-await/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Playwright E2E Testing</title>
      <link>https://fireship.io/courses/supabase/setup-playwright/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/setup-playwright/</guid>
      <description>What is the main way End-to-End testing differs from unit testing? Playwright docs: https://playwright.dev/docs/intro
To initialize playwrigh in your repo:
yarn create playwright Updates to the playwright.config.ts file:
const config = { // only change the following properties webServer: { command: &amp;#34;yarn dev&amp;#34;, port: 1337, // should match the port you gave in our vite.config file reuseExisitingServer: true, }, fullyParallel: false, projects: [ { name: &amp;#34;Google Chrome&amp;#34;, use: { channel: &amp;#34;chrome&amp;#34;, }, }, { name: &amp;#34;Mobile Chrome&amp;#34;, use: { .</description>
    </item>
    
    <item>
      <title>Suspense</title>
      <link>https://fireship.io/courses/react/basics-suspense/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-suspense/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>Gestures</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-gestures/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-gestures/</guid>
      <description>Example Code file_type_dartlang main.dart //... child: GestureDetector( onTapDown: (details) =&amp;gt; print(details.globalPosition.dx), child: Container( width: 100, height: 100, color: Colors.red ), ), //... </description>
    </item>
    
    <item>
      <title>Move Quickly</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-move-fast/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-move-fast/</guid>
      <description>Task - Don&amp;rsquo;t Touch the Mouse Invest some time practicing editing your code without using the mouse. This is one of the great secrets to coding faster.
‚ú® Trick - Symbol Search Open the command palette with ctrl+p, then type an @ symbol to move around the code quickly.
‚ú® Trick - Highlight Lines of Code Use the ctrl+l key to select lines of code quickly. For more precise selections, use shift + ‚Üê ‚Üë ‚Üí ‚Üì to highlight individual characters.</description>
    </item>
    
    <item>
      <title>Provider</title>
      <link>https://fireship.io/courses/flutter-firebase/basic-provider/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/basic-provider/</guid>
      <description>Provider is one of the most popular state management libraries in Flutter. It wraps InheritedWidget and provides an easy way to share data between widgets.
1. Define State file_type_flutter main.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; class CounterState extends ChangeNotifier { int count = 0; updateCount() { count++; notifyListeners(); } } 2. Provide State file_type_flutter main.dart class CounterApp extends StatelessWidget { const CounterApp({ Key? key }) : super(key: key); @override Widget build(BuildContext context) { return ChangeNotifierProvider( create: (context) =&amp;gt; CounterState(), child: const CountText(), ); } } 3.</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://fireship.io/courses/ionic/basics-css-themes/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-css-themes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dart CLI</title>
      <link>https://fireship.io/courses/dart/basics-cli/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-cli/</guid>
      <description>Create a New Dart Project Learn about the available commands and how to use them.
command line dart --help Create a new project.
command line dart create -t console-simple my_app # OR use the current directory (if it&amp;#39;s empty) dart create -t console-simple . --force Run the application.
command line dart run Compile Dart Code Compile dart code to an executable.
command line dart compile exe bin/dart.dart bin/dart.exe Compile your code to JavaScript and run it with Node.</description>
    </item>
    
    <item>
      <title>git status</title>
      <link>https://fireship.io/courses/git/basics-status/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-status/</guid>
      <description>View the current status of a repository.
command line git commit status git status provides a detailed commit history of your repo </description>
    </item>
    
    <item>
      <title>TypeScript</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-typescript/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-typescript/</guid>
      <description>Next TypeScript Docs</description>
    </item>
    
    <item>
      <title>API Keys</title>
      <link>https://fireship.io/courses/stripe-js/intro-stripe-api-keys/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-stripe-api-keys/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vue Setup</title>
      <link>https://fireship.io/courses/vue/intro-vue/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/intro-vue/</guid>
      <description>Install the Vue CLI Globally CLI Docs
command line npm install -g @vue/cli Run the Vue UI App command line vue ui Add Bulma for Better Styling file_type_html public/index.html &amp;lt;head&amp;gt; &amp;lt;!-- add this line --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bulma@0.8.0/css/bulma.min.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; </description>
    </item>
    
    <item>
      <title>One-to-Many</title>
      <link>https://fireship.io/courses/firestore-data-modeling/relational-one-to-many/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/relational-one-to-many/</guid>
      <description> file_type_js firestore.js const authorId = &amp;#39;dr-seuss&amp;#39;; // 4. Embedded One-to-Many const authorWithBooks = db.collection(&amp;#39;authors&amp;#39;).doc(authorId) // 5. Subcollection const books = db.collection(&amp;#39;authors&amp;#39;).doc(authorId).collection(&amp;#39;books&amp;#39;); // 6. Root Collection, requires index const booksFrom1971 = db.collection(&amp;#39;books&amp;#39;) .where(&amp;#39;author&amp;#39;, &amp;#39;==&amp;#39;, authorId) .where(&amp;#39;published&amp;#39;, &amp;#39;&amp;gt;&amp;#39;, 1971); </description>
    </item>
    
    <item>
      <title>Basic Auth Function</title>
      <link>https://fireship.io/courses/cloud-functions/auth-function/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/auth-function/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Styling</title>
      <link>https://fireship.io/courses/supabase/setup-styling/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/setup-styling/</guid>
      <description> Tailwind Docs: https://tailwindcss.com/ Tailwind installation docs: https://tailwindcss.com/docs/installation output.css file (if you want to just use my pre-built styles): https://github.com/fireship-io/supaship.io/blob/course-end-point/output.css Command to watch source code to update tailwind styles:
npx tailwindcss -i ./src/index.css -o ./dist/output.css --watch </description>
    </item>
    
    <item>
      <title>Animation</title>
      <link>https://fireship.io/courses/react/basics-animation/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-animation/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>Flex Layout</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-flex-layout/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-flex-layout/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: Container( color: Colors.blue, padding: EdgeInsets.all(16), child: Column( mainAxisAlignment: MainAxisAlignment.center, crossAxisAlignment: CrossAxisAlignment.stretch, children: &amp;lt;Widget&amp;gt;[ Icon(Icons.cake, color: Colors.white, size: 50,), Icon(Icons.cake, color: Colors.white, size: 100,), Icon(Icons.cake, color: Colors.white, size: 200,), ], ) ) ), ); } } </description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>https://fireship.io/courses/dart/basics-variables/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-variables/</guid>
      <description>Basic data types Declare a variable by putting the data type in front of the variable name.
file_type_dartlang main.dart int num1 = 2; double num2 = 3.0; bool isTrue = true; String str = &amp;#39;Hello&amp;#39;; Runtime Type Checking You can check the runtime type of a variable using the is keyword, or via its runtimeType property.
file_type_dartlang main.dart (num1 + num2) is int (num1 + num2).runtimeType Var Keyword The var keyword is like saying I don&amp;rsquo;t care to annotate the variable with a type.</description>
    </item>
    
    <item>
      <title>git add</title>
      <link>https://fireship.io/courses/git/basics-add/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-add/</guid>
      <description> What do we call the area for files that will be part of the next commit? Add an entire working directory to the staging area:
command line git add . Add a single file:
command line git add somefile.txt Remove a file from the staging area:
command line git reset . </description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-firebase/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-firebase/</guid>
      <description>Firebase Setup command line npm install firebase react-firebase-hooks Firebase JS works in both the browser and Node.js react-firebase-hooks abstracts realtime Firebase streams to React hooks Firebase Lib Export common Firebase SDKs and utilities.
file_type_js lib/firebase.js import firebase from &amp;#39;firebase/app&amp;#39; import &amp;#39;firebase/auth&amp;#39;; import &amp;#39;firebase/firestore&amp;#39;; import &amp;#39;firebase/storage&amp;#39;; const firebaseConfig = { // your config }; if (!firebase.apps.length) { firebase.initializeApp(firebaseConfig) } export const auth = firebase.auth(); export const firestore = firebase.firestore(); export const storage = firebase.</description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/vue/intro-vuefirebase/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/intro-vuefirebase/</guid>
      <description>Install the Vuefire &amp;amp; Firebase command line npm i vuefire firebase Install the Vuefire &amp;amp; Firebase file_type_js main.js import { firestorePlugin } from &amp;#39;vuefire&amp;#39; Vue.use(firestorePlugin) Initialize Firebase file_type_js firebase.js import firebase from &amp;#39;firebase/app&amp;#39;; import &amp;#39;firebase/firestore&amp;#39;; import &amp;#39;firebase/auth&amp;#39;; import &amp;#39;firebase/storage&amp;#39;; const firebaseConfig = { // Add your config here }; firebase.initializeApp(firebaseConfig); export const db = firebase.firestore(); export const auth = firebase.auth(); export const storage = firebase.storage(); </description>
    </item>
    
    <item>
      <title>Your First Component</title>
      <link>https://fireship.io/courses/vue/intro-routing/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/intro-routing/</guid>
      <description>Install the Vue Router Routing Docs
command line npm install vue-router Configure a Basic Route file_type_js main.js import VueRouter from &amp;#39;vue-router&amp;#39; Vue.use(VueRouter) import Home from &amp;#39;./components/Home&amp;#39; const router = new VueRouter({ routes: [ { path: &amp;#39;/&amp;#39;, component: Home }, ] }) new Vue({ router, render: h =&amp;gt; h(App), }).$mount(&amp;#39;#app&amp;#39;) Create the Home Page App.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;Home.vue&amp;lt;/h2&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; </description>
    </item>
    
    <item>
      <title>Router Guards</title>
      <link>https://fireship.io/courses/ionic/basics-router-guards/</link>
      <pubDate>Sat, 13 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/basics-router-guards/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Many-to-Many</title>
      <link>https://fireship.io/courses/firestore-data-modeling/relational-many-to-many/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/relational-many-to-many/</guid>
      <description>file_type_js firestore.js const authorId = &amp;#39;dr-seuss&amp;#39;; const bookId = &amp;#39;lorax&amp;#39;; // 7. Middle Man Collection const userReviews = db.collection(&amp;#39;reviews&amp;#39;).where(&amp;#39;author&amp;#39;, &amp;#39;==&amp;#39;, authorId); const bookReviews = db.collection(&amp;#39;reviews&amp;#39;).where(&amp;#39;book&amp;#39;, &amp;#39;==&amp;#39;, bookId); // Single read with composite key const specificReview = db.collection(&amp;#39;reviews&amp;#39;).doc(`${bookId}_${authorId}`); // 8. Map // Reviews embadded on books const bookWithReviews = db.collection(&amp;#39;books&amp;#39;).doc(bookId); const userReviews = db.collection(&amp;#39;books&amp;#39;).orderBy(&amp;#39;reviews.jeff-delaney&amp;#39;); // 9. Array const books = db.collection(&amp;#39;books&amp;#39;).where(&amp;#39;categories&amp;#39;, &amp;#39;array-contains&amp;#39;, &amp;#39;fiction&amp;#39;); // 10. Bucket // Get a collection of documents with an array of IDs const getLikedBooks = async() =&amp;gt; { // Get books through user likes const userLikes = await db.</description>
    </item>
    
    <item>
      <title>Testing Background Functions</title>
      <link>https://fireship.io/courses/cloud-functions/auth-testing/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/auth-testing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>React Router</title>
      <link>https://fireship.io/courses/react/basics-router/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-router/</guid>
      <description>WIP This section is unfinished. Check back for updates soon.</description>
    </item>
    
    <item>
      <title>Move Lines</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-move-lines/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-move-lines/</guid>
      <description>‚ú® Trick - Fast Cut or Copy Copy the line of code that you&amp;rsquo;re currently on by hitting ctrl+c or ctrl+x. It will copy the entire line, no need to highlight it with the mouse.
‚ú® Trick - Line Movement Do move a line somewhere nearby, simply use alt + ‚Üê ‚Üë to move the line.
To copy the same line of code over and over again, use shift + alt + ‚Üê ‚Üë</description>
    </item>
    
    <item>
      <title>Primer</title>
      <link>https://fireship.io/courses/ionic/users-primer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-primer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Stack</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-stack/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-stack/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: SizedBox.expand( child: Stack( children: &amp;lt;Widget&amp;gt;[ Icon( Icons.camera, size: 100, color: Colors.red, ), Align( alignment: Alignment.center, child: Icon( Icons.camera, size: 100, color: Colors.blue, )), Positioned( bottom: 20, left: 100, child: Icon( Icons.camera, size: 100, color: Colors.green, )) ], ), ), ), ); } } </description>
    </item>
    
    <item>
      <title>Null Safety Explained</title>
      <link>https://fireship.io/courses/dart/basics-null-safety/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/basics-null-safety/</guid>
      <description>Sound null safety is a feature added to Dart 2.0. It means variables can no longer be assigned null by default. This reduces the risk of runtime bugs and general makes our code more concise because &amp;ldquo;null checking&amp;rdquo; is no longer necessary.
Non-Nullable by Default Variables cannot be null by default. Attempting to assign a null value will result in a compile-time error.
file_type_dartlang main.dart int age = 75; // non-nullable int age = null; // error Allow Null In some cases, it is useful to allow a variable to be null, which is achieved by adding question mark to the end of the variable&amp;rsquo;s type.</description>
    </item>
    
    <item>
      <title>git commit</title>
      <link>https://fireship.io/courses/git/basics-commit/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-commit/</guid>
      <description> How might you preview or try a commit before making it official? Commit staged files to a repository
command line git commit -m &amp;#34;initial commit üöÄ&amp;#34; Tip: Add files and commit in a single command
command line git commit -a -m &amp;#34;additional commit&amp;#34; # or git commit -am &amp;#34;additional commit&amp;#34; Use git log to see the history of commits:
git log </description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://fireship.io/courses/react-next-firebase/app-routing/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-routing/</guid>
      <description> What is the syntax for creating a dynamic route? Routes Create the following routes.
/enter /[username] /[username]/[slug] /admin /admin/[slug] VS Code Component Snippet Add your own VS Code snippets
file_type_config user-snippets.json { &amp;#34;component&amp;#34;: { &amp;#34;scope&amp;#34;: &amp;#34;javascript,typescript&amp;#34;, &amp;#34;prefix&amp;#34;: &amp;#34;next-page&amp;#34;, &amp;#34;body&amp;#34;: [ &amp;#34;export default function Page({ }) {&amp;#34;, &amp;#34; return (&amp;#34;, &amp;#34; &amp;lt;main&amp;gt;&amp;#34;, &amp;#34; &amp;lt;/main&amp;gt;&amp;#34;, &amp;#34; )&amp;#34;, &amp;#34;}&amp;#34;, ], &amp;#34;description&amp;#34;: &amp;#34;React component&amp;#34; } } </description>
    </item>
    
    <item>
      <title>Intro to HTTP and REST</title>
      <link>https://fireship.io/courses/stripe-js/intro-rest/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-rest/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://fireship.io/courses/angular/basics-cli/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-cli/</guid>
      <description>The Angular CLI provides a powerful set of tools that can bundle your app with webpack, generate boilerplate code, and configure third-party extensions.
Getting Started command line npm install -g @angular/cli ng --version ng help ng generate component --help ng new my-app code my-app </description>
    </item>
    
    <item>
      <title>Duplication</title>
      <link>https://fireship.io/courses/firestore-data-modeling/advanced-duplication/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/advanced-duplication/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intro to Firestore Functions</title>
      <link>https://fireship.io/courses/cloud-functions/firestore-intro/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/firestore-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Next.js</title>
      <link>https://fireship.io/courses/react/basics-nextjs/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-nextjs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Anonymous Auth</title>
      <link>https://fireship.io/courses/ionic/users-anonymous/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-anonymous/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Folding</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-folding/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-folding/</guid>
      <description>‚ú® Trick - Fold All Use the command palette for find the Fold All command. It will fold all the code in the document, then you can use ctrl+shift+] to unfold the parts you&amp;rsquo;re working on.</description>
    </item>
    
    <item>
      <title>Scroll</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-scroll-list/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-scroll-list/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: ListView( scrollDirection: Axis.horizontal, children: _cards(), ) ), ); } List&amp;lt;Widget&amp;gt; _cards() { return [1,2,3,4,5,6,7,8,9].map((v) =&amp;gt; Container( color: Colors.blue, margin: EdgeInsets.all(20), height: 100, child: Text(&amp;#39;$v&amp;#39;), ) ).toList(); } </description>
    </item>
    
    <item>
      <title>VS Code Tips</title>
      <link>https://fireship.io/courses/git/basics-vscode/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/basics-vscode/</guid>
      <description>Which term describes the changes between the working tree and previously comitted files? VS Code is a powerful tool for working with git. You can use it to run commands without the CLI, sync it up to GitHub, and to manage your git repositories. Learn more in the official docs.</description>
    </item>
    
    <item>
      <title>Loader</title>
      <link>https://fireship.io/courses/react-next-firebase/app-loader/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-loader/</guid>
      <description> Which CSS animation property will cause the spinner to rotate forever? Build a Loading Spinner file_type_js components/Loader.js // Loading Spinner export default function Loader({ show }) { return show ? &amp;lt;div className=&amp;#34;loader&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; : null; } file_type_css globals.css .loader { border: 10px solid var(--color-bg); border-top: 10px solid var(--color-blue); border-radius: 50%; width: 50px; height: 50px; animation: spin 2s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } </description>
    </item>
    
    <item>
      <title>Node Setup</title>
      <link>https://fireship.io/courses/stripe-js/intro-node-setup/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-node-setup/</guid>
      <description>Create a Node Project Start with an empty Node project.
command line npm init -y Dependencies Add the following dependencies and scripts.
file_type_npm package.json { &amp;#34;name&amp;#34;: &amp;#34;stripe-server&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;1.0.0&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;main&amp;#34;: &amp;#34;index.js&amp;#34;, &amp;#34;scripts&amp;#34;: { &amp;#34;build&amp;#34;: &amp;#34;tsc&amp;#34;, &amp;#34;start&amp;#34;: &amp;#34;node lib/index.js&amp;#34;, &amp;#34;dev&amp;#34;: &amp;#34;concurrently \&amp;#34;tsc -w\&amp;#34; \&amp;#34;nodemon lib/index.js\&amp;#34;&amp;#34; }, &amp;#34;keywords&amp;#34;: [], &amp;#34;author&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;license&amp;#34;: &amp;#34;ISC&amp;#34;, &amp;#34;dependencies&amp;#34;: { &amp;#34;cors&amp;#34;: &amp;#34;^2.8.5&amp;#34;, &amp;#34;dotenv&amp;#34;: &amp;#34;^8.2.0&amp;#34;, &amp;#34;express&amp;#34;: &amp;#34;^4.17.1&amp;#34;, &amp;#34;firebase-admin&amp;#34;: &amp;#34;^8.6.0&amp;#34;, &amp;#34;stripe&amp;#34;: &amp;#34;^8.43.0&amp;#34; }, &amp;#34;devDependencies&amp;#34;: { &amp;#34;@types/express&amp;#34;: &amp;#34;^4.17.6&amp;#34;, &amp;#34;@types/cors&amp;#34;: &amp;#34;^2.</description>
    </item>
    
    <item>
      <title>Anatomy</title>
      <link>https://fireship.io/courses/angular/basics-anatomy-of-angular/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-anatomy-of-angular/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>https://fireship.io/courses/firestore-data-modeling/advanced-aggregation/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/advanced-aggregation/</guid>
      <description>Cloud Functions Master Course - Firestore Section</description>
    </item>
    
    <item>
      <title>Prisma</title>
      <link>https://fireship.io/courses/react/basics-prisma/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-prisma/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vite</title>
      <link>https://fireship.io/courses/react/basics-vite/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-vite/</guid>
      <description>Vite.js is a build tool that can be used to build React projects. It is exceptionally fast and easy to use.
Challenge Create a react project with Vite
command line npm init vite my-app </description>
    </item>
    
    <item>
      <title>Animated Widgets</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/widgets-animated/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/widgets-animated/</guid>
      <description>Example Code file_type_dartlang main.dart import &amp;#39;dart:math&amp;#39;; class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( body: Center( child: CoolBox(), ) ), ); } } class CoolBox extends StatefulWidget { const CoolBox({ Key key, }) : super(key: key); @override _CoolBoxState createState() =&amp;gt; _CoolBoxState(); } class _CoolBoxState extends State&amp;lt;CoolBox&amp;gt; { double width = 100; double height = 100; Color color = Colors.green; @override Widget build(BuildContext context) { return AnimatedContainer( duration: Duration(seconds: 2), curve: Curves.</description>
    </item>
    
    <item>
      <title>Bracket Colorizer</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-colorizer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-colorizer/</guid>
      <description>‚ú® Trick - Bracket Colorizer Open VS Code settings with ctrl+,, then enable Bracket Pair Colorization. It&amp;rsquo;s especially useful when using a curly brace langauge like JavaScript, C, Dart, etc.</description>
    </item>
    
    <item>
      <title>User Profile</title>
      <link>https://fireship.io/courses/ionic/users-user-profile/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-user-profile/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Navbar</title>
      <link>https://fireship.io/courses/react-next-firebase/app-navbar/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-navbar/</guid>
      <description>Which element or component is used to create links in Next.js Navbar Component file_type_js components/Navbar.js import Link from &amp;#39;next/link&amp;#39;; // Top navbar export default function Navbar() { const user = null; const username = null; return ( &amp;lt;nav className=&amp;#34;navbar&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;Link href=&amp;#34;/&amp;#34;&amp;gt; &amp;lt;button className=&amp;#34;btn-logo&amp;#34;&amp;gt;FEED&amp;lt;/button&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; {/* user is signed-in and has username */} {username &amp;amp;&amp;amp; ( &amp;lt;&amp;gt; &amp;lt;li className=&amp;#34;push-left&amp;#34;&amp;gt; &amp;lt;Link href=&amp;#34;/admin&amp;#34;&amp;gt; &amp;lt;button className=&amp;#34;btn-blue&amp;#34;&amp;gt;Write Posts&amp;lt;/button&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;Link href={`/${username}`}&amp;gt; &amp;lt;img src={user?</description>
    </item>
    
    <item>
      <title>Express</title>
      <link>https://fireship.io/courses/stripe-js/intro-express-setup/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-express-setup/</guid>
      <description>Create an Express App file_type_typescript api.ts import express, { Request, Response } from &amp;#39;express&amp;#39;; export const app = express(); // Allows cross origin requests import cors from &amp;#39;cors&amp;#39;; app.use(cors({ origin: true })); app.use(express.json()); app.post(&amp;#39;/test&amp;#39;, (req: Request, res: Response) =&amp;gt; { const amount = req.body.amount; res.status(200).send({ with_tax: amount * 7 }); }); Listen to Incoming Requests file_type_typescript index.ts // Start the API with Express import { app } from &amp;#39;./api&amp;#39;; const port = process.</description>
    </item>
    
    <item>
      <title>Components</title>
      <link>https://fireship.io/courses/angular/basics-components/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-components/</guid>
      <description>Components, Directive, and Pipes This video below originally appeared at Angular Components - Ten Basic Concepts. It was originally produced for Angular v6, but the core concepts are identical.
Component Composition Cross-component communication is one of the most useful concepts to master when working component-based UIs. This video below originally appeared as Sharing Data between Components and provides a reference when sharing data between components.
Bonus Video </description>
    </item>
    
    <item>
      <title>Votes</title>
      <link>https://fireship.io/courses/firestore-data-modeling/models-votes/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/models-votes/</guid>
      <description>A data model suitable for Votes, Hearts, Likes, etc</description>
    </item>
    
    <item>
      <title>OnCreate</title>
      <link>https://fireship.io/courses/cloud-functions/firestore-oncreate/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/firestore-oncreate/</guid>
      <description></description>
    </item>
    
    <item>
      <title>React Query</title>
      <link>https://fireship.io/courses/react/basics-query/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-query/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Multi Cursor</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-multi-cursor/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-multi-cursor/</guid>
      <description>‚ú® Trick - Set Multiple Cursors Use alt + click to set multiple cursors at the same time. This can be much faster than copy/paste when the value the same in every location.</description>
    </item>
    
    <item>
      <title>OAuth Web</title>
      <link>https://fireship.io/courses/ionic/users-oauth-web/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-oauth-web/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/concepts-themes/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/concepts-themes/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( theme: ThemeData( brightness: Brightness.light, primaryColor: Colors.lightGreen, textTheme: TextTheme( body1: TextStyle(color: Colors.red, fontSize: 30), headline: TextStyle(color: Colors.blue, fontSize: 70) ) ), home: HomeScreen(), ); } } class HomeScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(), body: Center( child: Text(&amp;#39;Hello World&amp;#39;, style: Theme.of(context).textTheme.headline,), ) ); } } </description>
    </item>
    
    <item>
      <title>Toast</title>
      <link>https://fireship.io/courses/react-next-firebase/app-toast/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-toast/</guid>
      <description>Install Hot Toast command line npm i react-hot-toast Check out the official docs.
Declare the Toaster file_type_js pages/_app.js import Navbar from &amp;#39;../components/Navbar&amp;#39;; import { Toaster } from &amp;#39;react-hot-toast&amp;#39;; function MyApp({ Component, pageProps }) { return ( &amp;lt;&amp;gt; &amp;lt;Navbar /&amp;gt; &amp;lt;Component {...pageProps} /&amp;gt; &amp;lt;Toaster /&amp;gt; &amp;lt;/&amp;gt; ); } Trigger a Toast Message file_type_js pages/index.js import toast from &amp;#39;react-hot-toast&amp;#39;; export default function Home() { return ( &amp;lt;div&amp;gt; &amp;lt;button onClick={() =&amp;gt; toast.success(&amp;#39;hello toast!&amp;#39;)}&amp;gt; Toast Me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } </description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>https://fireship.io/courses/angular/basics-services/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-services/</guid>
      <description>Generate a Service command line ng g service clock Use-Cases for Services Services can inject shared data and methods into your components. They are also useful for writing code that maintains a DRY separation of concerns.
Shared state. Services can connect data between components and are especially useful when components are not in a child/parent relationship. Shared logic. Stateless services that define common methods used in multiple components. </description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://fireship.io/courses/angular/basics-modules/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/basics-modules/</guid>
      <description> command line ng generate module cool Get comfortable with declarations, imports, and exports.
file_type_ng_component_ts some.module.ts @NgModule({ // Components defined in this module declarations: [ FooComponent ], // Components used in this module imports: [ CommonModule ], // Components that can be imported by other modules exports: [ FooComponent ], }) </description>
    </item>
    
    <item>
      <title>Role-Based Authorization</title>
      <link>https://fireship.io/courses/firestore-data-modeling/models-roles/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/models-roles/</guid>
      <description>Sample Firestore rules for Role-based Authorization where the user document determines the access level.
file_type_firebase rules.json match /posts/{document} { function getRoles() { return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles; } allow read; allow update: if getRoles().hasAny([&amp;#39;admin&amp;#39;, &amp;#39;editor&amp;#39;]) == true; allow write: if getRoles().hasAny([&amp;#39;admin&amp;#39;]) == true; } </description>
    </item>
    
    <item>
      <title>OnUpdate</title>
      <link>https://fireship.io/courses/cloud-functions/firestore-onupdate/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/firestore-onupdate/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Linked Editing</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-linked-editing/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-linked-editing/</guid>
      <description>‚ú® Trick - Enable Linked Editing From the settings, enable the Linked Editing option. VS code will now automatically match any opening and closing tags for simultaneous edits.</description>
    </item>
    
    <item>
      <title>Navigation</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/concepts-routing/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/concepts-routing/</guid>
      <description>Example Code file_type_dartlang main.dart class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( routes: { &amp;#39;/home&amp;#39;: (context) =&amp;gt; HomeScreen(), &amp;#39;/slideshow&amp;#39;: (context) =&amp;gt; SlideshowScreen() }, home: HomeScreen(), ); } } class HomeScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text(&amp;#39;Home&amp;#39;), backgroundColor: Colors.red,), body: Center( child: Row( mainAxisAlignment: MainAxisAlignment.center, children: &amp;lt;Widget&amp;gt;[ FlatButton(child: Text(&amp;#39;push&amp;#39;), color: Colors.green, onPressed: () { // Navigator.push( // context, // MaterialPageRoute(builder: (context) =&amp;gt; SlideshowScreen(name: &amp;#39;Jeff&amp;#39;)) // ); // Navigator.</description>
    </item>
    
    <item>
      <title>OAuth Native</title>
      <link>https://fireship.io/courses/ionic/users-oauth-native/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-oauth-native/</guid>
      <description>Note: If you run into bugs at this point building your app for Android, you may need to follow the steps outlined in this video:</description>
    </item>
    
    <item>
      <title>React Setup</title>
      <link>https://fireship.io/courses/stripe-js/intro-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/intro-react/</guid>
      <description>Create a React App command line npx create-react-app myapp Setup Stripe file_type_js command line npm install @stripe/react-stripe-js @stripe/stripe-js index.js import { Elements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { loadStripe } from &amp;#39;@stripe/stripe-js&amp;#39;; export const stripePromise = loadStripe( &amp;#39;pk_test_...&amp;#39; ); ReactDOM.render( &amp;lt;React.StrictMode&amp;gt; &amp;lt;Elements stripe={stripePromise}&amp;gt; &amp;lt;App /&amp;gt; &amp;lt;/Elements&amp;gt; &amp;lt;/React.StrictMode&amp;gt;, document.getElementById(&amp;#39;root&amp;#39;) ); React Router command line npm install react-router-dom Create empty files for the components referenced in the router below, like Checkout.js, Payments.js, etc.</description>
    </item>
    
    <item>
      <title>Access Control List</title>
      <link>https://fireship.io/courses/firestore-data-modeling/models-access-control-list/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/models-access-control-list/</guid>
      <description>Sample Firestore security rules for an Access Control List (ACL), where the content determines which users have authorization.
file_type_firebase rules.json match /posts/{document} { allow read; allow write: if resource.data.members.hasAny(request.auth.uid); } example of an Access Control List in Firestore</description>
    </item>
    
    <item>
      <title>Intro to Storage Functions</title>
      <link>https://fireship.io/courses/cloud-functions/storage-intro/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/storage-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>PWAs</title>
      <link>https://fireship.io/courses/react/basics-pwa/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-pwa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Redux</title>
      <link>https://fireship.io/courses/react/basics-redux/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/basics-redux/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Async Widgets</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/concepts-async/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/concepts-async/</guid>
      <description>Example Code file_type_dartlang main.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:cloud_firestore/cloud_firestore.dart&amp;#39;; import &amp;#39;dart:async&amp;#39;; void main() =&amp;gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: HomeScreen(), ); } } class HomeScreen extends StatelessWidget { final Firestore db = Firestore.instance; @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(title: Text(&amp;#39;Home&amp;#39;)), body: Center( child: StreamBuilder&amp;lt;DocumentSnapshot&amp;gt;( stream: db.collection(&amp;#39;users&amp;#39;).document(&amp;#39;mB6sGaFBczfIW50DJyvGDcQWOvW2&amp;#39;).snapshots(), builder: (context, snapshot) { if (snapshot.hasData) { var data = snapshot.data.data; return Column( crossAxisAlignment: CrossAxisAlignment.</description>
    </item>
    
    <item>
      <title>Multiline Editing</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-multiline/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-multiline/</guid>
      <description>‚ú® Trick - Multiline Editing Find a symbol in your code that&amp;rsquo;s used multiple times, like a variable name. Put your cursor on the symbol and press ctrl+d. It will find the next match and place an extra cursor on it, making name changes much faster.</description>
    </item>
    
    <item>
      <title>User Router Guard</title>
      <link>https://fireship.io/courses/ionic/users-router-guard/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/users-router-guard/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hierarchy</title>
      <link>https://fireship.io/courses/firestore-data-modeling/models-tree/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/models-tree/</guid>
      <description> file_type_js firestore.js const topLevel = db.collection(&amp;#39;comments&amp;#39;).where(&amp;#39;parent&amp;#39;, &amp;#39;==&amp;#39;, false); const level = db.collection(&amp;#39;comments&amp;#39;).where(&amp;#39;parent&amp;#39;, &amp;#39;==&amp;#39;, id) const traverseAll = (id) =&amp;gt; { const tree = db.collection(&amp;#39;comments&amp;#39;) .where(&amp;#39;parent&amp;#39;, &amp;#39;&amp;gt;=&amp;#39;, id) .where(&amp;#39;parent&amp;#39;, &amp;#39;&amp;lt;=&amp;#39;, `${id}~`) } </description>
    </item>
    
    <item>
      <title>Use GCP Services</title>
      <link>https://fireship.io/courses/cloud-functions/storage-gcp/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/storage-gcp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Routing and Layout</title>
      <link>https://fireship.io/courses/supabase/app-routing/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-routing/</guid>
      <description>In React Router, all routes must be nested inside which component? React Router docs: https://reactrouter.com/en/main
Command to install react router:
yarn add react-router-dom Initial routing in the App.tsx file:
const router = createBrowserRouter([ { path: &amp;#34;/&amp;#34;, element: &amp;lt;Layout /&amp;gt;, children: [ { path: &amp;#34;&amp;#34;, element: &amp;lt;MessageBoard /&amp;gt;, children: [ { path: &amp;#34;:pageNumber&amp;#34;, element: &amp;lt;AllPosts /&amp;gt;, }, { path: &amp;#34;post/:postId&amp;#34;, element: &amp;lt;PostView /&amp;gt;, }, ], }, { path: &amp;#34;welcome&amp;#34;, element: &amp;lt;Welcome /&amp;gt;, loader: welcomeLoader, }, ], }, ]); function App() { return &amp;lt;RouterProvider router={router} /&amp;gt;; } export default App; function Layout() { &amp;lt;&amp;gt; &amp;lt;NavBar /&amp;gt; &amp;lt;Outlet /&amp;gt; &amp;lt;/&amp;gt;; } Our starting NavBar component:</description>
    </item>
    
    <item>
      <title>Prototype Chain</title>
      <link>https://fireship.io/courses/js/102-prototype-chain/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-prototype-chain/</guid>
      <description>Which class does an Array inherit from? Prototype Chain The prototype chain is a mechanism that allows objects to inherit properties and methods from other objects. Every object can have exactly one prototype object. That prototype object can also have a prototype object, and so on, creating a chain of inheritied properties and methods. The end of this chain is called the null prototype.
In general, you don&amp;rsquo;t need to think about the prototype chain when doing everyday JavaScript development.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>https://fireship.io/courses/react/1-intro/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-intro/</guid>
      <description>Source Code React Instant Search Demo
React Setup command line npm init vite animalfarm cd animalfarm npm install npm run dev Node.js Setup command line cd server npm init -y npm install express cors chance </description>
    </item>
    
    <item>
      <title>App Tour</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-demo-app-tour/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-demo-app-tour/</guid>
      <description></description>
    </item>
    
    <item>
      <title>App Tour</title>
      <link>https://fireship.io/courses/flutter-firebase/project-demo-app-tour/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-demo-app-tour/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Emmet Snippets</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-emmet/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-emmet/</guid>
      <description>‚ú® Trick - Emmet Cheat Sheet Find the emmet cheat sheet here. If you&amp;rsquo;re doing web development, print it out and use it.
‚ú® Trick - Emmet Snippets for HTML Open an HTML file in VS code. Try typing characters like ul&amp;gt;li*3 followed by tab to create a list with 3 items.
Bonus Video </description>
    </item>
    
    <item>
      <title>Primer</title>
      <link>https://fireship.io/courses/ionic/app-primer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-primer/</guid>
      <description>Not sure how to structure your database? You may also want to check out the Firestore Data Modeling Course.</description>
    </item>
    
    <item>
      <title>Control Flow</title>
      <link>https://fireship.io/courses/dart/syntax-control-flow/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-control-flow/</guid>
      <description>Conditional Statements file_type_dartlang control-flow.dart String color = &amp;#39;blue&amp;#39;; if (color == &amp;#39;blue&amp;#39;) { // } else if (color == &amp;#39;green&amp;#39;) { // } else { // default } // One liner if (color == &amp;#39;red&amp;#39;) print(&amp;#39;hello red!&amp;#39;); Loops file_type_dartlang control-flow.dart for (var i = 0; i &amp;lt; 5; i++) { print(i); // break; // continue; } int i = 0; while (i &amp;lt; 5) { print(i); i++; } i = 0; do { print(i); } while (i &amp;lt; 5); Assertions file_type_dartlang control-flow.</description>
    </item>
    
    <item>
      <title>git remote</title>
      <link>https://fireship.io/courses/git/remote-remote/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-remote/</guid>
      <description> What is the parent company of GitHub? List Remotes List current remotes in the local repo:
command line git remote Create a new remote command line git remote add origin &amp;lt;url-to-your-github-repo&amp;gt; </description>
    </item>
    
    <item>
      <title>Auth Intro</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-primer/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-primer/</guid>
      <description> How do we avoid fetching the user data on every page change? </description>
    </item>
    
    <item>
      <title>Match</title>
      <link>https://fireship.io/courses/firebase-security/basics-paths/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/basics-paths/</guid>
      <description> file_type_firebase firestore.rules match /users/jeffd23 { // Single document } match /users/{userId} { // Single Collection } match /posts/{postId=**} { // Recursive wildcard, includes all subcollections } </description>
    </item>
    
    <item>
      <title>Stripe Checkout</title>
      <link>https://fireship.io/courses/stripe-js/checkout-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Anonymous Auth</title>
      <link>https://fireship.io/courses/vue/auth-anonymous/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/auth-anonymous/</guid>
      <description>Login Component Login.vue &amp;lt;template&amp;gt; &amp;lt;aside class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;Sign in Anonymously&amp;lt;/h3&amp;gt; &amp;lt;button class=&amp;#34;button&amp;#34; @click=&amp;#34;auth.signInAnonymously()&amp;#34;&amp;gt;Sign In&amp;lt;/button&amp;gt; &amp;lt;/aside&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { auth } from &amp;#39;../firebase&amp;#39;; export default { data() { return { auth, } }, } &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>State Management</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/concepts-state/</link>
      <pubDate>Fri, 23 Aug 2019 10:13:30 -0400</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/concepts-state/</guid>
      <description>Note: The code below is updated for Provider version 3.1. The main change is that the stream param has been renamed to value.
Example Code file_type_dartlang main.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:cloud_firestore/cloud_firestore.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; void main() =&amp;gt; runApp(MyApp()); class UserModel { String name = &amp;#39;Bob&amp;#39;; } var stream = Stream.fromIterable([UserModel()]); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return StreamProvider&amp;lt;UserModel&amp;gt;.value( value: stream, child: MaterialApp( home: HomeScreen(), ), ); } } class HomeScreen extends StatelessWidget { final Firestore db = Firestore.</description>
    </item>
    
    <item>
      <title>App Overview</title>
      <link>https://fireship.io/courses/angular/app-primer/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-primer/</guid>
      <description>Recommended: Clone the source code as a reference.
Start a New Project Start a new project and make sure to use routing and scss for styles.
command line ng new firestarter </description>
    </item>
    
    <item>
      <title>Follower Feed</title>
      <link>https://fireship.io/courses/firestore-data-modeling/models-social-feed/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/models-social-feed/</guid>
      <description>The code below uses this data model to follow/unfollow users &amp;amp; query the most recent posts from users that are being followed.
file_type_js firestore.js import { db } from &amp;#39;./config&amp;#39;; import firebase from &amp;#39;firebase/app; const remove = firebase.firestore.FieldValue.arrayRemove; const union = firebase.firestore.FieldValue.arrayUnion; export const follow = (followed, follower) =&amp;gt; { const followersRef = db.collection(&amp;#39;followers&amp;#39;).doc(followed); followersRef.update({ users: union(follower) }); } // 2. Unfollow User export const unfollow = (followed, follower) =&amp;gt; { const followersRef = db.</description>
    </item>
    
    <item>
      <title>Resizing Images</title>
      <link>https://fireship.io/courses/cloud-functions/storage-resizer/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/storage-resizer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Connect to Supabase</title>
      <link>https://fireship.io/courses/supabase/app-client/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-client/</guid>
      <description>Command to install Supabase React Auth helper:
yarn add @supabase/auth-ui-react Command to install Supabase JS Client:
yarn add @supabase/supabase-js supa-client.ts
import { createClient } from &amp;#34;@supabase/supabase-js&amp;#34;; const supabaseUrl = (import.meta as any).env.VITE_SUPABASE_API_URL; const supabaseKey = (import.meta as any).env.VITE_SUPABASE_ANON_KEY; export const supaClient = createClient(supabaseUrl, supabaseKey); Supabase JS Client Reference Docs: https://supabase.com/docs/reference/javascript</description>
    </item>
    
    <item>
      <title>Database Tables</title>
      <link>https://fireship.io/courses/supabase/app-tables/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-tables/</guid>
      <description> Which Postgres constraint is used to match against a regular expression? Resources Command to create a migration file from your current local Supabase state:
npx supabase db diff --use-migra --file=&amp;lt;name of the migration&amp;gt; SQL to create our user profile table:
create table user_profiles ( user_id uuid primary key references auth.users (id) not null, username text unique not null CONSTRAINT proper_username CHECK (username ~* &amp;#39;^[a-zA-Z0-9_]+$&amp;#39;) CONSTRAINT username_length CHECK (char_length(username) &amp;gt; 3 and char_length(username) &amp;lt; 15) ); </description>
    </item>
    
    <item>
      <title>Destructuring</title>
      <link>https://fireship.io/courses/js/102-destructuring/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-destructuring/</guid>
      <description> What is the name of the variable declared below? const { foo: bar } = { foo: 23 } Destructuring Examples // Object destructuring const person = { name: &amp;#39;John&amp;#39;, age: 32, city: &amp;#39;New York&amp;#39;, country: &amp;#39;USA&amp;#39; }; const { name, age } = person; // Object destructuring with alias const { name: firstName, age: years } = person; // Array destructuring const fruits = [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;, &amp;#39;orange&amp;#39;]; const [first, second, third] = fruits; </description>
    </item>
    
    <item>
      <title>Express Server</title>
      <link>https://fireship.io/courses/react/1-express-server/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-express-server/</guid>
      <description>Additional Learning CORS in 100 Seconds REST in 100 Seconds Complete Server Code file_type_js index.js import express from &amp;#39;express&amp;#39;; import cors from &amp;#39;cors&amp;#39;; // Initialize the express app const app = express(); app.use(cors()); app.use(express.json()); // Make some animals import Chance from &amp;#39;chance&amp;#39;; const chance = new Chance(); const animals = [...Array(250).keys()].map(id =&amp;gt; { return { id, type: chance.animal(), age: chance.age(), name: chance.name(), } }); // Endpoint to search for animals app.</description>
    </item>
    
    <item>
      <title>Database Service</title>
      <link>https://fireship.io/courses/ionic/app-database-service/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-database-service/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Emmet Wrap Abbreviation</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-emmet-wrap/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-emmet-wrap/</guid>
      <description>‚ú® Trick - Balance Outward Put your cursor inside some HTML, then use the command Emmet: Balance Outward to select the outermost tag.
‚ú® Trick - Wrap with Abbreviation Ever wanted to wrap a block of HTML with a new parent tag? Just select the block of HTML you want to wrap, then use the command Emmet: Wrap with Abbreviation to place a new tag around it.</description>
    </item>
    
    <item>
      <title>Firebase setup</title>
      <link>https://fireship.io/courses/flutter-firebase/project-firebase-setup/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-firebase-setup/</guid>
      <description>Tasks Create a Firebase Project Add an iOS app to your project Add an Android app to your project Use the keytool to generate an SHA Certificate. See my Flutter Firebase SHA guide if you get stuck at this part. Also reference the latest Official FlutterFire Setup Docs
How to Get SHA-1 Certificate Get the SHA1 certificate from the Android app.
command line cd android ./gradlew signingReport Copy the SHA-1 value and paste it into the Firebase Android App config.</description>
    </item>
    
    <item>
      <title>Project Organization</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-organization/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-organization/</guid>
      <description> screens/ contains the app&amp;rsquo;s main UI features. shared/ contains the app&amp;rsquo;s shared UI, like navigation menus and loading indicators. services/ contains the app&amp;rsquo;s shared business logic, like user auth and database code. </description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>https://fireship.io/courses/dart/syntax-operators/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-operators/</guid>
      <description>Let&amp;rsquo;s take a look at some of the more interesting operators in Dart.
Assignment Use the assignment operator to assign a value to a variable, ONLY if it&amp;rsquo;s not already assigned.
file_type_dartlang main.dart String? name; name ??= &amp;#39;Guest&amp;#39;; var z = name ?? &amp;#39;Guest&amp;#39;; Ternary Operator Use a ternary to replace the if/else statement.
file_type_dartlang main.dart String color = &amp;#39;blue&amp;#39;; var isThisBlue = color == &amp;#39;blue&amp;#39; ? &amp;#39;Yep, blue it is&amp;#39; : &amp;#39;Nah, it aint blue&amp;#39;; Cascade Use the cascade operator to call methods on an object without having to create a new line of code.</description>
    </item>
    
    <item>
      <title>git push</title>
      <link>https://fireship.io/courses/git/remote-push/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-push/</guid>
      <description>git push is kinda like saying... Use git push to upload your local code to GitHub.
command line git push origin master Note: the -u flag is used to set origin as the upstream remote in your git config so git pull can be used without any arguments in the future.</description>
    </item>
    
    <item>
      <title>Google SignIn</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-google-signin/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-google-signin/</guid>
      <description>What mechanism does Firebase use to manage the authentication state on the server? Google Auth Provider file_type_js lib/firebase.js export const googleAuthProvider = new firebase.auth.GoogleAuthProvider(); SignIn Button file_type_js pages/enter.js import { auth, googleAuthProvider } from &amp;#39;../lib/firebase&amp;#39;; export default function Enter(props) { const user = null; const username = null; // 1. user signed out &amp;lt;SignInButton /&amp;gt; // 2. user signed in, but missing username &amp;lt;UsernameForm /&amp;gt; // 3. user signed in, has username &amp;lt;SignOutButton /&amp;gt; return ( &amp;lt;main&amp;gt; {user ?</description>
    </item>
    
    <item>
      <title>Allow - Read, Write, &amp; Beyond</title>
      <link>https://fireship.io/courses/firebase-security/basics-allow/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/basics-allow/</guid>
      <description> file_type_firebase firestore.rules match /users/{docId=**} { allow read, write; allow get; allow list; allow create; allow update; allow delete; } </description>
    </item>
    
    <item>
      <title>Stripe Checkout on the Server</title>
      <link>https://fireship.io/courses/stripe-js/checkout-server/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-server/</guid>
      <description>Stripe Checkout on the Server file_type_typescript checkout.ts import { stripe } from &amp;#39;./&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; /** * Creates a Stripe Checkout session with line items */ export async function createStripeCheckoutSession( line_items: Stripe.Checkout.SessionCreateParams.LineItem[] ) { const url = &amp;#39;http://localhost:3000&amp;#39;; //process.env.WEBAPP_URL; const session = await stripe.checkout.sessions.create({ payment_method_types: [&amp;#39;card&amp;#39;], line_items, success_url: `${url}/success?session_id={CHECKOUT_SESSION_ID}`, cancel_url: `${url}/failed`, }); return session; } API Endpoint file_type_typescript api.ts /** * Catch async errors when awaiting promises */ function runAsync(callback: Function) { return (req: Request, res: Response, next: NextFunction) =&amp;gt; { callback(req, res, next).</description>
    </item>
    
    <item>
      <title>Realtime Auth State</title>
      <link>https://fireship.io/courses/vue/auth-state/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/auth-state/</guid>
      <description>Opt-in to the Composition API command line npm i @vue/composition-api Register it as a plugin
file_type_js main.js import VueCompositionApi from &amp;#39;@vue/composition-api&amp;#39; Vue.use(VueCompositionApi) User Component User.vue &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;slot name=&amp;#34;user&amp;#34; :user=&amp;#34;user&amp;#34;&amp;gt;&amp;lt;/slot&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { auth } from &amp;#39;../firebase&amp;#39;; import { ref } from &amp;#39;@vue/composition-api&amp;#39;; export default { setup() { const user = ref(null); const unsubscribe = auth.onAuthStateChanged( firebaseUser =&amp;gt; user.value = firebaseUser ); return { user, unsubscribe, } }, unmounted() { this.</description>
    </item>
    
    <item>
      <title>Meet Angular Material</title>
      <link>https://fireship.io/courses/angular/app-material/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-material/</guid>
      <description>We&amp;rsquo;re ready to start building the app! It&amp;rsquo;s ideal to kick off any new project with a solid foundation for design. An app that looks good from the day one will keep you happy and motivated throughout the development process.
Steps Step 1 - Install Angular Material Install Angular Material command line ng add @angular/material Step 2 - Customize your Theme Colors (Optional) Customize your Theme Generate a Color Pallette Example of a custom color pallette.</description>
    </item>
    
    <item>
      <title>Top Five</title>
      <link>https://fireship.io/courses/firestore-data-modeling/bonus-top-five/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/bonus-top-five/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Intro to Callable Functions</title>
      <link>https://fireship.io/courses/cloud-functions/callable-intro/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/callable-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Row Level Security</title>
      <link>https://fireship.io/courses/supabase/app-rls/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-rls/</guid>
      <description>Supabase docs on RLS: https://supabase.com/docs/guides/auth/row-level-security</description>
    </item>
    
    <item>
      <title>Spread</title>
      <link>https://fireship.io/courses/js/102-spread/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-spread/</guid>
      <description>What is the value of property foo below? const obj = { foo: 1, bar: 2, baz: 3 }; const newObj = { foo: 4 ...obj, }; Spread Syntax The spread syntax ... is a relatively new operator that was introduced in ES2018. It provides a concise way to combine objects and arrays.
const obj = { foo: 1, bar: 2, baz: 3 }; const newObj = { foo: 4 .</description>
    </item>
    
    <item>
      <title>Search Frontend</title>
      <link>https://fireship.io/courses/react/1-react-search/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/1-react-search/</guid>
      <description>Additional Learning React Hooks Tutorial
Complete Code App.js import { useEffect, useState } from &amp;#39;react&amp;#39;; function App() { const { search, animals } = useAnimalSearch(); return ( &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;Animal Farm&amp;lt;/h1&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;Search&amp;#34; onChange={(e) =&amp;gt; search(e.target.value)} /&amp;gt; &amp;lt;ul&amp;gt; {animals.map((animal) =&amp;gt; ( &amp;lt;Animal key={animal.id} {...animal} /&amp;gt; ))} {animals.length === 0 &amp;amp;&amp;amp; &amp;#39;No animals found&amp;#39;} &amp;lt;/ul&amp;gt; &amp;lt;/main&amp;gt; ); } // Dumb UI component function Animal({ type, name, age }) { return ( &amp;lt;li&amp;gt; &amp;lt;strong&amp;gt;{type}&amp;lt;/strong&amp;gt; {name} ({age} years old) &amp;lt;/li&amp;gt; ); } // Custom Hook function useAnimalSearch() { const [animals, setAnimals] = useState([]); useEffect(() =&amp;gt; { const lastQuery = localStorage.</description>
    </item>
    
    <item>
      <title>Firestore Queries</title>
      <link>https://fireship.io/courses/ionic/app-query/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-query/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Project Organization</title>
      <link>https://fireship.io/courses/flutter-firebase/project-organization/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-organization/</guid>
      <description>Task Create a directory and file for each screen in the app.
about home login profile quiz topics Provide each file with a Stateless Widget. For example:
file_type_flutter home.dart import &amp;#39;package:flutter/material.dart&amp;#39;; class HomeScreen extends StatelessWidget { const HomeScreen({ Key? key }) : super(key: key); @override Widget build(BuildContext context) { return Scaffold( ); } } Project Structure login/, quiz/, etc. contains the app&amp;rsquo;s main UI features or screens. shared/ contains the app&amp;rsquo;s shared UI, like navigation menus and loading indicators.</description>
    </item>
    
    <item>
      <title>Routing &amp; Firebase Analytics</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-routing-analytics/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-routing-analytics/</guid>
      <description>Firebase Analytics and Routing Add Firebase Analytics to keep track of the user&amp;rsquo;s navigation between screens.
file_type_dartlang main.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:firebase_analytics/observer.dart&amp;#39;; import &amp;#39;package:firebase_analytics/firebase_analytics.dart&amp;#39;; void main() =&amp;gt; runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( // Firebase Analytics navigatorObservers: [ FirebaseAnalyticsObserver(analytics: FirebaseAnalytics()), ], routes: { &amp;#39;/&amp;#39;: (context) =&amp;gt; LoginScreen(), &amp;#39;/topics&amp;#39;: (context) =&amp;gt; TopicsScreen(), &amp;#39;/profile&amp;#39;: (context) =&amp;gt; ProfileScreen(), &amp;#39;/about&amp;#39;: (context) =&amp;gt; AboutScreen(), }, // Theme theme: ThemeData( // your customizations here brightness: Brightness.</description>
    </item>
    
    <item>
      <title>Snippets</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-snippets/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-snippets/</guid>
      <description>‚ú® Trick - Custom Snippets Open the command palette and create a new Global Snippets file. Inside the file, you create custom snippets with JSON that can be inserted by typing the prefix in the editor.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://fireship.io/courses/dart/syntax-functions/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-functions/</guid>
      <description>Basic Functions Function with positional parameters:
file_type_dartlang functions.dart // Basic Function String takeFive(int number) { return &amp;#39;$number minus five equals ${number - 5}&amp;#39;; } Function with named parameters:
file_type_dartlang functions.dart // Named parameters namedParams({required int a, int b = 5}) { return a - b; } namedParams(a: 23, b: 10); Arrow Functions Arrow functions are useful when passing functions as parameters to other functions.
file_type_dartlang functions.dart // Arrow Function String takeFive(int number) =&amp;gt; &amp;#39;$number minus five equals ${number - 5}&amp;#39;; Callback Functions Many APIs in Dart use callback functions, often to handle events or gestures in Flutter.</description>
    </item>
    
    <item>
      <title>git merge</title>
      <link>https://fireship.io/courses/git/remote-merge/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-merge/</guid>
      <description> What is the most common merge strategy? Fetch and merge code from the remote repository.
command line git fetch git merge origin/master </description>
    </item>
    
    <item>
      <title>Auth Context</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-context/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-context/</guid>
      <description>Create Context Learn more about React Context.
file_type_js lib/context.js import { createContext } from &amp;#39;react&amp;#39;; export const UserContext = createContext({ user: null, username: null }); Provide Context file_type_js pages/_app.js import { UserContext } from &amp;#39;../lib/context&amp;#39;; function MyApp({ Component, pageProps }) { return ( &amp;lt;UserContext.Provider value={{ user: {}, username: &amp;#39;jeff&amp;#39; }}&amp;gt; &amp;lt;Navbar /&amp;gt; &amp;lt;Component {...pageProps} /&amp;gt; &amp;lt;Toaster /&amp;gt; &amp;lt;/UserContext.Provider&amp;gt; ); } Consume Context file_type_js components/Navbar.js import { useContext } from &amp;#39;react&amp;#39;; import { UserContext } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Conditions</title>
      <link>https://fireship.io/courses/firebase-security/basics-conditions/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/basics-conditions/</guid>
      <description>See the full Firestore Rules Operators List</description>
    </item>
    
    <item>
      <title>User Profile</title>
      <link>https://fireship.io/courses/vue/auth-signout/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/auth-signout/</guid>
      <description>User Profile Component UserProfile.vue &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; Logged in as {{ user.uid }}&amp;lt;br&amp;gt; &amp;lt;button @click=&amp;#34;auth.signOut()&amp;#34; class=&amp;#34;button&amp;#34;&amp;gt;Sign Out&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { auth } from &amp;#39;../firebase&amp;#39;; export default { data() { return { auth } }, props: [&amp;#39;user&amp;#39;] } &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Schematics</title>
      <link>https://fireship.io/courses/angular/app-schematics/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-schematics/</guid>
      <description>Schematics provide sophisticated code blueprints using the Angular CLI, with many recipes included for Angular Material.
For example, you could replace the component command from the last video with:
command line ng generate @angular/material:nav shared/shell </description>
    </item>
    
    <item>
      <title>Collection Group Queries</title>
      <link>https://fireship.io/courses/firestore-data-modeling/bonus-collection-group/</link>
      <pubDate>Thu, 16 May 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/bonus-collection-group/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Send SMS Texts</title>
      <link>https://fireship.io/courses/cloud-functions/callable-sms/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/callable-sms/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enable RLS</title>
      <link>https://fireship.io/courses/supabase/app-rls-enable/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-rls-enable/</guid>
      <description>Turning on RLS via SQL:
alter table &amp;lt;table name&amp;gt; enable row level security RLS Policies for the user_profile table:
CREATE POLICY &amp;#34;all can see&amp;#34; ON &amp;#34;public&amp;#34;.&amp;#34;user_profiles&amp;#34; AS PERMISSIVE FOR SELECT TO public USING (true); CREATE POLICY &amp;#34;users can insert&amp;#34; ON &amp;#34;public&amp;#34;.&amp;#34;user_profiles&amp;#34; AS PERMISSIVE FOR INSERT TO public WITH CHECK (auth.uid() = user_id); CREATE POLICY &amp;#34;owners can update&amp;#34; ON &amp;#34;public&amp;#34;.&amp;#34;user_profiles&amp;#34; AS PERMISSIVE FOR UPDATE TO public USING (auth.uid()=user_id) WITH CHECK (auth.uid()=user_id); </description>
    </item>
    
    <item>
      <title>Optional Chaining</title>
      <link>https://fireship.io/courses/js/102-optional-chaining/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-optional-chaining/</guid>
      <description>What is the return value when calling a property that does not exist with optional chaining? Optional Chaining Optional chaining ? is a relatively new operator that was introduced in ES2020. It allows you to call object properties safely, without throwing an error. When calling properties without this operator, you many crash your applcation with the error Cannot read property &#39;foo&#39; of undefined.
const person = { }; const dude = person.</description>
    </item>
    
    <item>
      <title>Bottom Navigation Bar</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-bottom-nav/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-bottom-nav/</guid>
      <description>About Screen Create a basic screen.
file_type_dartlang about.dart import &amp;#39;package:flutter/material.dart&amp;#39;; class AboutScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar( title: Text(&amp;#39;about&amp;#39;), backgroundColor: Colors.blue, ), body: Center( child: Text(&amp;#39;About this app...&amp;#39;), ), ); } } Export the Widgets You can export all your screens together using the following pattern:
file_type_dartlang screens.dart export &amp;#39;login.dart&amp;#39;; export &amp;#39;topics.dart&amp;#39;; export &amp;#39;quiz.dart&amp;#39;; export &amp;#39;profile.dart&amp;#39;; export &amp;#39;about.dart&amp;#39;; You can then use them in other project files like so: import &#39;screens/screens.</description>
    </item>
    
    <item>
      <title>Github Copilot</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-copilot/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-copilot/</guid>
      <description>‚ú® Trick - AI-driven Development Install the Github Copilot extension and let the magic happen!
Bonus Video </description>
    </item>
    
    <item>
      <title>Observable Loop</title>
      <link>https://fireship.io/courses/ionic/app-loop/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-loop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://fireship.io/courses/flutter-firebase/project-routing/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-routing/</guid>
      <description>Routing Configuration Create a file named routes.dart in the lib directory of your project.
file_type_dartlang routes.dart import &amp;#39;package:quizapp/about/about.dart&amp;#39;; import &amp;#39;package:quizapp/profile/profile.dart&amp;#39;; import &amp;#39;package:quizapp/login/login.dart&amp;#39;; import &amp;#39;package:quizapp/topics/topics.dart&amp;#39;; import &amp;#39;package:quizapp/home/home.dart&amp;#39;; var appRoutes = { &amp;#39;/&amp;#39;: (context) =&amp;gt; const HomeScreen(), &amp;#39;/login&amp;#39;: (context) =&amp;gt; const LoginScreen(), &amp;#39;/topics&amp;#39;: (context) =&amp;gt; const TopicsScreen(), &amp;#39;/profile&amp;#39;: (context) =&amp;gt; const ProfileScreen(), &amp;#39;/about&amp;#39;: (context) =&amp;gt; const AboutScreen(), }; Register the appRoutes with the MaterialApp in the main.dart file.
file_type_dartlang main.dart import &amp;#39;package:quizapp/routes.dart&amp;#39;; // .</description>
    </item>
    
    <item>
      <title>List</title>
      <link>https://fireship.io/courses/dart/syntax-list/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-list/</guid>
      <description>Basic Lists file_type_dartlang lists.dart List&amp;lt;int&amp;gt; list = [1, 2, 3, 4, 5]; list[0]; // 1 list.length; // 5 list.last; // 5 list.first; // 1 Loops file_type_dartlang lists.dart for (int n in list) { print(n); } list.forEach((n) =&amp;gt; print(n)); var doubled = list.map((n) =&amp;gt; n * 2); Spread Syntax file_type_dartlang lists.dart var combined = [...list, ...doubled]; combined.forEach(print); Conditions in Lists file_type_dartlang lists.dart bool depressed = false; var cart = [ &amp;#39;milk&amp;#39;, &amp;#39;eggs&amp;#39;, if (depressed) &amp;#39;Vodka&amp;#39; ]; </description>
    </item>
    
    <item>
      <title>git pull</title>
      <link>https://fireship.io/courses/git/remote-pull/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-pull/</guid>
      <description> What is a common alternative to git pull? Combine the fetch &amp;amp; merge from the previous section with the pull command.
command line git pull </description>
    </item>
    
    <item>
      <title>Auth Hook</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-hook/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-hook/</guid>
      <description>Custom User Data Hook Use this hook to read the current Firebase User, then use the uid to fetch the public profile document from Firestore.
file_type_js lib/hooks.js import { auth, firestore } from &amp;#39;../lib/firebase&amp;#39;; import { useEffect, useState } from &amp;#39;react&amp;#39;; import { useAuthState } from &amp;#39;react-firebase-hooks/auth&amp;#39;; // Custom hook to read auth record and user profile doc export function useUserData() { const [user] = useAuthState(auth); const [username, setUsername] = useState(null); useEffect(() =&amp;gt; { // turn off realtime subscription let unsubscribe; if (user) { const ref = firestore.</description>
    </item>
    
    <item>
      <title>Common Examples</title>
      <link>https://fireship.io/courses/firebase-security/basics-examples/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/basics-examples/</guid>
      <description> file_type_firebase firestore.rules match /users/{userId} { allow read: if request.auth.uid != null; allow write: if request.auth.uid == userId; } match /todos/{docId} { allow read: if resource.data.status == &amp;#39;published&amp;#39;; allow create: if request.auth.uid == request.resource.data.uid &amp;amp;&amp;amp; request.time == request.resource.data.createdAt; allow update: if request.auth.uid == resource.data.uid &amp;amp;&amp;amp; request.resource.data.keys().hasOnly([&amp;#39;text&amp;#39;, &amp;#39;status&amp;#39;]); } </description>
    </item>
    
    <item>
      <title>Checkout with React</title>
      <link>https://fireship.io/courses/stripe-js/checkout-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/checkout-react/</guid>
      <description>API Fetch Helper file_type_js helpers.js const API = &amp;#39;http://localhost:3333&amp;#39;; /** * A helper function to fetch data from your API. */ export async function fetchFromAPI(endpointURL, opts) { const { method, body } = { method: &amp;#39;POST&amp;#39;, body: null, ...opts }; const res = await fetch(`${API}/${endpointURL}`, { method, ...(body &amp;amp;&amp;amp; { body: JSON.stringify(body) }), headers: { &amp;#39;Content-Type&amp;#39;: &amp;#39;application/json&amp;#39;, }, }); return res.json(); } Checkout Component App.js import React, { useState } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Email Password Authentication</title>
      <link>https://fireship.io/courses/vue/auth-email-password/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/auth-email-password/</guid>
      <description>Login Component Login.vue &amp;lt;template&amp;gt; &amp;lt;aside class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;Sign in Anonymously&amp;lt;/h3&amp;gt; &amp;lt;button class=&amp;#34;button&amp;#34; @click=&amp;#34;auth.signInAnonymously()&amp;#34;&amp;gt;Sign In&amp;lt;/button&amp;gt; &amp;lt;div v-if=&amp;#34;newUser&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;Sign Up for a New Account&amp;lt;/h3&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; @click=&amp;#34;newUser = false&amp;#34;&amp;gt;Returning User?&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div v-else&amp;gt; &amp;lt;h3&amp;gt;Sign In with Email&amp;lt;/h3&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; @click=&amp;#34;newUser = true&amp;#34;&amp;gt;New user?&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;label for=&amp;#34;email&amp;#34;&amp;gt;Email&amp;lt;/label&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;input v-model=&amp;#34;email&amp;#34; placeholder=&amp;#34;email&amp;#34; type=&amp;#34;email&amp;#34; class=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;label for=&amp;#34;password&amp;#34;&amp;gt;Password&amp;lt;/label&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;input v-model=&amp;#34;password&amp;#34; type=&amp;#34;password&amp;#34; class=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;button class=&amp;#34;button is-info&amp;#34; :class=&amp;#34;{ &amp;#39;is-loading&amp;#39;: loading }&amp;#34; @click=&amp;#34;signInOrCreateUser()&amp;#34; &amp;gt;{{ newUser ?</description>
    </item>
    
    <item>
      <title>Shared Module</title>
      <link>https://fireship.io/courses/angular/app-shared-module/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-shared-module/</guid>
      <description>Create a shared module to avoid duplicate imports and exports of common Angular Material features.
The SharedModule exports all declarations and modules so they can be consumed in other feature modules.
Steps Step 1 - Create a Module command line ng g module shared Add it to the app module. It will be imported by all features in this app.
file_type_ng_component_ts app.module.ts import { SharedModule } from &amp;#39;./shared/shared.module&amp;#39;; @NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, AppRoutingModule, BrowserAnimationsModule, SharedModule // &amp;lt;-- here ], providers: [], bootstrap: [AppComponent] }) export class AppModule { } Step 2 - Consolidate Imports Avoid duplication by consolidating your imports with the the spread syntax.</description>
    </item>
    
    <item>
      <title>Call a Callable Function</title>
      <link>https://fireship.io/courses/cloud-functions/callable-frontend/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/callable-frontend/</guid>
      <description> file_type_js foo.js document.addEventListener(&amp;#39;DOMContentLoaded&amp;#39;, function() { let app = firebase.app(); const sendText = firebase.functions().httpsCallable(&amp;#39;sendText&amp;#39;); sendText({ message: &amp;#39;Hello World!&amp;#39; }) }); </description>
    </item>
    
    <item>
      <title>Generate Types</title>
      <link>https://fireship.io/courses/supabase/app-typescript/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/app-typescript/</guid>
      <description>Command to generate typscript types:
npx supabase gen types typescript --local &amp;gt; ./src/database.types.ts </description>
    </item>
    
    <item>
      <title>Nullish Coalescing</title>
      <link>https://fireship.io/courses/js/102-nullish-coalescing/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-nullish-coalescing/</guid>
      <description> Which one of these values is truthy? Nullish Coalescing Nullish coalescing is a relativly new operator that was introduced in ES2020. It is similar to the logical OR operator ||, but it only returns the right-hand side if the left-hand side is null or undefined.
const foo = null ?? &amp;#39;bar&amp;#39;; console.log(foo); // &amp;#39;bar&amp;#39; const foo = 0 ?? &amp;#39;bar&amp;#39;; console.log(foo); // 0 </description>
    </item>
    
    <item>
      <title>Find References</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-find-refs/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-find-refs/</guid>
      <description>‚ú® Trick - Find References Right click on a symbol and select Peek References. This will show all other files that reference the symbol. This is generally more efficient than doing a global find.</description>
    </item>
    
    <item>
      <title>Themes</title>
      <link>https://fireship.io/courses/flutter-firebase/project-themes/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-themes/</guid>
      <description>Create a file named theme.dart in the root of the project
Example Code file_type_flutter theme.dart import &amp;#39;package:flutter/material.dart&amp;#39;; var appTheme = ThemeData( bottomAppBarTheme: const BottomAppBarTheme( color: Colors.black87, ), brightness: Brightness.dark, textTheme: const TextTheme( bodyText1: TextStyle(fontSize: 18), bodyText2: TextStyle(fontSize: 16), button: TextStyle( letterSpacing: 1.5, fontWeight: FontWeight.bold, ), headline1: TextStyle( fontWeight: FontWeight.bold, ), subtitle1: TextStyle( color: Colors.grey, ), ), buttonTheme: const ButtonThemeData(), ); Apply it to the MaterialApp in the main.dart file
file_type_dartlang main.</description>
    </item>
    
    <item>
      <title>Update Data</title>
      <link>https://fireship.io/courses/ionic/app-update/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-update/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Map</title>
      <link>https://fireship.io/courses/dart/syntax-map/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/syntax-map/</guid>
      <description>Basic Maps file_type_dartlang maps.dart Map&amp;lt;String, dynamic&amp;gt; book = { &amp;#39;title&amp;#39;: &amp;#39;Moby Dick&amp;#39;, &amp;#39;author&amp;#39;: &amp;#39;Herman Melville&amp;#39;, &amp;#39;pages&amp;#39;: 752, }; book[&amp;#39;title&amp;#39;]; book[&amp;#39;published&amp;#39;] = 1851; Loop over a Map file_type_dartlang maps.dart book.keys; book.values; book.values.toList(); for (MapEntry b in book.entries) { print(&amp;#39;Key ${b.key}, Value ${b.value}&amp;#39;); } book.forEach((k, v) =&amp;gt; print(&amp;#34;Key : $k, Value : $v&amp;#34;)); </description>
    </item>
    
    <item>
      <title>git clone</title>
      <link>https://fireship.io/courses/git/remote-clone/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-clone/</guid>
      <description>git clone creates remote-tracking branches in the cloned repo? Clone a remote repository to your local machine and optionally change the name of the director
command line git clone &amp;lt;repo-url&amp;gt; &amp;lt;local-directory&amp;gt; Practice Just for fun, clone this repo and run it on your local machine.</description>
    </item>
    
    <item>
      <title>App Navigation Shell</title>
      <link>https://fireship.io/courses/angular/app-shell/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-shell/</guid>
      <description>Add a basic navigation shell to the app and make it responsive on mobile.
Steps Step 1 - Update the App Component Nesting components inside each other is known as transclusion.
file_type_html app.component.html &amp;lt;app-shell&amp;gt; &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt; &amp;lt;/app-shell&amp;gt; Shell Breakpoint Logic Make your navigation responsive by listening to breakpoints.
file_type_ng_component_ts shell.component.ts import { Component } from &amp;#39;@angular/core&amp;#39;; import { BreakpointObserver, Breakpoints } from &amp;#39;@angular/cdk/layout&amp;#39;; import { Observable } from &amp;#39;rxjs&amp;#39;; import { map, shareReplay } from &amp;#39;rxjs/operators&amp;#39;; @Component({ selector: &amp;#39;app-shell&amp;#39;, templateUrl: &amp;#39;.</description>
    </item>
    
    <item>
      <title>Pro Tips</title>
      <link>https://fireship.io/courses/cloud-functions/outro-pro-tips/</link>
      <pubDate>Wed, 27 Feb 2019 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/outro-pro-tips/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Higher Order Functions</title>
      <link>https://fireship.io/courses/js/102-higher-order-functions/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-higher-order-functions/</guid>
      <description> Which one is a function declaration? Higher Order Functions A higher order function is a function that takes a function as an argument, or returns a function. They are commonly used in functional programming, and are a powerful tool for abstracting away complexity.
// A function that takes a function as an argument function add(x, y) { return x + y; } function subtract(x, y) { return x - y; } function math(x, y, operator) { return operator(x, y); } math(5, 2, add); // 7 </description>
    </item>
    
    <item>
      <title>Custom Events</title>
      <link>https://fireship.io/courses/ionic/app-ion-segment/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-ion-segment/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Google Fonts</title>
      <link>https://fireship.io/courses/flutter-firebase/project-google-fonts/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-google-fonts/</guid>
      <description>Add the Google Fonts package to your pubspec.yaml file.
Customize the Global Font file_type_flutter theme.dart import &amp;#39;package:google_fonts/google_fonts.dart&amp;#39;; var appTheme = ThemeData( fontFamily: GoogleFonts.nunito().fontFamily, // ... ); </description>
    </item>
    
    <item>
      <title>Safe Rename</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-safe-rename/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-safe-rename/</guid>
      <description>‚ú® Trick - Rename Symbol First, find the original implementation of a function or variable.
Next, right click on a symbol and select Rename Symbol. This will rename the symbol and all references to it.</description>
    </item>
    
    <item>
      <title>GitHub Codespaces</title>
      <link>https://fireship.io/courses/git/remote-codespaces/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/remote-codespaces/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Custom Usernames</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-custom-username/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-custom-username/</guid>
      <description>How do you perform atomic writes in Firestore? Custom Username Form The form below asynchronously validates the existance of a Firestore document. Learn more with a full breakdown of Firebase custom usernames
file_type_js pages/enter.js import { auth, firestore, googleAuthProvider } from &amp;#39;../lib/firebase&amp;#39;; import { UserContext } from &amp;#39;../lib/context&amp;#39;; import { useEffect, useState, useCallback, useContext } from &amp;#39;react&amp;#39;; import debounce from &amp;#39;lodash.debounce&amp;#39;; export default function Enter(props) { const { user, username } = useContext(UserContext); // 1.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://fireship.io/courses/angular/app-routing/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-routing/</guid>
      <description>Learn routing basics in Angular and the usage of the routerLink directive in templates.
Steps Step 1 - Generate a Component Generate home page component that is loaded by the router.
command line ng g component home-page Step 2 - Register it in the Router file_type_ng_component_ts app-routing.module.ts import { NgModule } from &amp;#39;@angular/core&amp;#39;; import { Routes, RouterModule } from &amp;#39;@angular/router&amp;#39;; import { HomePageComponent } from &amp;#39;./home-page/home-page.component&amp;#39;; const routes: Routes = [ { path: &amp;#39;&amp;#39;, component: HomePageComponent } ]; @NgModule({ imports: [RouterModule.</description>
    </item>
    
    <item>
      <title>Closures</title>
      <link>https://fireship.io/courses/js/102-closures/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-closures/</guid>
      <description> Where in memory does the JS engine store the state of a closure? Closures A closure is a function that has access to the parent scope, even after the parent function has closed. JS will automatically store the state of a closure in the heap memory, even after the parent function has returned. This behavior makes them useful for encapsulating private variables.
function encapsulatedState(x) { let state = 10; return function() { state += x; return state; } } </description>
    </item>
    
    <item>
      <title>Bottom Navigation Bar</title>
      <link>https://fireship.io/courses/flutter-firebase/project-bottom-nav/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/project-bottom-nav/</guid>
      <description>Bottom Navigation Use a BottomNavigationBar to move between screens in the shared folder.
file_type_dartlang bottom_nav.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:font_awesome_flutter/font_awesome_flutter.dart&amp;#39;; class BottomNavBar extends StatelessWidget { const BottomNavBar({super.key}); @override Widget build(BuildContext context) { return BottomNavigationBar( items: const [ BottomNavigationBarItem( icon: Icon( FontAwesomeIcons.graduationCap, size: 20, ), label: &amp;#39;Topics&amp;#39;, ), BottomNavigationBarItem( icon: Icon( FontAwesomeIcons.bolt, size: 20, ), label: &amp;#39;About&amp;#39;, ), BottomNavigationBarItem( icon: Icon( FontAwesomeIcons.circleUser, size: 20, ), label: &amp;#39;Profile&amp;#39;, ), ], fixedColor: Colors.deepPurple[200], onTap: (int idx) { switch (idx) { case 0: // do nothing break; case 1: Navigator.</description>
    </item>
    
    <item>
      <title>Code Actions</title>
      <link>https://fireship.io/courses/vscode-tricks/tip-actions/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/tip-actions/</guid>
      <description>‚ú® Trick - Refactor Tool When you see the üí° in VS code, it means you can take action on it. Click it or use the ctrl + . shortcut to view the available actions.</description>
    </item>
    
    <item>
      <title>Filter Data</title>
      <link>https://fireship.io/courses/ionic/app-filter-data/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-filter-data/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Loading Indicator</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-loader/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-loader/</guid>
      <description>Use the Loader when an individual UI element is loading, or LoadingScreen when an entire screen is loading.
file_type_dartlang loader.dart import &amp;#39;package:flutter/material.dart&amp;#39;; class Loader extends StatelessWidget { @override Widget build(BuildContext context) { return Container( width: 250, height: 250, child: CircularProgressIndicator(), ); } } class LoadingScreen extends StatelessWidget { @override Widget build(BuildContext context) { return Scaffold( appBar: AppBar(), body: Center( child: Loader(), ), ); } } </description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/angular/app-firebase-setup/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/app-firebase-setup/</guid>
      <description>See this snippet for guided setup instructions or reference the official docs.</description>
    </item>
    
    <item>
      <title>Array Tricks</title>
      <link>https://fireship.io/courses/js/102-array-tricks/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-array-tricks/</guid>
      <description>Which looping method is NOT recommended in most situations? Create a Range of Numbers const range = Array(100).fill(0).map((_, i) =&amp;gt; i + 1); // OR const range = [...Array(100).keys()]; Remove Duplicates from an Array const unique = [...new Set(arr)]; Get a Random Element const random = arr[Math.floor(Math.random() * arr.length)]; Loop over a Key-Value Pair for(const [i, val] of arr.entries()) { console.log(i, val); } Homework: Array Methods to Study arr.forEach(); arr.</description>
    </item>
    
    <item>
      <title>Modal</title>
      <link>https://fireship.io/courses/ionic/app-modal/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-modal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>History of JavaScript</title>
      <link>https://fireship.io/courses/js/102-history-of-js/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/102-history-of-js/</guid>
      <description>What is the name of the first browser that supported JavaScript? History of JavaScript Read the full Weird History of JavaScript article.</description>
    </item>
    
    <item>
      <title>Reactive Forms</title>
      <link>https://fireship.io/courses/ionic/app-reactive-form/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-reactive-form/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Dynamic Routing</title>
      <link>https://fireship.io/courses/ionic/app-dynamic-routes/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-dynamic-routes/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Signup Flow Tests</title>
      <link>https://fireship.io/courses/supabase/auth-signup-tests/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/auth-signup-tests/</guid>
      <description>Experiment with the live site: https://supaship.io
Sign-up-flow e2e tests in source code: https://github.com/fireship-io/supaship.io/blob/course-end-point/e2e/sign-up-flow.spec.ts
e2e/sign-up-flow.spec.ts:
import { test, expect } from &amp;#34;@playwright/test&amp;#34;; import { login, setupE2eTest, signUp } from &amp;#34;./utils&amp;#34;; test.describe(&amp;#34;User auth&amp;#34;, () =&amp;gt; { const userEmail = &amp;#34;test@test.io&amp;#34;; const userPassword = &amp;#34;test123456&amp;#34;; const userName = &amp;#34;testuser&amp;#34;; test.beforeEach(setupE2eTest); test.beforeEach(async ({ page }) =&amp;gt; { await page.goto(&amp;#34;http://localhost:1337&amp;#34;); }); test(&amp;#34;new user can signup&amp;#34;, async ({ browser, page }) =&amp;gt; { await signUp(page, userEmail, userPassword, userName); }); test(&amp;#34;after signing up, user can login from another machine&amp;#34;, async ({ browser, page, }) =&amp;gt; { await signUp(page, userEmail, userPassword, userName); const newMachine = await browser.</description>
    </item>
    
    <item>
      <title>Cumulative Sum</title>
      <link>https://fireship.io/courses/js/algo-sum/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-sum/</guid>
      <description>I am an odd number. Take away one letter and I become even. What number am I? Cumulative Sum Interview Question Create a function that takes an array of numbers and returns a number that is the sum of all values in the array.
Cumulative Sum Implementation // Solution 1 function cumSum(arr) { return arr.reduce((acc, cur) =&amp;gt; acc + cur, 0); } // Solution 2 export function cumSum(arr) { let total = 0; for(let i = 0; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>Intro</title>
      <link>https://fireship.io/courses/react/2-intro/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-intro/</guid>
      <description>Links Source Code Live Demo Create React App Use the CRA PWA template to create a new React app.
command line npx create-react-app my-app --template cra-template-pwa Firebase Create a Firebase project and deploy the app to the cloud.
command line npm install -g firebase-tools firebase init --hosting npm run build firebase deploy </description>
    </item>
    
    <item>
      <title>Auth Stream</title>
      <link>https://fireship.io/courses/flutter-firebase/auth-stream/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/auth-stream/</guid>
      <description>Auth Service Create a file named auth.dart in the services directory.
file_type_flutter services/auth.dart import &amp;#39;package:firebase_auth/firebase_auth.dart&amp;#39;; class AuthService { final userStream = FirebaseAuth.instance.authStateChanges(); final user = FirebaseAuth.instance.currentUser; } Listen to Current User Use the home page to render a different set of UI elements based on the user&amp;rsquo;s auth state in Firebase. If the user is signed in, show the topics screen. If the user is not signed in, show the login screen.</description>
    </item>
    
    <item>
      <title>Integrated Terminal</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-terminal/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-terminal/</guid>
      <description>‚ú® Trick - Organize the Terminal Open multiple terminal sessions, then right click it to customize its name, icon, and color.</description>
    </item>
    
    <item>
      <title>Security Rules</title>
      <link>https://fireship.io/courses/ionic/app-security/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/app-security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Classes</title>
      <link>https://fireship.io/courses/dart/classes-basic/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-basic/</guid>
      <description>Create a Class Classes are a way to group data and behavior together, like a blueprint for an Object.
file_type_dartlang classes.dart class Basic { int id; Basic(this.id); doStuff() { print(&amp;#39;Hello my ID is $id&amp;#39;); } } Create an Object Use the class to instantiate an Object. The new keyword is optional.
file_type_dartlang classes.dart Basic thing = new Basic(55); thing.id; thing.doStuff(); Static Methods You can call static methods on the class itself without creating a new object.</description>
    </item>
    
    <item>
      <title>git branch</title>
      <link>https://fireship.io/courses/git/collab-branch/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/collab-branch/</guid>
      <description> What is a more politically correct name for the master branch? List out branches:
command line git branch Create a new branch:
command line git branch awesome Delete a branch
command line git branch -d awesome </description>
    </item>
    
    <item>
      <title>SSR &amp; SEO in Next</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-next-seo/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-next-seo/</guid>
      <description>You have a page that doesn&#39;t change often, but will be shared on social media. Which strategy is ideal? In this section we will look at techniques for data fetching and server-side rendering in Next.js.
Should I fetch data on the server? A flow chart to help you determine the right rendering strategy based on SEO and performance</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://fireship.io/courses/firebase-security/advanced-functions/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/advanced-functions/</guid>
      <description> file_type_firebase firestore.rules match /users/{userId} { allow read: if isLoggedIn(); allow write: if belongsTo(userId); } match /todos/{docId} { allow read: if resource.data.status == &amp;#39;published&amp;#39;; allow create: if canCreateTodo(); allow update: if belongsTo() &amp;amp;&amp;amp; request.resource.data.keys().hasOnly([&amp;#39;text&amp;#39;, &amp;#39;status&amp;#39;]); } function isLoggedIn() { return request.auth.uid != null; } function belongsTo(userId) { return request.auth.uid == userId || request.auth.uid == resource.data.uid; } function canCreateTodo() { let uid = request.auth.uid; let hasValidTimestamp = request.time == request.resource.data.createdAt; return belongsTo(uid) &amp;amp;&amp;amp; hasValidTimestamp; } </description>
    </item>
    
    <item>
      <title>Payment Intents API</title>
      <link>https://fireship.io/courses/stripe-js/payments-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>User Authentication (Google)</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-auth-service/</link>
      <pubDate>Sun, 12 Apr 2020 10:13:30 -0400</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-auth-service/</guid>
      <description>Note: If you experience issues with Google Auth, revisit the Firebase Setup section to ensure the SHA fingerprint has been setup on your local machine.
Auth Service Create an auth service to isolate the business logic for Firebase authentication methods and user management.
file_type_dartlang auth.dart import &amp;#39;package:firebase_auth/firebase_auth.dart&amp;#39;; import &amp;#39;package:google_sign_in/google_sign_in.dart&amp;#39;; import &amp;#39;package:cloud_firestore/cloud_firestore.dart&amp;#39;; import &amp;#39;dart:async&amp;#39;; class AuthService { final GoogleSignIn _googleSignIn = GoogleSignIn(); final FirebaseAuth _auth = FirebaseAuth.instance; final Firestore _db = Firestore.</description>
    </item>
    
    <item>
      <title>Create Chat Rooms</title>
      <link>https://fireship.io/courses/vue/firestore-create-chat/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/firestore-create-chat/</guid>
      <description>Chat List Component ChatList.vue &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;button @click=&amp;#34;createChatRoom()&amp;#34; class=&amp;#34;button&amp;#34;&amp;gt;Create New Chat Room&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { db } from &amp;#39;../firebase&amp;#39;; export default { data() { return { chats: [] } }, firestore() { return { chats: db.collection(&amp;#39;chats&amp;#39;).where(&amp;#39;owner&amp;#39;, &amp;#39;==&amp;#39;, this.uid) } }, methods: { async createChatRoom() { const newChat = await db.collection(&amp;#39;chats&amp;#39;).add({ createdAt: Date.now(), owner: this.uid, members: [this.uid] }) console.log(newChat) } }, props: [&amp;#39;uid&amp;#39;] }; &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Graph Traversal</title>
      <link>https://fireship.io/courses/javascript/interview-graphs/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/interview-graphs/</guid>
      <description>Graph Representation as Adjacency List A graph can be represented as an adjacency matrix or adjacency list. In most cases, it is more efficient to use the latter because it requires less memory and offers better time-complexity when performing search algorithms.
Imagine we have a dataset that contains airports and routes. We can represent the graph as a Map where each key (node) is an airport and the value (edges) is an array airports that it can connect to.</description>
    </item>
    
    <item>
      <title>Lazy Loaded Login Feature</title>
      <link>https://fireship.io/courses/angular/user-feature-module/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/user-feature-module/</guid>
      <description>Create a lazy-loaded feature module to handle user sign-in and related tasks.
Steps Step 1 Generate a feature module with routing and add a component to it.
command line ng g module user --routing ng g component user/login-page Step 2 - Update the User Routes Add the component to the user module routes.
file_type_ng_component_ts user-routing.module.ts import { NgModule } from &amp;#39;@angular/core&amp;#39;; import { Routes, RouterModule } from &amp;#39;@angular/router&amp;#39;; import { LoginPageComponent } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Session Hook</title>
      <link>https://fireship.io/courses/supabase/auth-hook/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/auth-hook/</guid>
      <description>use-session.ts:
import { RealtimeChannel, Session } from &amp;#34;@supabase/supabase-js&amp;#34;; import { useEffect, useState } from &amp;#34;react&amp;#34;; import { supaClient } from &amp;#34;./supa-client&amp;#34;; export interface UserProfile { username: string; avatarUrl?: string; } export interface SupashipUserInfo { session: Session | null; profile: UserProfile | null; } export function useSession(): SupashipUserInfo { const [userInfo, setUserInfo] = useState&amp;lt;SupashipUserInfo&amp;gt;({ profile: null, session: null, }); const [channel, setChannel] = useState&amp;lt;RealtimeChannel | null&amp;gt;(null); useEffect(() =&amp;gt; { supaClient.auth.getSession().then(({ data: { session } }) =&amp;gt; { setUserInfo({ .</description>
    </item>
    
    <item>
      <title>Binary Search</title>
      <link>https://fireship.io/courses/js/algo-binary-search/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-binary-search/</guid>
      <description>What is the time complexity of binary search? Binary search is a faster way to find an item in a sorted array with O(log n) time complexity, compared to a regular loop with O(n) time complexity.
Binary Search Interview Question Create a function that takes a sorted array and a target value. Return the index of the target value in the array. If the target value is not in the array, return -1.</description>
    </item>
    
    <item>
      <title>Game UI</title>
      <link>https://fireship.io/courses/react/2-game-ui/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-game-ui/</guid>
      <description>App App.js import { useState } from &amp;#39;react&amp;#39;; import Card from &amp;#39;./components/Card&amp;#39;; import shuffle from &amp;#39;./utilities/shuffle&amp;#39;; function App() { const [cards, setCards] = useState(shuffle); // Cards array from assets return ( &amp;lt;&amp;gt; &amp;lt;div className=&amp;#34;grid&amp;#34;&amp;gt; {cards.map((card) =&amp;gt; { const { image, id, matched } = card; return ( &amp;lt;Card key={id} image={image} selected={false} onClick={() =&amp;gt; {}} /&amp;gt; ); })} &amp;lt;/div&amp;gt; &amp;lt;/&amp;gt; ); } export default App; Card Card.js const Card = ({ image, selected, onClick }) =&amp;gt; { return ( &amp;lt;div className=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;div className={selected &amp;amp;&amp;amp; &amp;#39;selected&amp;#39;}&amp;gt; &amp;lt;img alt=&amp;#34;&amp;#34; src={image} className=&amp;#34;card-face&amp;#34; /&amp;gt; &amp;lt;img alt=&amp;#34;&amp;#34; className=&amp;#34;card-back&amp;#34; src={&amp;#39;/assets/fireship.</description>
    </item>
    
    <item>
      <title>FCM Primer</title>
      <link>https://fireship.io/courses/ionic/fcm-primer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/fcm-primer/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Login Screen</title>
      <link>https://fireship.io/courses/flutter-firebase/auth-login-screen/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/auth-login-screen/</guid>
      <description>Anonymous Auth Enable anonymous auth in the Firebase console, then implemment it in the auth service.
file_type_flutter services/auth.dart import &amp;#39;package:firebase_auth/firebase_auth.dart&amp;#39;; class AuthService { // .. /// Anonymous Firebase login Future&amp;lt;void&amp;gt; anonLogin() async { try { await FirebaseAuth.instance.signInAnonymously(); } on FirebaseAuthException { // handle error } } Future&amp;lt;void&amp;gt; signOut() async { await FirebaseAuth.instance.signOut(); } } Login Screen Create a login screen and resuable button to support multiple login methods.
file_type_flutter login.dart class LoginScreen extends StatelessWidget { const LoginScreen({super.</description>
    </item>
    
    <item>
      <title>Tasks</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-tasks/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-tasks/</guid>
      <description>‚ú® Trick - Run a Task When using a tool like NPM or Docker, VS code will automatically detect tasks you can run. Find them in the file explorer and run them with the play button.</description>
    </item>
    
    <item>
      <title>User Profile</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-user-profile/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-user-profile/</guid>
      <description>User Profile Screen file_type_dartlang profile.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:firebase_auth/firebase_auth.dart&amp;#39;; import &amp;#39;../services/services.dart&amp;#39;; import &amp;#39;../shared/shared.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; class ProfileScreen extends StatelessWidget { final AuthService auth = AuthService(); @override Widget build(BuildContext context) { FirebaseUser user = Provider.of&amp;lt;FirebaseUser&amp;gt;(context); if (user != null) { return Scaffold( appBar: AppBar( backgroundColor: Colors.deepOrange, title: Text(user.displayName ?? &amp;#39;Guest&amp;#39;), ), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.spaceEvenly, crossAxisAlignment: CrossAxisAlignment.center, children: [ if (user.photoUrl != null) Container( width: 100, height: 100, margin: EdgeInsets.</description>
    </item>
    
    <item>
      <title>Constructors</title>
      <link>https://fireship.io/courses/dart/classes-constructors/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-constructors/</guid>
      <description>Constructor Basics The this keyword is used to refer to the current instance of a class and is optional unless there is a name collision.
file_type_dartlang constructors.dart class Rectangle { final int width; final int height; String? name; late final int area; Rectangle(this.width, this.height, [this.name]) { area = width * height; } } Named Parameters In Flutter, all widgets used named parameters.
file_type_dartlang constructors.dart class Circle { const Circle({required int radius, String?</description>
    </item>
    
    <item>
      <title>git checkout</title>
      <link>https://fireship.io/courses/git/collab-checkout/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/collab-checkout/</guid>
      <description> Which flag automatically creates a new branch during checkout? Move into a branch
command line git checkout awesome Create a new branch and move into it:
command line git checkout -b awesome </description>
    </item>
    
    <item>
      <title>Data Model</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-data-model/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-data-model/</guid>
      <description>Database Structure users/{uid} Public user profile usernames/{username} Username uniqueness tracking users/{uid}/posts/{slug} User can have many posts users/{uid}/posts/{slug}/hearts/{uid} many-to-many relationship between users and posts via hearts Data Model for Posts Example post document with all expected fields.
// users/{uid}/posts/{slug} { title: &amp;#39;Hello World, slug: &amp;#39;hello-world&amp;#39;, uid: &amp;#39;userID&amp;#39;, username: &amp;#39;jeffd23&amp;#39;, published: false, content: &amp;#39;# hello world!&amp;#39;, createdAt: TimeStamp, updatedAt: TimeStamp, heartCount: 0, } </description>
    </item>
    
    <item>
      <title>Read Other Documents</title>
      <link>https://fireship.io/courses/firebase-security/advanced-read-db/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/advanced-read-db/</guid>
      <description> file_type_firebase firestore.rules get(/databases/$(database)/documents/users/$(request.auth.uid)) exists(/databases/$(database)/documents/users/$(SOME_DOC_ID)) </description>
    </item>
    
    <item>
      <title>Create a Payment Intent</title>
      <link>https://fireship.io/courses/stripe-js/payments-create/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-create/</guid>
      <description>Create a Payment Intent file_type_typescript payments.ts import { stripe } from &amp;#39;./&amp;#39;; /** * Create a Payment Intent with a specific amount */ export async function createPaymentIntent(amount: number) { const paymentIntent = await stripe.paymentIntents.create({ amount, currency: &amp;#39;usd&amp;#39;, // receipt_email: &amp;#39;hello@fireship.io&amp;#39;, }); paymentIntent.status return paymentIntent; } Payments Endpoint file_type_typescript api.ts import { createPaymentIntent } from &amp;#39;./payments&amp;#39;; /** * Payment Intents */ app.post( &amp;#39;/payments&amp;#39;, runAsync(async ({ body }: Request, res: Response) =&amp;gt; { res.</description>
    </item>
    
    <item>
      <title>Query Chat Rooms</title>
      <link>https://fireship.io/courses/vue/firestore-query-chat/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/firestore-query-chat/</guid>
      <description>Chat List Component ChatList.vue &amp;lt;template&amp;gt; &amp;lt;div&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;chat of chats&amp;#34; :key=&amp;#34;chat.id&amp;#34;&amp;gt; &amp;lt;router-link :to=&amp;#34;{ name: &amp;#39;chat&amp;#39;, params: { id: chat.id } }&amp;#34;&amp;gt;{{ chat.id }}&amp;lt;/router-link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;button @click=&amp;#34;createChatRoom()&amp;#34; class=&amp;#34;button&amp;#34;&amp;gt;Create New Chat Room&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import { db } from &amp;#39;../firebase&amp;#39;; export default { data() { return { chats: [] } }, firestore() { return { chats: db.collection(&amp;#39;chats&amp;#39;).where(&amp;#39;owner&amp;#39;, &amp;#39;==&amp;#39;, this.uid) } }, methods: { async createChatRoom() { const newChat = await db.</description>
    </item>
    
    <item>
      <title>Google SignIn</title>
      <link>https://fireship.io/courses/angular/user-google-signin-directive/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/user-google-signin-directive/</guid>
      <description>Steps Step 1 - Generate the Google Signin Directive command line ng g directive user/google-signin The directive listens to the click event on the host element to trigger the signin process in Firebase.
Event Types
file_type_ng_component_ts google-signin.directive.ts import { Directive, HostListener } from &amp;#39;@angular/core&amp;#39;; import { AngularFireAuth } from &amp;#39;@angular/fire/auth&amp;#39;; import firebase from &amp;#39;firebase/app; @Directive({ selector: &amp;#39;[appGoogleSignin]&amp;#39; }) export class GoogleSigninDirective { constructor(private afAuth: AngularFireAuth) {} @HostListener(&amp;#39;click&amp;#39;) onclick() { this.afAuth.signInWithPopup(new firebase.</description>
    </item>
    
    <item>
      <title>User Context</title>
      <link>https://fireship.io/courses/supabase/auth-context/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/auth-context/</guid>
      <description>After this lesson, your App.tsx should look like this:
import { createContext } from &amp;#34;react&amp;#34;; import { createBrowserRouter, RouterProvider, Outlet } from &amp;#34;react-router-dom&amp;#34;; import MessageBoard from &amp;#34;./MessageBoard&amp;#34;; import AllPosts from &amp;#34;./AllPosts&amp;#34;; import PostView from &amp;#34;./PostView&amp;#34;; import Welcome, { welcomeLoader } from &amp;#34;./Welcome&amp;#34;; import NavBar from &amp;#34;./NavBar&amp;#34;; import { SupashipUserInfo, useSession } from &amp;#34;./use-session&amp;#34;; const router = createBrowserRouter([ /* routing hasn&amp;#39;t changed */ ]); function App() { return &amp;lt;RouterProvider router={router} /&amp;gt;; } export default App; export const UserContext = createContext&amp;lt;SupashipUserInfo&amp;gt;({ session: null, profile: null, }); function Layout() { const supashipUserInfo = useSession(); return ( &amp;lt;&amp;gt; &amp;lt;UserContext.</description>
    </item>
    
    <item>
      <title>Least Recently Used (LRU) Cache</title>
      <link>https://fireship.io/courses/js/algo-lru/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-lru/</guid>
      <description>Which feature makes a JS Map suitable for an LRU cache? The LRU cache is one of the most commoly asked algorithm questions on interviews.
LRU Interview Question Create a data structure that implements the requirements of a Least Recently Used (LRU) cache with O(1) average time complexity.
Initialize an object with a maxium capacity of elements. getItem Return the value of the key. Update cache with the most recently used key.</description>
    </item>
    
    <item>
      <title>TDD with Vitest</title>
      <link>https://fireship.io/courses/js/algo-vitest/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/algo-vitest/</guid>
      <description>Use Vitest to create a few basic unit test for the algorithims in the previous lessons.
npm init -y npm i -D vitest Update the package.json with a test script.
file_type_npm package.json &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;vitest&amp;#34; }, Vitest Basic Example import { expect, test } from &amp;#39;vitest&amp;#39;; import { cumSum } from &amp;#39;./sum&amp;#39;; test(&amp;#39;cumulative sum of an array&amp;#39;, () =&amp;gt; { expect(cumSum([1, 3, 5, 7])).toBe(16); expect(cumSum([-2, -4, -8])).toBe(-14); }); </description>
    </item>
    
    <item>
      <title>Game Logic</title>
      <link>https://fireship.io/courses/react/2-game-logic/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-game-logic/</guid>
      <description>Game Logic App.js import { useState, useEffect } from &amp;#39;react&amp;#39;; import Card from &amp;#39;./components/Card&amp;#39;; import shuffle from &amp;#39;./utilities/shuffle&amp;#39;; function App() { const [cards, setCards] = useState(shuffle); // Cards array from assets const [pickOne, setPickOne] = useState(null); // First selection const [pickTwo, setPickTwo] = useState(null); // Second selection const [disabled, setDisabled] = useState(false); // Delay handler const [wins, setWins] = useState(0); // Win streak // Handle card selection const handleClick = (card) =&amp;gt; { if (!</description>
    </item>
    
    <item>
      <title>Cloud Functions</title>
      <link>https://fireship.io/courses/ionic/fcm-cloud-functions/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/fcm-cloud-functions/</guid>
      <description>You might also find the Firebase Cloud Functions Master Course useful for more complex serverless integrations.</description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-git/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-git/</guid>
      <description>üç¥ If you&amp;rsquo;re new to Git, check out the Full Git Course.
First, add a git repo to your project:
command line git init ‚ú® Trick - Revert a Commit One the most useful git techniques is to revert a commit. Use the source control panel in to stage files, commit them, then revert the commit.</description>
    </item>
    
    <item>
      <title>Google Sign In</title>
      <link>https://fireship.io/courses/flutter-firebase/auth-google/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/auth-google/</guid>
      <description>Auth Service Implement Google Login in the auth service.
file_type_flutter services/auth.dart import &amp;#39;package:firebase_auth/firebase_auth.dart&amp;#39;; import &amp;#39;package:google_sign_in/google_sign_in.dart&amp;#39;; class AuthService { // ... Future&amp;lt;void&amp;gt; googleLogin() async { try { final googleUser = await GoogleSignIn().signIn(); if (googleUser == null) return; final googleAuth = await googleUser.authentication; final authCredential = GoogleAuthProvider.credential( accessToken: googleAuth.accessToken, idToken: googleAuth.idToken, ); await FirebaseAuth.instance.signInWithCredential(authCredential); } on FirebaseAuthException catch (e) { // handle error } } } Login Screen Add Google Sign In to the login screen column.</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://fireship.io/courses/dart/classes-interfaces/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-interfaces/</guid>
      <description>An interface is a contract that a class must follow. Prefixing a method or variable with _ makes it private, so it won&amp;rsquo;t be visible when imported from a different file.
file_type_dartlang interfaces.dart class Elephant { // Public interface final String name; // In the interface, but visible only in this library. (private) final int _id = 23; // Not in the interface, since this is a constructor. Elephant(this.name); // Public method.</description>
    </item>
    
    <item>
      <title>Merge Conflicts</title>
      <link>https://fireship.io/courses/git/collab-merge-conflicts/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/collab-merge-conflicts/</guid>
      <description>Which flag allows you to safely quit the merge conflit process? How Merge Conflicts Happen Merge conflicts happen when two commits affect the same line of code at the same time.
Feature branch modifies line 5 and commits. Master branch modifies line 5 and commits. Master branch tries to merge feature branch. Here&amp;rsquo;s how a merge conflict looks from the command line:
command line git branch feature # make some changes git commit -am &amp;#34;awesome branch stuff&amp;#34; git checkout master # make some changes to same code git commit -am &amp;#34;master branch stuff&amp;#34; git merge feature # CONFLICT!</description>
    </item>
    
    <item>
      <title>SSR User Profile Page</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-profile-page/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-profile-page/</guid>
      <description>How do you return a single result from a Firestore collection query Helpers The following helpers will be reused on in other components to simplify the code.
file_type_js lib/firebase.js /**` * Gets a users/{uid} document with username * @param {string} username */ export async function getUserWithUsername(username) { const usersRef = firestore.collection(&amp;#39;users&amp;#39;); const query = usersRef.where(&amp;#39;username&amp;#39;, &amp;#39;==&amp;#39;, username).limit(1); const userDoc = (await query.get()).docs[0]; return userDoc; } /**` * Converts a firestore document to JSON * @param {DocumentSnapshot} doc */ export function postToJSON(doc) { const data = doc.</description>
    </item>
    
    <item>
      <title>Chat Example</title>
      <link>https://fireship.io/courses/firebase-security/advanced-chat-example/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/advanced-chat-example/</guid>
      <description>Firebase Rules for hypothertical chat application
file_type_firebase firestore.rules rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if false; } match /messages/{docId} { allow read: if request.auth.uid != null; allow create: if canCreateMessage(); } function canCreateMessage() { let isSignedIn = request.auth.uid != null; let isOwner = request.auth.uid == request.resource.data.uid; let isNotTooLong = request.resource.data.text.size() &amp;lt; 255; let isNow = request.time == request.resource.data.createdAt; let isNotBanned = exists( /databases/$(database)/documents/banned/$(request.</description>
    </item>
    
    <item>
      <title>Stripe Webhooks</title>
      <link>https://fireship.io/courses/stripe-js/payments-fulfill-webhook/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-fulfill-webhook/</guid>
      <description>Install the Stripe CLI on your local system.
Trigger Webhooks Locally Open a terminal to forward webhooks to the server.
command line stripe listen --forward-to localhost:3333/hooks Then open another terminal to trigger a mock webhook. command line stripe trigger payment_intent.created Webhook Handler Update the express middleware to include the body buffer.
file_type_typescript api.ts app.use( express.json({ verify: (req, res, buffer) =&amp;gt; (req[&amp;#39;rawBody&amp;#39;] = buffer), }) ); file_type_typescript index.ts import { stripe } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Dynamic Routing</title>
      <link>https://fireship.io/courses/vue/firestore-dynamic-routing/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/firestore-dynamic-routing/</guid>
      <description>Router Config file_type_js main.js import ChatRoom from &amp;#39;./components/ChatRoom&amp;#39; const router = new VueRouter({ routes: [ { path: &amp;#39;/chats/:id&amp;#39;, component: ChatRoom, name: &amp;#39;chat&amp;#39; } ] }) Router Link &amp;lt;router-link :to=&amp;#34;{ name: &amp;#39;chat&amp;#39;, params: { id: chat.id } }&amp;#34;&amp;gt;{{ chat.id }}&amp;lt;/router-link&amp;gt; ChatRoom Component ChatRoom.vue &amp;lt;template&amp;gt; &amp;lt;main class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;Welcome to ChatRoom.vue {{ chatId }}&amp;lt;/h3&amp;gt; &amp;lt;router-link to=&amp;#34;/&amp;#34;&amp;gt;Back&amp;lt;/router-link&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { computed: { chatId() { return this.$route.params.id; }, }, }; &amp;lt;/script&amp;gt; </description>
    </item>
    
    <item>
      <title>Email Password Auth</title>
      <link>https://fireship.io/courses/angular/user-email-pass/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/user-email-pass/</guid>
      <description>Official Reactive Forms Docs Steps Step 1 - Initial Setup command line ng g component user/email-login Your user module should look similer to this:
file_type_ng_component_ts user.module.ts import { ReactiveFormsModule } from &amp;#39;@angular/forms&amp;#39;; import { EmailLoginComponent } from &amp;#39;./email-login/email-login.component&amp;#39;; @NgModule({ declarations: [LoginPageComponent, GoogleSigninDirective, EmailLoginComponent], imports: [ CommonModule, UserRoutingModule, SharedModule, ReactiveFormsModule ] }) export class UserModule { } Make sure to declare the form in the login page for unauthenticated users.</description>
    </item>
    
    <item>
      <title>Login Screen</title>
      <link>https://fireship.io/courses/supabase/auth-login/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/auth-login/</guid>
      <description>Login Components Updated NavBar.tsx:
import { useContext } from &amp;#34;react&amp;#34;; import { Link } from &amp;#34;react-router-dom&amp;#34;; import { UserContext } from &amp;#34;./App&amp;#34;; import Login from &amp;#34;./Login&amp;#34;; import UserMenu from &amp;#34;./UserMenu&amp;#34;; export default function NavBar() { const { session } = useContext(UserContext); return ( &amp;lt;&amp;gt; &amp;lt;nav className=&amp;#34;nav-bar&amp;#34;&amp;gt; &amp;lt;Link className=&amp;#34;nav-logo-link&amp;#34; to=&amp;#34;/&amp;#34;&amp;gt; &amp;lt;img id=&amp;#34;logo&amp;#34; className=&amp;#34;nav-logo&amp;#34; src=&amp;#34;https://supaship.io/supaship_logo_with_text.svg&amp;#34; alt=&amp;#34;logo&amp;#34; /&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;ul className=&amp;#34;nav-right-list&amp;#34;&amp;gt; &amp;lt;li className=&amp;#34;nav-message-board-list-item&amp;#34;&amp;gt; &amp;lt;Link to=&amp;#34;/1&amp;#34; className=&amp;#34;nav-message-board-link&amp;#34;&amp;gt; message board &amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li className=&amp;#34;nav-auth-item&amp;#34;&amp;gt; {session?.user ?</description>
    </item>
    
    <item>
      <title>PWA</title>
      <link>https://fireship.io/courses/react/2-pwa/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/2-pwa/</guid>
      <description>App Badge Hook useAppBadge.jsx import { useState } from &amp;#39;react&amp;#39;; const useAppBadge = () =&amp;gt; { const [counter, setCounter] = useState(1); const setBadge = () =&amp;gt; { setCounter(counter + 1); if (navigator.setAppBadge) { navigator.setAppBadge(counter); } else if (navigator.setClientBadge) { navigator.setClientBadge(); } }; const clearBadge = () =&amp;gt; { setCounter(1); if (navigator.clearAppBadge) { navigator.clearAppBadge(); } else if (navigator.clearClientBadge) { navigator.clearClientBadge(); } }; return [setBadge, clearBadge]; }; export default useAppBadge; </description>
    </item>
    
    <item>
      <title>Login Screen</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-login-screen/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-login-screen/</guid>
      <description>Login Screen Create a login screen and a reusable button for multiple auth methods.
file_type_dartlang login.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:font_awesome_flutter/font_awesome_flutter.dart&amp;#39;; import &amp;#39;../services/services.dart&amp;#39;; import &amp;#39;package:apple_sign_in/apple_sign_in.dart&amp;#39;; class LoginScreen extends StatefulWidget { createState() =&amp;gt; LoginScreenState(); } class LoginScreenState extends State&amp;lt;LoginScreen&amp;gt; { AuthService auth = AuthService(); @override void initState() { super.initState(); auth.getUser.then( (user) { if (user != null) { Navigator.pushReplacementNamed(context, &amp;#39;/topics&amp;#39;); } }, ); } @override Widget build(BuildContext context) { return Scaffold( body: Container( padding: EdgeInsets.</description>
    </item>
    
    <item>
      <title>Remote</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-remote/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-remote/</guid>
      <description>‚ú® Trick - Github Command Palette Visit Github in the browser and use it&amp;rsquo;s command palette by hitting ctrl+k. Or open VS Code from GitHub by hitting . from a repo.
‚ú® Trick - Remote Repos You can also connect your local VS Code to a remote git repo. Click on the blue icon in the bottom left corner of VS Code to open the remote repositories panel. Authorize your account to access your repositories and edit them remotely.</description>
    </item>
    
    <item>
      <title>Sign in with Apple</title>
      <link>https://fireship.io/courses/flutter-firebase/auth-apple/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/auth-apple/</guid>
      <description>üö® Video is a work in progress.
Refer to the Official Guide.
As of April 2020, all native iOS apps that offer social auth methods (Google, Facebook, etc.) MUST also include Apple Sign In as an option. See the official guidance from Apple.
Sign in with Apple with Firebase file_type_flutter main.dart import &amp;#39;dart:convert&amp;#39;; import &amp;#39;dart:math&amp;#39;; import &amp;#39;package:crypto/crypto.dart&amp;#39;; import &amp;#39;package:sign_in_with_apple/sign_in_with_apple.dart&amp;#39;; class AuthService { // ... String generateNonce([int length = 32]) { const charset = &amp;#39;0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-.</description>
    </item>
    
    <item>
      <title>Web Notifications</title>
      <link>https://fireship.io/courses/ionic/fcm-web/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/fcm-web/</guid>
      <description>Bonus Video </description>
    </item>
    
    <item>
      <title>Extend</title>
      <link>https://fireship.io/courses/dart/classes-extend/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-extend/</guid>
      <description>Superclass The superclass or parent class contains the behaviors that is shared by all subclasses. The abstract keyword is used to indicate that the class is not meant to be instantiated, but rather to be inherited from.
file_type_dartlang extend.dart abstract class Dog { void walk() { print(&amp;#39;walking...&amp;#39;); } } Subclass The subclass can @override the behavior of the superclass.
file_type_dartlang extend.dart class Pug extends Dog { String breed = &amp;#39;pug&amp;#39;; @override void walk() { super.</description>
    </item>
    
    <item>
      <title>Fork</title>
      <link>https://fireship.io/courses/git/collab-fork/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/collab-fork/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SSR &#43; Paginated Home Page Feed</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-home-page/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-home-page/</guid>
      <description>Firebase Lib Use this function to convert a Firestore timestamp to a number.
file_type_js lib/firebase.js export const fromMillis = firebase.firestore.Timestamp.fromMillis; Home Page Post Feed The first batch is rendered on the server, while all subsequent queries are executed clientside.
file_type_js pages/index.js import PostFeed from &amp;#39;../components/PostFeed&amp;#39;; import Loader from &amp;#39;../components/Loader&amp;#39;; import { firestore, fromMillis, postToJSON } from &amp;#39;../lib/firebase&amp;#39;; import { useState } from &amp;#39;react&amp;#39;; // Max post to query per page const LIMIT = 1; export async function getServerSideProps(context) { const postsQuery = firestore .</description>
    </item>
    
    <item>
      <title>Role-based Auth Example</title>
      <link>https://fireship.io/courses/firebase-security/advanced-roles-example/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/advanced-roles-example/</guid>
      <description>file_type_firebase firestore.rules rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{database}/documents { match /users/{userId} { allow read: if isSignedIn(); allow update, delete: if hasAnyRole([&amp;#39;admin&amp;#39;]); } match /posts/{postId} { allow read: if ( isSignedIn() &amp;amp;&amp;amp; resource.data.published ) || hasAnyRole([&amp;#39;admin&amp;#39;]); allow create: if isValidNewPost() &amp;amp;&amp;amp; hasAnyRole([&amp;#39;author&amp;#39;]); allow update: if isValidUpdatedPost() &amp;amp;&amp;amp; hasAnyRole([&amp;#39;author&amp;#39;, &amp;#39;editor&amp;#39;, &amp;#39;admin&amp;#39;]); allow delete: if hasAnyRole([&amp;#39;admin&amp;#39;]); } function isSignedIn() { return request.auth != null; } function hasAnyRole(roles) { return isSignedIn() &amp;amp;&amp;amp; get(/databases/$(database)/documents/users/$(request.</description>
    </item>
    
    <item>
      <title>Query Messages</title>
      <link>https://fireship.io/courses/vue/firestore-messages-query/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/firestore-messages-query/</guid>
      <description>ChatRoom Component ChatRoom.vue &amp;lt;template&amp;gt; &amp;lt;main class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;h3&amp;gt;Welcome to ChatRoom.vue {{ chatId }}&amp;lt;/h3&amp;gt; &amp;lt;User #user=&amp;#34;{ user }&amp;#34;&amp;gt; &amp;lt;div v-if=&amp;#34;user&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li v-for=&amp;#34;message of messages&amp;#34; :key=&amp;#34;message.id&amp;#34;&amp;gt; {{ message.text }} &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;input v-model=&amp;#34;newMessageText&amp;#34; class=&amp;#34;input&amp;#34; /&amp;gt; &amp;lt;button :disabled=&amp;#34;!newMessageText || loading&amp;#34; class=&amp;#34;button is-success&amp;#34; type=&amp;#34;text&amp;#34; @click=&amp;#34;addMessage(user.uid)&amp;#34; &amp;gt;Send&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;Login v-else /&amp;gt; &amp;lt;/User&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import User from &amp;#39;./User.vue&amp;#39;; import Login from &amp;#39;./Login.vue&amp;#39;; import { db, storage } from &amp;#39;../firebase&amp;#39;; export default { components: { User, Login }, data() { return { newMessageText: &amp;#39;&amp;#39;, loading: false, messages: [], } }, computed: { chatId() { return this.</description>
    </item>
    
    <item>
      <title>Auth Guard</title>
      <link>https://fireship.io/courses/angular/user-auth-guard/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/user-auth-guard/</guid>
      <description>Use a router guard to protect routes from unauthorized users and show a snackbar error message.
Steps Step 1 - Generate the Guard command line ng g guard user/auth file_type_ng_component_ts auth.guard.ts import { Injectable } from &amp;#39;@angular/core&amp;#39;; import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from &amp;#39;@angular/router&amp;#39;; import { AngularFireAuth } from &amp;#39;@angular/fire/auth&amp;#39;; import { SnackService } from &amp;#39;../services/snack.service&amp;#39;; @Injectable({ providedIn: &amp;#39;root&amp;#39; }) export class AuthGuard implements CanActivate { constructor( private afAuth: AngularFireAuth, private snack: SnackService ) {} async canActivate( next: ActivatedRouteSnapshot, state: RouterStateSnapshot ): Promise&amp;lt;boolean&amp;gt; { const user = await this.</description>
    </item>
    
    <item>
      <title>Custom Usernames</title>
      <link>https://fireship.io/courses/supabase/auth-usernames/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/auth-usernames/</guid>
      <description>Updated listenToUserProfileChanges() function in use-session.ts:
sync function listenToUserProfileChanges(userId: string) { const { data } = await supaClient .from(&amp;#34;user_profiles&amp;#34;) .select(&amp;#34;*&amp;#34;) .filter(&amp;#34;user_id&amp;#34;, &amp;#34;eq&amp;#34;, userId); if (data?.[0]) { setUserInfo({ ...userInfo, profile: data?.[0] }); } else { // this else clause is all you need to add! setReturnPath(); navigate(&amp;#34;/welcome&amp;#34;); } return supaClient .channel(`public:user_profiles`) .on( &amp;#34;postgres_changes&amp;#34;, { event: &amp;#34;*&amp;#34;, schema: &amp;#34;public&amp;#34;, table: &amp;#34;user_profiles&amp;#34;, filter: `user_id=eq.${userId}`, }, (payload) =&amp;gt; { setUserInfo({ ...userInfo, profile: payload.new as UserProfile }); } ) .</description>
    </item>
    
    <item>
      <title>Debugger</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-debugger/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-debugger/</guid>
      <description>‚ú® Trick - Breakpoints &amp;amp; Logpoints Run your code with the debugger. Between the line numbers, click the red circles to create breakpoints to pause execution OR use logpoints to replace your typical console logs.
Bonus Video </description>
    </item>
    
    <item>
      <title>Native Notifications</title>
      <link>https://fireship.io/courses/ionic/fcm-native/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/fcm-native/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mixin</title>
      <link>https://fireship.io/courses/dart/classes-mixin/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-mixin/</guid>
      <description>What are mixins? A mixin is just like a class, it can have methods and properties, but it can&amp;rsquo;t be instantiated.
file_type_dartlang mixins.dart mixin Strong { bool doesLift = true; void benchPress() { print(&amp;#39;doing bench press...&amp;#39;); } } mixin Fast { bool doesRun = true; void sprint() { print(&amp;#39;running fast...&amp;#39;); } } What are mixins used for? Mixins are used to extend specific behaviors to classes with the with keyword. Certain Flutter libaries use mixins to extend shared behaviors to classes.</description>
    </item>
    
    <item>
      <title>Pull Request</title>
      <link>https://fireship.io/courses/git/collab-pull-request/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/collab-pull-request/</guid>
      <description>The stickers are gone, but feel free to submit a pull request on GitHub for practice.</description>
    </item>
    
    <item>
      <title>ISR Incremental Static Regeneration</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-isr/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-isr/</guid>
      <description>What is the advantage of ISR over SSG? Main Post Content Page This page is statically generated, BUT regenerated after new requests come in at an interval of 5000ms. If a prerendered page does not exist, will fallback to regular SSR.
file_type_js pages/username/slug.js import styles from &amp;#39;../../styles/Post.module.css&amp;#39;; import PostContent from &amp;#39;../../components/PostContent&amp;#39;; import { firestore, getUserWithUsername, postToJSON } from &amp;#39;../../lib/firebase&amp;#39;; import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; export async function getStaticProps({ params }) { const { username, slug } = params; const userDoc = await getUserWithUsername(username); let post; let path; if (userDoc) { const postRef = userDoc.</description>
    </item>
    
    <item>
      <title>Message UI</title>
      <link>https://fireship.io/courses/vue/firestore-message-ui/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/firestore-message-ui/</guid>
      <description>ChatRoom Component ChatMessage.vue &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;message&amp;#34; :class=&amp;#34;{ &amp;#39;from-user&amp;#39;: owner }&amp;#34;&amp;gt; {{ message.text }} &amp;lt;br /&amp;gt; &amp;lt;audio v-if=&amp;#34;message.audioURL&amp;#34; :src=&amp;#34;message.audioURL&amp;#34; controls&amp;gt;&amp;lt;/audio&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;span class=&amp;#34;sender&amp;#34;&amp;gt;from UID {{ message.sender }}&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { props: [&amp;#39;message&amp;#39;, &amp;#39;owner&amp;#39;] }; &amp;lt;/script&amp;gt; &amp;lt;style&amp;gt; .message { background: #dddddd; color: black; margin-left: 10px; margin-right: auto; border-radius: 5px; padding: 12px; display: inline-block; } .from-user { margin-right: 10px; margin-left: auto; background: #91bbff; } .sender { font-size: 0.5rem; } &amp;lt;/style&amp;gt; </description>
    </item>
    
    <item>
      <title>HTTP Client</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-http/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-http/</guid>
      <description>‚ú® Trick - Use VS Code as an HTTP Client Install the Thunder Client extension. You can now sent HTTP requests to your server or API and keep track of the history. This extension replaces tools like Postman.</description>
    </item>
    
    <item>
      <title>Sign In with Apple</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-auth-apple-signin/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-auth-apple-signin/</guid>
      <description>üö® As of April 2020, all native iOS apps that offer social auth methods (Google, Facebook, etc.) MUST also include Apple Sign In as an option. See the official guidance from Apple.
Sign in with Apple Setup Follow the steps outlined below to implement Sign In with Apple in a Flutter iOS app.
This section assumes that you are an Apple Developer member and have an existing team account linked to your iOS app.</description>
    </item>
    
    <item>
      <title>Web Deployment</title>
      <link>https://fireship.io/courses/ionic/deploy-web/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/deploy-web/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Generics</title>
      <link>https://fireship.io/courses/dart/classes-generics/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/classes-generics/</guid>
      <description>What are Generics? Generics are a way to parameterize types. They allow a class to wrap a type, and then use that type in multiple places. For example, we can have a Box class that wraps an double or String type.
file_type_dartlang generics.dart Box&amp;lt;String&amp;gt; box1 = Box(&amp;#39;cool&amp;#39;); Box&amp;lt;double&amp;gt; box2 = Box(2.23); Using Generics in a Class A generic type is a type that can be used as a substitute for a type parameter.</description>
    </item>
    
    <item>
      <title>Realtime Data Hydration</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-hydration/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-hydration/</guid>
      <description>When does hydration need to happen? Hydrate Server Props to Realtime Data The post value will prefer the realtime value, but default to the server rendered content while it is loading.
file_type_js pages/username/slug.js import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; export default function Post(props) { const postRef = firestore.doc(props.path); const [realtimePost] = useDocumentData(postRef); const post = realtimePost || props.post; return ( &amp;lt;main className={styles.container}&amp;gt; &amp;lt;section&amp;gt; &amp;lt;PostContent post={post} /&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;aside className=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;p&amp;gt; &amp;lt;strong&amp;gt;{post.</description>
    </item>
    
    <item>
      <title>React</title>
      <link>https://fireship.io/courses/stripe-js/payments-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/payments-react/</guid>
      <description>React Payments UI Payments.js import React, { useState } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; function Payments() { const stripe = useStripe(); const elements = useElements(); const [amount, setAmount] = useState(0); const [paymentIntent, setPaymentIntent] = useState(); // Create a payment intent on the server const createPaymentIntent = async (event) =&amp;gt; { // Clamp amount to Stripe min/max const validAmount = Math.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://fireship.io/courses/vscode-tricks/ide-docker/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/ide-docker/</guid>
      <description>‚ú® Trick - Dockerized Environment Click the remote button in the bottom left corner, then select Reopen in Container. This will create a Dockerfile and run the container for you. It&amp;rsquo;s a great way to test your code in environments that match your production server runtime.</description>
    </item>
    
    <item>
      <title>iOS Deployment</title>
      <link>https://fireship.io/courses/ionic/deploy-ios/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/deploy-ios/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Custom 404 Page</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-404/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-404/</guid>
      <description>Any page that is server rendered can redirect to a 404 if the data is not available.
file_type_js pages/username/index.js export async function getServerSideProps({ query }) { const { username } = query; const userDoc = await getUserWithUsername(username); // If no user, short circuit to 404 page if (!userDoc) { return { notFound: true, }; } } pages/404.js import Link from &amp;#39;next/link&amp;#39;; export default function Custom404() { return ( &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;404 - That page does not seem to exist.</description>
    </item>
    
    <item>
      <title>Android Deployment</title>
      <link>https://fireship.io/courses/ionic/deploy-android/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/deploy-android/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Metatags for SEO</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-meta-tags/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-meta-tags/</guid>
      <description> Who created the Open Graph Protocol commonly used in metatags? Metatags Component file_type_js components/Metatags.js import Head from &amp;#39;next/head&amp;#39;; export default function Metatags({ title = &amp;#39;The Full Next.js + Firebase Course&amp;#39;, description = &amp;#39;A complete Next.js + Firebase course by Fireship.io&amp;#39;, image = &amp;#39;https://fireship.io/courses/react-next-firebase/img/featured.png&amp;#39;, }) { return ( &amp;lt;Head&amp;gt; &amp;lt;title&amp;gt;{title}&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;#34;twitter:card&amp;#34; content=&amp;#34;summary&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:site&amp;#34; content=&amp;#34;@fireship_dev&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:title&amp;#34; content={title} /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:description&amp;#34; content={description} /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:image&amp;#34; content={image} /&amp;gt; &amp;lt;meta property=&amp;#34;og:title&amp;#34; content={title} /&amp;gt; &amp;lt;meta property=&amp;#34;og:description&amp;#34; content={description} /&amp;gt; &amp;lt;meta property=&amp;#34;og:image&amp;#34; content={image} /&amp;gt; &amp;lt;/Head&amp;gt; ); } </description>
    </item>
    
    <item>
      <title>Message Board Tests</title>
      <link>https://fireship.io/courses/supabase/msg-board/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-board/</guid>
      <description>Look to future in the live version of the site: https://supaship.io
Links to e2e tests for the message board:
https://github.com/fireship-io/supaship.io/blob/course-end-point/e2e/message-board.spec.ts https://github.com/fireship-io/supaship.io/blob/course-end-point/e2e/up-voting.spec.ts e2e/message-board.spec.ts
import test, { expect, Page } from &amp;#34;@playwright/test&amp;#34;; import { createComment, createPost, login, setupE2eTest, signUp, } from &amp;#34;./utils&amp;#34;; const testUserEmail = &amp;#34;test@test.io&amp;#34;; const testUserPassword = &amp;#34;test123567&amp;#34;; const testUserName = &amp;#34;test&amp;#34;; test.describe(&amp;#34;Message Board&amp;#34;, () =&amp;gt; { test.beforeEach(setupE2eTest); test.beforeEach(async ({ page }) =&amp;gt; { page.goto(&amp;#34;http://localhost:1337&amp;#34;); }); test.describe(&amp;#34;not logged in&amp;#34;, () =&amp;gt; { test(&amp;#34;can see message board, but cannot interact&amp;#34;, async ({ page }) =&amp;gt; { const messageBoardSignIn = page.</description>
    </item>
    
    <item>
      <title>Initial Setup</title>
      <link>https://fireship.io/courses/js/app-setup/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-setup/</guid>
      <description>Initial Setup In this lesson, we will create a vanilla JavaScript app with vite. Vite is a fast and lightweight development server that uses native ES modules to serve your code.
The app will also use OpenAI&amp;rsquo;s Image Generation API to create a unique image with its Dalle-2 model.
npm init vite@latest dream cd dream npm install npm run dev </description>
    </item>
    
    <item>
      <title>Basic Firestore</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-firestore/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-firestore/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Database Model</title>
      <link>https://fireship.io/courses/flutter-firebase/firestore-data-model/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/firestore-data-model/</guid>
      <description>In order to build an app identical to the live demo, you need to populate Firestore with data.
Task: Populate your Database with Quiz Data I recommend cloning the Quiz Questions Repo. It is a node script that allows you to populate all the quiz data in your own database with a single command.
At the very least, create the following documents from the schema images below.
One document located at topics/my-topic.</description>
    </item>
    
    <item>
      <title>Pitfalls</title>
      <link>https://fireship.io/courses/vscode-tricks/bonus-vscode-pitfalls/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vscode-tricks/bonus-vscode-pitfalls/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Packages</title>
      <link>https://fireship.io/courses/dart/advanced-packages/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-packages/</guid>
      <description>Namespace packages The easiest way to deal with name conflicts is to use a namespace package.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; as External; Exclude code from a package Exclude code from a package with the hide keyword.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; hide Circle; Isolate code from a package Import individual classes from a package with the show keyword.
file_type_dartlang packages.dart import &amp;#39;somewhere.dart&amp;#39; show Rectangle; </description>
    </item>
    
    <item>
      <title>git reset</title>
      <link>https://fireship.io/courses/git/advanced-reset/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-reset/</guid>
      <description>Unstage all staged files.
command line git reset Rollback to a previous commit, BUT keep your changes in the working directory.
command line git reset &amp;lt;commit-ID&amp;gt; Rollback to a previous commit AND discard all changes. Be careful with this one.
command line git reset &amp;lt;commit-ID&amp;gt; --hard </description>
    </item>
    
    <item>
      <title>Admin Pages</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-auth-guard/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-auth-guard/</guid>
      <description>Client-side security logic will keep your app 100% secure? Auth Check or Route Guard file_type_js components/AuthCheck.js import Link from &amp;#39;next/link&amp;#39;; import { useContext } from &amp;#39;react&amp;#39;; import { UserContext } from &amp;#39;../lib/context&amp;#39;; // Component&amp;#39;s children only shown to logged-in users export default function AuthCheck(props) { const { username } = useContext(UserContext); return username ? props.children : props.fallback || &amp;lt;Link href=&amp;#34;/enter&amp;#34;&amp;gt;You must be signed in&amp;lt;/Link&amp;gt;; } Usage in a Component file_type_js admin/index.</description>
    </item>
    
    <item>
      <title>Unit Testing</title>
      <link>https://fireship.io/courses/firebase-security/testing-setup/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/testing-setup/</guid>
      <description>Create the files test/rules.test.js and test/helpers.js.
Install Jest and the Firebase Testing Package.
command line npm install --save-dev jest @firebase/rules-unit-testing firebase-admin Add the following script.
file_type_npm package.json &amp;#34;scripts&amp;#34;: { &amp;#34;test&amp;#34;: &amp;#34;jest --env=node --forceExit&amp;#34;, }, </description>
    </item>
    
    <item>
      <title>Node.js Quickstart</title>
      <link>https://fireship.io/courses/javascript/node-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/node-basics/</guid>
      <description>Step 1 - What is Node? Node is a runtime that allows you to run JavaScript on the server. Learn more in the how JavaScript works section of this course.
Step 2 - Install Node Follow these instructions to install NodeJS. This course uses Node version 12, nvm install 12.
Step 3 - Hello world Create a JavaScript file.
file_type_js index.js console.log(&amp;#39;hello world&amp;#39;) Run it with node.
command line node .</description>
    </item>
    
    <item>
      <title>Customers and Saved Cards</title>
      <link>https://fireship.io/courses/stripe-js/customers-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Capture Audio</title>
      <link>https://fireship.io/courses/vue/storage-record-voice/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/storage-record-voice/</guid>
      <description>ChatRoom Component Add a voice recorder.
ChatRoom.vue &amp;lt;template&amp;gt; &amp;lt;main class=&amp;#34;section&amp;#34;&amp;gt; &amp;lt;!-- omitted... --&amp;gt; &amp;lt;h5&amp;gt;Record Audio&amp;lt;/h5&amp;gt; &amp;lt;button v-if=&amp;#34;!recorder&amp;#34; @click=&amp;#34;record()&amp;#34; class=&amp;#34;button is-info&amp;#34;&amp;gt;Record Voice&amp;lt;/button&amp;gt; &amp;lt;button v-else @click=&amp;#34;stop()&amp;#34; class=&amp;#34;button is-danger&amp;#34;&amp;gt;Stop&amp;lt;/button&amp;gt; &amp;lt;br /&amp;gt; &amp;lt;audio v-if=&amp;#34;newAudio&amp;#34; :src=&amp;#34;newAudioURL&amp;#34; controls&amp;gt;&amp;lt;/audio&amp;gt; &amp;lt;hr /&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;Login v-else /&amp;gt; &amp;lt;/User&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; import User from &amp;#39;./User.vue&amp;#39;; import ChatMessage from &amp;#39;./ChatMessage.vue&amp;#39;; import Login from &amp;#39;./Login.vue&amp;#39;; import { db, storage } from &amp;#39;../firebase&amp;#39;; export default { components: { User, Login, ChatMessage, }, data() { return { newMessageText: &amp;#39;&amp;#39;, loading: false, messages: [], newAudio: null, recorder: null, } }, computed: { // omitted.</description>
    </item>
    
    <item>
      <title>Kanban Module</title>
      <link>https://fireship.io/courses/angular/kanban-module/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-module/</guid>
      <description>Setup another lazy-loaded feature module for the development of Kanban boards.
command line ng g module kanban --routing ng g component kanban/board-list Add the necessary imports to the kanban module.
file_type_ng_component_ts kanban.module.ts import { NgModule } from &amp;#39;@angular/core&amp;#39;; import { CommonModule } from &amp;#39;@angular/common&amp;#39;; import { KanbanRoutingModule } from &amp;#39;./kanban-routing.module&amp;#39;; import { SharedModule } from &amp;#39;../shared/shared.module&amp;#39;; import { FormsModule } from &amp;#39;@angular/forms&amp;#39;; import { DragDropModule } from &amp;#39;@angular/cdk/drag-drop&amp;#39;; import { MatButtonToggleModule } from &amp;#39;@angular/material/button-toggle&amp;#39;; import { MatDialogModule } from &amp;#39;@angular/material/dialog&amp;#39;; @NgModule({ declarations: [], imports: [ CommonModule, KanbanRoutingModule, SharedModule, FormsModule, DragDropModule, MatDialogModule, MatButtonToggleModule, ] }) export class KanbanModule { } Lazy-load the kanban module.</description>
    </item>
    
    <item>
      <title>Postgres Extensions</title>
      <link>https://fireship.io/courses/supabase/msg-postgres-ext/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-postgres-ext/</guid>
      <description>Postgres ltree documentation: https://www.postgresql.org/docs/current/ltree.html
Adding an extension via sql:
create extension &amp;lt;extension name&amp;gt; </description>
    </item>
    
    <item>
      <title>RESTful APIs</title>
      <link>https://fireship.io/courses/js/app-rest/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-rest/</guid>
      <description> How is a POST request different from a GET request? </description>
    </item>
    
    <item>
      <title>Database Model</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-data-model/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-data-model/</guid>
      <description>In order to build an app identical to the live demo, you need to populate Firestore with data.
Populate your Database with Quiz Data I recommend cloning the Quiz Questions Repo. It is a node script that allows you to populate all the quiz data in your own database with a single command.
Database Model You can also create your own data from scratch. Below you will find screenshots of sample quiz data for each collection.</description>
    </item>
    
    <item>
      <title>JSON Serializable</title>
      <link>https://fireship.io/courses/flutter-firebase/firestore-json-serializable/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/firestore-json-serializable/</guid>
      <description>JSON serializable provides a way to convert a dynamic Firestore Map to strongly typed Dart class instance.
Models Create a file named models.dart in the services folder. Each document or object in the database will be represented by a class.
I would recommend using null-safety for every property, then setting a default value if the property is in fact null in Firestore.
file_type_flutter services/models.dart import &amp;#39;package:json_annotation/json_annotation.dart&amp;#39;; part &amp;#39;models.g.dart&amp;#39;; @JsonSerializable() class Option { String value; String detail; bool correct; Option({this.</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>https://fireship.io/courses/dart/advanced-future/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-future/</guid>
      <description>Create a Future Many APIs in Dart/Flutter return Futures. To simulate an async event, we can create a future that will resolve after a 5 second delay.
file_type_dartlang futures.dart var delay = Future.delayed(Duration(seconds: 5)); Handle a Future A future can either be a success or a error. Use then then to handle a successful resolution and catchError to handle an error.
file_type_dartlang futures.dart delay .then((value) =&amp;gt; print(&amp;#39;I have been waiting&amp;#39;)) .</description>
    </item>
    
    <item>
      <title>git revert</title>
      <link>https://fireship.io/courses/git/advanced-revert/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-revert/</guid>
      <description>Undo a commit with a new commit
command line git revert &amp;lt;commit-ID&amp;gt; -m &amp;#34;reverting last commit&amp;#34; </description>
    </item>
    
    <item>
      <title>Create Data with Firestore</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-create-post/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-create-post/</guid>
      <description>Install Lodash kebabCase command line npm i lodash.kebabcase Firebase Server Timestamp The server timestamp ensures data time-based data will be consistent for all users.
file_type_js lib/firebase.js export const serverTimestamp = firebase.firestore.FieldValue.serverTimestamp; Create a Post The post form will set default values for in Firestore. It will also generate a URI safe slug as the Firebase document ID.
file_type_js posts/admin/index.js import styles from &amp;#39;../../styles/Admin.module.css&amp;#39;; import AuthCheck from &amp;#39;../../components/AuthCheck&amp;#39;; import PostFeed from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Setup &amp; Teardown</title>
      <link>https://fireship.io/courses/firebase-security/testing-helpers/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/testing-helpers/</guid>
      <description>Create a file to manage setup and teardown for tests.
file_type_js helpers.js const { loadFirestoreRules, initializeTestApp, clearFirestoreData, initializeAdminApp } = require(&amp;#39;@firebase/rules-unit-testing&amp;#39;); const { readFileSync } = require(&amp;#39;fs&amp;#39;); module.exports.setup = async (auth, data) =&amp;gt; { const projectId = `fireship-dev-17429`; const app = initializeTestApp({ projectId, auth }); // console.log(app.auth().currentUser) const db = app.firestore(); // Write mock documents before rules if (data) { const admin = initializeAdminApp({ projectId, }); for (const key in data) { const ref = admin.</description>
    </item>
    
    <item>
      <title>Deno Quickstart</title>
      <link>https://fireship.io/courses/javascript/deno-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/deno-basics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/stripe-js/customers-firebase/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-firebase/</guid>
      <description>Learn more about Firestore.
Server Firebase Admin Setup command line npm install firebase-admin Download your service account, then add add it&amp;rsquo;s path as an environment variable.
file_type_config .env GOOGLE_APPLICATION_CREDENTIALS=&amp;#34;./service-account.json&amp;#34; file_type_typescript firebase.ts // Initialize Firebase Admin resources import * as firebaseAdmin from &amp;#39;firebase-admin&amp;#39;; firebaseAdmin.initializeApp(); export const db = firebaseAdmin.firestore(); export const auth = firebaseAdmin.auth(); React Firebase Setup command line npm install firebase reactfire App.js import { FirebaseAppProvider } from &amp;#39;reactfire&amp;#39;; export const firebaseConfig = { // your config }; ReactDOM.</description>
    </item>
    
    <item>
      <title>Upload</title>
      <link>https://fireship.io/courses/vue/storage-upload-file/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/storage-upload-file/</guid>
      <description>Chat Room Component Add file uploads.
ChatRoom.vue &amp;lt;script&amp;gt; import { db, storage } from &amp;#39;../firebase&amp;#39;; export default { data() { return { newMessageText: &amp;#39;&amp;#39;, loading: false, messages: [], newAudio: null, recorder: null, } }, computed: { messagesCollection() { return db.doc(`chats/${this.chatId}`).collection(&amp;#39;messages&amp;#39;); }, newAudioURL() { return URL.createObjectURL(this.newAudio); } }, methods: { // omitted ... async addMessage(uid) { this.loading = true; let audioURL = null; const { id: messageId } = this.messagesCollection.doc(); if (this.</description>
    </item>
    
    <item>
      <title>Firestore Data Model</title>
      <link>https://fireship.io/courses/angular/kanban-firestore-data/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-firestore-data/</guid>
      <description>Model the data in Firestore for the Kanban feature.
Learn more about Data Modeling in Firestore.
Data Model file_type_ng_component_ts board.model.ts export interface Board { id?: string; title?: string; priority?: number; tasks?: Task[]; } export interface Task { description?: string; label?: &amp;#39;purple&amp;#39; | &amp;#39;blue&amp;#39; | &amp;#39;green&amp;#39; | &amp;#39;yellow&amp;#39; | &amp;#39;red&amp;#39; | &amp;#39;gray&amp;#39;; } Firestore Security Rules file_type_firebase firebase rules rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{database}/documents { match /boards/{document} { allow read; allow create: if requestMatchesUID(); allow update: if resourceMatchesUID() &amp;amp;&amp;amp; requestMatchesUID(); allow delete: if resourceMatchesUID(); } function requestMatchesUID() { return request.</description>
    </item>
    
    <item>
      <title>Normalized Data Modeling</title>
      <link>https://fireship.io/courses/supabase/msg-data-model/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-data-model/</guid>
      <description>Link to final state of the original-ddl.sql: https://github.com/fireship-io/supaship.io/blob/course-end-point/supabase/migrations/20221116184131_original-ddl.sql
original-ddl.sql:
create extension ltree; create table user_profiles ( user_id uuid primary key references auth.users (id) not null, username text unique not null CONSTRAINT proper_username CHECK (username ~* &amp;#39;^[a-zA-Z0-9_]+$&amp;#39;) CONSTRAINT username_length CHECK (char_length(username) &amp;gt; 3 and char_length(username) &amp;lt; 15) ); create table posts ( id uuid primary key default uuid_generate_v4() not null, user_id uuid references auth.users (id) not null, created_at timestamp with time zone default now() not null, path ltree not null ); create table post_score ( post_id uuid primary key references posts (id) not null, score int not null ); create table post_contents ( id uuid primary key default uuid_generate_v4() not null, user_id uuid references auth.</description>
    </item>
    
    <item>
      <title>Text-to-Image Server</title>
      <link>https://fireship.io/courses/js/app-server/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-server/</guid>
      <description>Why do we store the API key as an env variable? Server Setup First, make sure to sign up for an OpenAI account and create an API key. Then store the API key in a file named .env. If it&amp;rsquo;s included in your .gitignore, this file will be ignored by Git so that you don&amp;rsquo;t accidentally share your API key with the world.
touch server.js npm i dotenv express cors openai node server.</description>
    </item>
    
    <item>
      <title>Advanced Firestore</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-firestore-advanced/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-firestore-advanced/</guid>
      <description>Data Models Model Firestore data as a Dart class.
file_type_dartlang models.dart class Option { String value; String detail; bool correct; Option({ this.correct, this.value, this.detail }); Option.fromMap(Map data) { value = data[&amp;#39;value&amp;#39;]; detail = data[&amp;#39;detail&amp;#39;] ?? &amp;#39;&amp;#39;; correct = data[&amp;#39;correct&amp;#39;]; } } class Question { String text; List&amp;lt;Option&amp;gt; options; Question({ this.options, this.text }); Question.fromMap(Map data) { text = data[&amp;#39;text&amp;#39;] ?? &amp;#39;&amp;#39;; options = (data[&amp;#39;options&amp;#39;] as List ?? []).map((v) =&amp;gt; Option.fromMap(v)).toList(); } } ///// Database Collections class Quiz { String id; String title; String description; String video; String topic; List&amp;lt;Question&amp;gt; questions; Quiz({ this.</description>
    </item>
    
    <item>
      <title>Basic Data Fetching</title>
      <link>https://fireship.io/courses/flutter-firebase/firestore-fetch/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/firestore-fetch/</guid>
      <description>Data Fetching Create a file named firestore.dart in the services directory of your project.
file_type_flutter firestore.dart import &amp;#39;dart:async&amp;#39;; import &amp;#39;package:cloud_firestore/cloud_firestore.dart&amp;#39;; import &amp;#39;package:rxdart/rxdart.dart&amp;#39;; import &amp;#39;package:quizapp/services/auth.dart&amp;#39;; import &amp;#39;package:quizapp/services/models.dart&amp;#39;; class FirestoreService { final FirebaseFirestore _db = FirebaseFirestore.instance; /// Reads all documments from the topics collection Future&amp;lt;List&amp;lt;Topic&amp;gt;&amp;gt; getTopics() async { var ref = _db.collection(&amp;#39;topics&amp;#39;); var snapshot = await ref.get(); var data = snapshot.docs.map((s) =&amp;gt; s.data()); var topics = data.map((d) =&amp;gt; Topic.fromJson(d)); return topics.toList(); } /// Retrieves a single quiz document Future&amp;lt;Quiz&amp;gt; getQuiz(String quizId) async { var ref = _db.</description>
    </item>
    
    <item>
      <title>Stream</title>
      <link>https://fireship.io/courses/dart/advanced-stream/</link>
      <pubDate>Fri, 08 Oct 2021 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/advanced-stream/</guid>
      <description>Create a Stream A Stream provides a way to handle multiple async events. Simulate a stream of events by creating one from a list of numbers.
file_type_dartlang streams.dart var stream = Stream.fromIterable([1, 2, 3]); By default, a Stream can only have one listener. If you intend to have multiple listeners convert it to a broadcast stream.
file_type_dartlang streams.dart var stream = Stream.fromIterable([1, 2, 3]).asBroadcastStream(); Listen to a Stream Listen to a Stream by subscribing to it with the listen method.</description>
    </item>
    
    <item>
      <title>git commit --amend</title>
      <link>https://fireship.io/courses/git/advanced-amend/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-amend/</guid>
      <description>Update the message on your last commit:
command line git commit --amend -m &amp;#34;better message&amp;#34; Include a file you forgot on your last commit.
command line git add &amp;lt;your-file&amp;gt; git commit --amend --no-edit </description>
    </item>
    
    <item>
      <title>Post Editing Form</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-forms/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-forms/</guid>
      <description>React Hook Form Package command line npm install react-hook-form Check out the official docs
Post Editing Form file_type_js pages/admin/slug.js import styles from &amp;#39;../../styles/Admin.module.css&amp;#39;; import AuthCheck from &amp;#39;../../components/AuthCheck&amp;#39;; import { firestore, auth, serverTimestamp } from &amp;#39;../../lib/firebase&amp;#39;; import { useState } from &amp;#39;react&amp;#39;; import { useRouter } from &amp;#39;next/router&amp;#39;; import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; import { useForm } from &amp;#39;react-hook-form&amp;#39;; import ReactMarkdown from &amp;#39;react-markdown&amp;#39;; import Link from &amp;#39;next/link&amp;#39;; import toast from &amp;#39;react-hot-toast&amp;#39;; export default function AdminPostEdit(props) { return ( &amp;lt;AuthCheck&amp;gt; &amp;lt;PostManager /&amp;gt; &amp;lt;/AuthCheck&amp;gt; ); } function PostManager() { const [preview, setPreview] = useState(false); const router = useRouter(); const { slug } = router.</description>
    </item>
    
    <item>
      <title>Write Tests</title>
      <link>https://fireship.io/courses/firebase-security/testing-rules/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/testing-rules/</guid>
      <description>command line firebase emulators:start file_type_js rules.test.js describe(&amp;#39;Database rules&amp;#39;, () =&amp;gt; { let db; // Applies only to tests in this describe block beforeAll(async () =&amp;gt; { db = await setup(mockUser, mockData); }); afterAll(async () =&amp;gt; { await teardown(); }); test(&amp;#39;deny when reading an unauthorized collection&amp;#39;, async () =&amp;gt; { const ref = db.collection(&amp;#39;secret-stuff&amp;#39;); expect( await assertFails( ref.get() ) ); }); test(&amp;#39;allow admin to read unpublished posts&amp;#39;, async () =&amp;gt; { const ref = db.</description>
    </item>
    
    <item>
      <title>API Authentication</title>
      <link>https://fireship.io/courses/stripe-js/customers-auth/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-auth/</guid>
      <description>SignIn and SignOut in React App.js import firebase from &amp;#39;firebase/app&amp;#39;; import { auth, db } from &amp;#39;./firebase&amp;#39;; export function SignIn() { const signIn = async () =&amp;gt; { const credential = await auth.signInWithPopup( new firebase.auth.GoogleAuthProvider() ); const { uid, email } = credential.user; db.collection(&amp;#39;users&amp;#39;).doc(uid).set({ email }, { merge: true }); }; return ( &amp;lt;button onClick={signIn}&amp;gt; Sign In with Google &amp;lt;/button&amp;gt; ); } export function SignOut(props) { return props.user &amp;amp;&amp;amp; ( &amp;lt;button onClick={() =&amp;gt; auth.</description>
    </item>
    
    <item>
      <title>Wrap up</title>
      <link>https://fireship.io/courses/vue/storage-final-thoughts/</link>
      <pubDate>Wed, 01 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/vue/storage-final-thoughts/</guid>
      <description> Firestore Security Rules Cookbook </description>
    </item>
    
    <item>
      <title>Database Service</title>
      <link>https://fireship.io/courses/angular/kanban-database-service/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-database-service/</guid>
      <description>Separate all database logic into a dedicated service.
Database Service file_type_ng_component_ts database.service.ts import { Injectable } from &amp;#39;@angular/core&amp;#39;; import { AngularFireAuth } from &amp;#39;@angular/fire/auth&amp;#39;; import { AngularFirestore } from &amp;#39;@angular/fire/firestore&amp;#39;; import firebase from &amp;#39;firebase/app&amp;#39;; import { switchMap, map } from &amp;#39;rxjs/operators&amp;#39;; import { Board, Task } from &amp;#39;./board.model&amp;#39;; @Injectable({ providedIn: &amp;#39;root&amp;#39; }) export class BoardService { constructor(private afAuth: AngularFireAuth, private db: AngularFirestore) {} /** * Creates a new board for the current user */ async createBoard(data: Board) { const user = await this.</description>
    </item>
    
    <item>
      <title>Post List</title>
      <link>https://fireship.io/courses/supabase/msg-all-posts/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-all-posts/</guid>
      <description>AllPosts.tsx:
import { useContext, useEffect, useState } from &amp;#34;react&amp;#34;; import { Link, useParams } from &amp;#34;react-router-dom&amp;#34;; import { UserContext } from &amp;#34;./App&amp;#34;; import { castVote } from &amp;#34;./cast-vote&amp;#34;; import { CreatePost } from &amp;#34;./CreatePost&amp;#34;; import { GetPostsResponse } from &amp;#34;./database.types&amp;#34;; import { supaClient } from &amp;#34;./supa-client&amp;#34;; import { timeAgo } from &amp;#34;./time-ago&amp;#34;; import { UpVote } from &amp;#34;./UpVote&amp;#34;; import { usePostScore } from &amp;#34;./use-post-score&amp;#34;; export function AllPosts() { const { session } = useContext(UserContext); const { pageNumber } = useParams(); const [bumper, setBumper] = useState(0); const [posts, setPosts] = useState&amp;lt;GetPostsResponse[]&amp;gt;([]); const [myVotes, setMyVotes] = useState&amp;lt; Record&amp;lt;string, &amp;#34;up&amp;#34; | &amp;#34;down&amp;#34; | undefined&amp;gt; &amp;gt;({}); useEffect(() =&amp;gt; { const queryPageNumber = pageNumber ?</description>
    </item>
    
    <item>
      <title>Rest Client</title>
      <link>https://fireship.io/courses/js/app-rest-client/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-rest-client/</guid>
      <description>Why are REST clients useful? Rest Clients In this lesson, we will use a REST client built into VSCode called ThunderClient to test our API. It is much easier to test requests with a REST client than with a browser or command line. Other popular REST clients include Postman and Insomnia.</description>
    </item>
    
    <item>
      <title>Current User Data in Firestore</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-firestore-user/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-firestore-user/</guid>
      <description>User Data Service Create a generic service that can connect a user to the Firestore related to their UID.
file_type_dartlang db.dart class UserData&amp;lt;T&amp;gt; { final Firestore _db = Firestore.instance; final FirebaseAuth _auth = FirebaseAuth.instance; final String collection; UserData({ this.collection }); Stream&amp;lt;T&amp;gt; get documentStream { return _auth.onAuthStateChanged.switchMap((user) { if (user != null) { Document&amp;lt;T&amp;gt; doc = Document&amp;lt;T&amp;gt;(path: &amp;#39;$collection/${user.uid}&amp;#39;); return doc.streamData(); } else { return Stream&amp;lt;T&amp;gt;.value(null); } }); } Future&amp;lt;T&amp;gt; getDocument() async { FirebaseUser user = await _auth.</description>
    </item>
    
    <item>
      <title>Relational Data Fetching</title>
      <link>https://fireship.io/courses/flutter-firebase/firestore-relational/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/firestore-relational/</guid>
      <description>Relational Data Fetching The pattern below is useful for listening to a realtime stream that depends on the current user&amp;rsquo;s UID. The switchmap extension method from RxDart is an essential tool for combining two streams.
file_type_flutter firestore.dart class FirestoreService { /// Listens to current user&amp;#39;s report document in Firestore Stream&amp;lt;Report&amp;gt; streamReport() { return AuthService().userStream.switchMap((user) { if (user != null) { var ref = _db.collection(&amp;#39;reports&amp;#39;).doc(user.uid); return ref.snapshots().map((doc) =&amp;gt; Report.fromJson(doc.data()!)); } else { return Stream.</description>
    </item>
    
    <item>
      <title>git stash</title>
      <link>https://fireship.io/courses/git/advanced-stash/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-stash/</guid>
      <description>Basic way to create and apply a stash
command line git stash git stash pop Manage your stashes more easily by giving them a name:
command line git stash save coolstuff List out all stashes:
command line git stash list Apply a stash based on its index:
command line git stash apply 1 </description>
    </item>
    
    <item>
      <title>Form Validation</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-form-validation/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-form-validation/</guid>
      <description>Form Validation React Hook Form makes it easy to add reactive form validation.
file_type_js pages/admin/slug.js const { register, handleSubmit, reset, watch, formState, errors } = useForm({ defaultValues, mode: &amp;#39;onChange&amp;#39; }); const { isValid, isDirty } = formState; // ... &amp;lt;textarea name=&amp;#34;content&amp;#34; ref={register({ maxLength: { value: 20000, message: &amp;#39;content is too long&amp;#39; }, minLength: { value: 10, message: &amp;#39;content is too short&amp;#39; }, required: { value: true, message: &amp;#39;content is required&amp;#39;} })}&amp;gt; &amp;lt;/textarea&amp;gt; {errors.</description>
    </item>
    
    <item>
      <title>Debugging Report</title>
      <link>https://fireship.io/courses/firebase-security/testing-report/</link>
      <pubDate>Fri, 20 Nov 2020 10:11:30 -0200</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/testing-report/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Create a Customer</title>
      <link>https://fireship.io/courses/stripe-js/customers-create/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-create/</guid>
      <description>Get or Create a Stripe Customer file_type_typescript customers.ts /** * Gets the exsiting Stripe customer or creates a new record */ export async function getOrCreateCustomer(userId: string, params?: Stripe.CustomerCreateParams) { const userSnapshot = await db.collection(&amp;#39;users&amp;#39;).doc(userId).get(); const { stripeCustomerId, email } = userSnapshot.data(); // If missing customerID, create it if (!stripeCustomerId) { // CREATE new customer const customer = await stripe.customers.create({ email, metadata: { firebaseUID: userId }, ...params }); await userSnapshot.ref.update({ stripeCustomerId: customer.</description>
    </item>
    
    <item>
      <title>CDK Drag and Drop</title>
      <link>https://fireship.io/courses/angular/kanban-drag-drop/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-drag-drop/</guid>
      <description>Use the Angular CDK Drag and Drop Module to enable reordering of Kanban boards and tasks.
Steps Step 1 - Initial Setup command line ng g c kanban/board-list ng g c kanban/board Point the kanban router to the board list
file_type_ng_component_ts kanban-routing.module.ts import { BoardListComponent } from &amp;#39;./board-list/board-list.component&amp;#39;; const routes: Routes = [ { path: &amp;#39;&amp;#39;, component: BoardListComponent } ]; Step 2 - Board List file_type_ng_component_ts board-list.component.ts import { Component, OnInit, OnDestroy } from &amp;#39;@angular/core&amp;#39;; import { CdkDragDrop, moveItemInArray } from &amp;#39;@angular/cdk/drag-drop&amp;#39;; import { Subscription } from &amp;#39;rxjs&amp;#39;; import { Board } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Post Detail</title>
      <link>https://fireship.io/courses/supabase/msg-detail/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-detail/</guid>
      <description>Post.tsx:
import { useContext, useEffect, useMemo, useRef, useState } from &amp;#34;react&amp;#34;; import { useParams } from &amp;#34;react-router-dom&amp;#34;; import { UserContext } from &amp;#34;./App&amp;#34;; import { castVote } from &amp;#34;./cast-vote&amp;#34;; import { GetSinglePostWithCommentResponse } from &amp;#34;./database.types&amp;#34;; import { supaClient } from &amp;#34;./supa-client&amp;#34;; import { timeAgo } from &amp;#34;./time-ago&amp;#34;; import { UpVote } from &amp;#34;./UpVote&amp;#34;; import { usePostScore } from &amp;#34;./use-post-score&amp;#34;; import { SupashipUserInfo } from &amp;#34;./use-session&amp;#34;; export interface Post { id: string; author_name: string; title: string; content: string; score: number; created_at: string; path: string; } export interface Comment { id: string; author_name: string; content: string; score: number; created_at: string; path: string; comments: Comment[]; } interface PostDetailData { post: GetSinglePostWithCommentResponse | null; comments: GetSinglePostWithCommentResponse[]; myVotes?</description>
    </item>
    
    <item>
      <title>Text-to-Image Frontend UI</title>
      <link>https://fireship.io/courses/js/app-frontend/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-frontend/</guid>
      <description>The FormData object is closely related to which built-in JS class? Text-to-Image Frontend Code First, build out the HTML for the UI. It has a placeholder for the image and a simple form with a single textarea element.
file_type_html index.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;link rel=&amp;#34;icon&amp;#34; type=&amp;#34;image/svg+xml&amp;#34; href=&amp;#34;favicon.svg&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Vite App&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;AI Photo Generator&amp;lt;/h1&amp;gt; &amp;lt;div id=&amp;#34;result&amp;#34;&amp;gt; Image will appear here &amp;lt;/div&amp;gt; &amp;lt;form&amp;gt; &amp;lt;label for=&amp;#34;prompt&amp;#34;&amp;gt;Prompt&amp;lt;/label&amp;gt; &amp;lt;textarea name=&amp;#34;prompt&amp;#34; maxlength=&amp;#34;160&amp;#34;&amp;gt;&amp;lt;/textarea&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34;&amp;gt;Dream&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/main&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;/main.</description>
    </item>
    
    <item>
      <title>Write to Firestore</title>
      <link>https://fireship.io/courses/flutter-firebase/firestore-write/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/firestore-write/</guid>
      <description>Writing to Firestore file_type_flutter firestore.dart class FirestoreService { /// Updates the current user&amp;#39;s report document after completing quiz Future&amp;lt;void&amp;gt; updateUserReport(Quiz quiz) { var user = AuthService().user!; var ref = _db.collection(&amp;#39;reports&amp;#39;).doc(user.uid); var data = { &amp;#39;total&amp;#39;: FieldValue.increment(1), &amp;#39;topics&amp;#39;: { quiz.topic: FieldValue.arrayUnion([quiz.id]) } }; return ref.set(data, SetOptions(merge: true)); } } </description>
    </item>
    
    <item>
      <title>git rebase</title>
      <link>https://fireship.io/courses/git/advanced-rebase/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-rebase/</guid>
      <description>Rebase From a feature branch, rebase the latest changes from the master branch.
command line git checkout feature git rebase master </description>
    </item>
    
    <item>
      <title>Image Uploads</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-image-uploads/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-image-uploads/</guid>
      <description>How do you associate a Firebase user to a file upload? Upload State Changed Event file_type_js lib/firebase.js // Storage exports export const storage = firebase.storage(); export const STATE_CHANGED = firebase.storage.TaskEvent.STATE_CHANGED; Image Uploader Component file_type_js components/ImageUploader.js import { useState } from &amp;#39;react&amp;#39;; import { auth, storage, STATE_CHANGED } from &amp;#39;../lib/firebase&amp;#39;; import Loader from &amp;#39;./Loader&amp;#39;; // Uploads images to Firebase Storage export default function ImageUploader() { const [uploading, setUploading] = useState(false); const [progress, setProgress] = useState(0); const [downloadURL, setDownloadURL] = useState(null); // Creates a Firebase Upload Task const uploadFile = async (e) =&amp;gt; { // Get the file const file = Array.</description>
    </item>
    
    <item>
      <title>Save and List Card</title>
      <link>https://fireship.io/courses/stripe-js/customers-save-card/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-save-card/</guid>
      <description>Save and List Credit Cards file_type_typescript customers.ts /** * Creates a SetupIntent used to save a credit card for later use */ export async function createSetupIntent(userId: string) { const customer = await getOrCreateCustomer(userId); return stripe.setupIntents.create({ customer: customer.id, }) } /** * Returns all payment sources associated to the user */ export async function listPaymentMethods(userId: string) { const customer = await getOrCreateCustomer(userId); return stripe.paymentMethods.list({ customer: customer.id, type: &amp;#39;card&amp;#39;, }); } API Endpoints file_type_typescript api.</description>
    </item>
    
    <item>
      <title>Drag and Drop Animation</title>
      <link>https://fireship.io/courses/angular/kanban-animation/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-animation/</guid>
      <description>Animate the the CDK Drag &amp;amp; Drop elements using CSS transitions.
Full Styles board.scss boards-list.scss Animation Styles Board List file_type_html board-list.component.scss .cdk-drag-placeholder { opacity: 0.2; width: 350px; border: 5px dashed gray; margin: 0 10px; } .cdk-drag-animating { transition: transform 300ms ease; } .cdk-drop-list-dragging .cdk-drag { transition: transform 300ms ease; } Board file_type_html board.component.scss .cdk-drag-placeholder { opacity: 0.5; } .cdk-drag-animating { transition: transform 300ms ease; } .cdk-drop-list-dragging .cdk-drag { transition: transform 300ms ease; } .</description>
    </item>
    
    <item>
      <title>Upvotes</title>
      <link>https://fireship.io/courses/supabase/msg-upvotes/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/msg-upvotes/</guid>
      <description>cast-vote.ts:
import { supaClient } from &amp;#34;./supa-client&amp;#34;; export async function castVote({ postId, userId, voteType, onSuccess = () =&amp;gt; {}, }: { postId: string; userId: string; voteType: &amp;#34;up&amp;#34; | &amp;#34;down&amp;#34;; onSuccess?: () =&amp;gt; void; }) { await supaClient.from(&amp;#34;post_votes&amp;#34;).upsert( { post_id: postId, user_id: userId, vote_type: voteType, }, { onConflict: &amp;#34;post_id,user_id&amp;#34; } ); onSuccess(); } use-post-score.ts
import { RealtimeChannel } from &amp;#34;@supabase/supabase-js&amp;#34;; import { useEffect, useState } from &amp;#34;react&amp;#34;; import { supaClient } from &amp;#34;.</description>
    </item>
    
    <item>
      <title>Loading Spinner</title>
      <link>https://fireship.io/courses/js/app-loader/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-loader/</guid>
      <description> What state should a button typically be in when the app performing an async operation? Let&amp;rsquo;s add a loading indicator to our UI that replaces the text inside the submit button.
Loading Code function showSpinner() { const button = document.querySelector(&amp;#39;button&amp;#39;); button.disabled = true; button.innerHTML = &amp;#39;Dreaming... &amp;lt;span class=&amp;#34;spinner&amp;#34;&amp;gt;üß†&amp;lt;/span&amp;gt;&amp;#39;; } function hideSpinner() { const button = document.querySelector(&amp;#39;button&amp;#39;); button.disabled = false; button.innerHTML = &amp;#39;Dream&amp;#39;; } </description>
    </item>
    
    <item>
      <title>Squash</title>
      <link>https://fireship.io/courses/git/advanced-squash/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-squash/</guid>
      <description>Start an interactive rebase from a feature, then choose the squash commend to flatten your commits into a single message.
command line git rebase master --interactive </description>
    </item>
    
    <item>
      <title>Dialogs</title>
      <link>https://fireship.io/courses/angular/kanban-dialogs/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-dialogs/</guid>
      <description>Use Material dialogs to create and update the data associated with boards and tasks.
Steps Generate the Dialogs command line ng g c kanban/dialogs/board-dialog --flat --entry-component -s -t ng g c kanban/dialogs/task-dialog --flat --entry-component -s -t Step 2 - Board Dialog Create the board dialog component.
file_type_ng_component_ts board-dialog.component.ts import { Component, Inject } from &amp;#39;@angular/core&amp;#39;; import { MatDialogRef, MAT_DIALOG_DATA } from &amp;#39;@angular/material/dialog&amp;#39;; @Component({ selector: &amp;#39;app-board-dialog&amp;#39;, template: ` &amp;lt;h1 mat-dialog-title&amp;gt;Board&amp;lt;/h1&amp;gt; &amp;lt;div mat-dialog-content&amp;gt; &amp;lt;p&amp;gt;What shall we call this board?</description>
    </item>
    
    <item>
      <title>Error Handling</title>
      <link>https://fireship.io/courses/js/app-error-handling/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/app-error-handling/</guid>
      <description>What is the usual way to handle errors in an async function? Server Error Handling Errors can happen on the server when the user submits bad data from the form. Let&amp;rsquo;s catch the errors and send a useful message back to the client.
app.post(&amp;#39;/dream&amp;#39;, async (req, res) =&amp;gt; { try { // main code here } catch (error) { console.error(error) res.status(500).send(error?.response.data.error.message || &amp;#39;Something went wrong&amp;#39;); } }); Frontend Error Handling When the server fails, we can check the response status and display an error message to the user.</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://fireship.io/courses/git/advanced-actions/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-actions/</guid>
      <description>Also see the GitHub Actions Guide</description>
    </item>
    
    <item>
      <title>Delete Button</title>
      <link>https://fireship.io/courses/angular/kanban-delete-button/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/kanban-delete-button/</guid>
      <description>Create a delete button that confirms the operation before sending the write to the database.
Steps Step 1 - Generate the Component command line ng g c shared/delete-button Step 2 - Delete Button Component The delete button component is just UI (dumb component), meaning it only emits an event with the user&amp;rsquo;s delete intention. The parent component handles the actual database write.
file_type_ng_component_ts delete-button.component.ts import { Component, Output, EventEmitter } from &amp;#39;@angular/core&amp;#39;; @Component({ selector: &amp;#39;app-delete-button&amp;#39;, templateUrl: &amp;#39;.</description>
    </item>
    
    <item>
      <title>Advanced Git Tips</title>
      <link>https://fireship.io/courses/git/advanced-bonus-tips/</link>
      <pubDate>Sun, 05 Sep 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/git/advanced-bonus-tips/</guid>
      <description>Let&amp;rsquo;s wrap up the course with a fun breakdown of some advanced git techniques that will increase your producivity.</description>
    </item>
    
    <item>
      <title>React</title>
      <link>https://fireship.io/courses/stripe-js/customers-react/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/customers-react/</guid>
      <description>App.js import React, { useState, useEffect, Suspense } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { useUser, AuthCheck } from &amp;#39;reactfire&amp;#39;; import firebase from &amp;#39;firebase/app&amp;#39;; import { auth, db } from &amp;#39;./firebase&amp;#39;; function SaveCard(props) { const stripe = useStripe(); const elements = useElements(); const user = useUser(); const [setupIntent, setSetupIntent] = useState(); const [wallet, setWallet] = useState([]); // Get the user&amp;#39;s wallet on mount useEffect(() =&amp;gt; { getWallet(); }, [user]); // Create the setup intent const createSetupIntent = async (event) =&amp;gt; { const si = await fetchFromAPI(&amp;#39;wallet&amp;#39;); setSetupIntent(si); }; // Handle the submission of card details const handleSubmit = async (event) =&amp;gt; { event.</description>
    </item>
    
    <item>
      <title>Database Deployment</title>
      <link>https://fireship.io/courses/supabase/deploy-db/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/deploy-db/</guid>
      <description>Command to link to your production db (requires your DB password and your access token):
npx supabase link --project-ref=&amp;lt;ref in your supabase url&amp;gt; --password=&amp;lt;db password&amp;gt; Link to create a new access token: https://app.supabase.com/account/tokens
Command to store your access token:
npx supabase login Command to push your local migrations to production (requires DB password):
npx supabase db push Command to generate new migration file on your local instance:
npx supabase migration new &amp;lt;migration name&amp;gt; Command to check what migrations will be pushed before you push them (requires DB password):</description>
    </item>
    
    <item>
      <title>JavaScript for the Haters</title>
      <link>https://fireship.io/courses/js/bonus-haters/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/bonus-haters/</guid>
      <description>Coming Soon&amp;hellip; JavaScript for the Haters will drop on Thanksgiving, November 24th, 2022.</description>
    </item>
    
    <item>
      <title>Topics Grid</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-screen/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-screen/</guid>
      <description>GridView First, use a FutureBuilder to load the collection query.
Second, use a Flutter GridView to display the topics from Firestore in a scrollable two-column grid.
file_type_flutter topics.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:font_awesome_flutter/font_awesome_flutter.dart&amp;#39;; import &amp;#39;package:quizapp/services/services.dart&amp;#39;; import &amp;#39;package:quizapp/shared/shared.dart&amp;#39;; import &amp;#39;package:quizapp/topics/topic_item.dart&amp;#39;; class TopicsScreen extends StatelessWidget { const TopicsScreen({super.key}); @override Widget build(BuildContext context) { return FutureBuilder&amp;lt;List&amp;lt;Topic&amp;gt;&amp;gt;( future: FirestoreService().getTopics(), builder: (context, snapshot) { if (snapshot.connectionState == ConnectionState.waiting) { return const LoadingScreen(); } else if (snapshot.hasError) { return Center( child: ErrorMessage(message: snapshot.</description>
    </item>
    
    <item>
      <title>Topics Screen</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-topic-screen/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-topic-screen/</guid>
      <description>Reference the Topics Screen Source on Github</description>
    </item>
    
    <item>
      <title>Hearts, Likes, Claps</title>
      <link>https://fireship.io/courses/react-next-firebase/hearts-create/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/hearts-create/</guid>
      <description>Heart Button file_type_js components/HeartButton.js import { firestore, auth, increment } from &amp;#39;../lib/firebase&amp;#39;; import { useDocument } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; // Allows user to heart or like a post export default function Heart({ postRef }) { // Listen to heart document for currently logged in user const heartRef = postRef.collection(&amp;#39;hearts&amp;#39;).doc(auth.currentUser.uid); const [heartDoc] = useDocument(heartRef); // Create a user-to-post relationship const addHeart = async () =&amp;gt; { const uid = auth.currentUser.uid; const batch = firestore.</description>
    </item>
    
    <item>
      <title>Billing</title>
      <link>https://fireship.io/courses/stripe-js/billing-intro/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-intro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Server-side Rendering - What? Why? How?</title>
      <link>https://fireship.io/courses/angular/ssr-concepts/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/ssr-concepts/</guid>
      <description>Determine the best rendering strategy for your use-case. You may not need SSR at all if the app does not care about search engine bots or social media link bots.
Strategies Server-side Rendering (SSR) Renders the app on every request Requires a NodeJS server Prerendering Renders the app at build-time Can be deployed to Firebase Hosting Routes must be known in advance </description>
    </item>
    
    <item>
      <title>Authentication Deployment</title>
      <link>https://fireship.io/courses/supabase/deploy-auth/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/deploy-auth/</guid>
      <description> Link to Supabase auth providers: https://supabase.com/docs/guides/auth Link to Supaship GCP OAuth walktrhough (with timestamp): https://www.youtube.com/watch?v=tUm1AlaMcMQ&amp;amp;t=350s Supabase Google Guide: https://supabase.com/docs/guides/auth/auth-google </description>
    </item>
    
    <item>
      <title>Hero Animation</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-hero-animation/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-hero-animation/</guid>
      <description>Hero Animation Example file_type_dartlang topics.dart class TopicScreen extends StatelessWidget { final Topic topic; TopicScreen({this.topic}); @override Widget build(BuildContext context) { return Scaffold( /// ... body: ListView(children: [ Hero( tag: topic.img, child: Image.asset(&amp;#39;assets/covers/${topic.img}&amp;#39;, width: MediaQuery.of(context).size.width), ), /// ... ]), ); } } </description>
    </item>
    
    <item>
      <title>Hero Animation</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-hero-animation/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-hero-animation/</guid>
      <description>Task: Image Assets Grab the image assets from the full source code and copy them into the assets folder in your project. Update the pubspec.yaml file to include the image assets.
file_type_flutter pubspec.yaml flutter: uses-material-design: true assets: - assets/ - assets/covers/ - assets/congrats.gif Topic Card Create a file called topic_item.dart in the topics folder. Create a card to represent an individual topic.
file_type_dartlang topics_item.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:quizapp/services/models.dart&amp;#39;; import &amp;#39;package:quizapp/shared/progress_bar.dart&amp;#39;; class TopicItem extends StatelessWidget { final Topic topic; const TopicItem({super.</description>
    </item>
    
    <item>
      <title>Create a Subscription</title>
      <link>https://fireship.io/courses/stripe-js/billing-create-subscription/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-create-subscription/</guid>
      <description>Webhooks NOTE. I also highly recommend listening to the customer.subscription.created to update Firestore when a new subscription is created and/or customer.subscription.deleted for cancellations. See the full source code for implementation examples.
Create a Subscription for Existing Customer file_type_typescript billing.ts import { stripe } from &amp;#39;./&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; import { getOrCreateCustomer } from &amp;#39;./customers&amp;#39;; import { firestore } from &amp;#39;firebase-admin&amp;#39;; /** * Attaches a payment method to the Stripe customer, * subscribes to a Stripe plan, and saves the plan to Firestore */ export async function createSubscription( userId: string, plan: string, payment_method: string ) { const customer = await getOrCreateCustomer(userId); // Attach the payment method to the customer await stripe.</description>
    </item>
    
    <item>
      <title>SEO Service</title>
      <link>https://fireship.io/courses/angular/ssr-seo-service/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/ssr-seo-service/</guid>
      <description>Create a customers module that uses dynamic routing and generates SEO metatags based on a Firestore document query.
Steps Generate Resources command line ng g module customers --routing ng g c customers/detail-page ng g c customers/list-page ng g s services/seo Routing file_type_ng_component_ts customers-routing.module.ts import { NgModule } from &amp;#39;@angular/core&amp;#39;; import { Routes, RouterModule } from &amp;#39;@angular/router&amp;#39;; import { ListPageComponent } from &amp;#39;./list-page/list-page.component&amp;#39;; import { DetailPageComponent } from &amp;#39;./detail-page/detail-page.component&amp;#39;; const routes: Routes = [ { path: &amp;#39;&amp;#39;, component: ListPageComponent }, { path: &amp;#39;:id&amp;#39;, component: DetailPageComponent } ]; @NgModule({ imports: [RouterModule.</description>
    </item>
    
    <item>
      <title>Animated Progress Bar</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-animated-progressbar/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-animated-progressbar/</guid>
      <description>Reference the Animated Progress Bar source</description>
    </item>
    
    <item>
      <title>Stream Provider</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-stream-provider/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-stream-provider/</guid>
      <description>Stream Provider Update the main.dart file to wrap the MaterialApp with a StreamProvider widget. It will listen to the Firestore document and update the widget tree when the document&amp;rsquo;s data changes.
file_type_flutter main.dart // ... import &amp;#39;package:provider/provider.dart&amp;#39;; import &amp;#39;package:quizapp/services/services.dart&amp;#39;; // ... return StreamProvider( create: (_) =&amp;gt; FirestoreService().streamReport(), initialData: Report(), child: MaterialApp( // .. ), ); </description>
    </item>
    
    <item>
      <title>Cancel a Subscription</title>
      <link>https://fireship.io/courses/stripe-js/billing-cancel-subscription/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-cancel-subscription/</guid>
      <description>List and Cancel Subscriptions file_type_typescript index.ts /** * Cancels an active subscription, syncs the data in Firestore */ export async function cancelSubscription( userId: string, subscriptionId: string ) { const customer = await getOrCreateCustomer(userId); if (customer.metadata.firebaseUID !== userId) { throw Error(&amp;#39;Firebase UID does not match Stripe Customer&amp;#39;); } const subscription = await stripe.subscriptions.del(subscriptionId); // Cancel at end of period // const subscription = stripe.subscriptions.update(subscriptionId, { cancel_at_period_end: true }); if (subscription.status === &amp;#39;canceled&amp;#39;) { await db .</description>
    </item>
    
    <item>
      <title>Angular Universal with NestJS</title>
      <link>https://fireship.io/courses/angular/ssr-nest/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/ssr-nest/</guid>
      <description>Create a server module using Angular Universal with the NestJS schematic.
Nest Universal Schematic
Steps Add Universal and Nest command line ng add @nestjs/ng-universal npm run build:ssr npm run serve:ssr file_type_ng_component_ts server/main.ts import { NestFactory } from &amp;#39;@nestjs/core&amp;#39;; import { ApplicationModule } from &amp;#39;./app.module&amp;#39;; async function bootstrap() { const app = await NestFactory.create(ApplicationModule); app.setGlobalPrefix(&amp;#39;api&amp;#39;); await app.listen(process.env.PORT || 8080); // &amp;lt;-- update this line } bootstrap(); </description>
    </item>
    
    <item>
      <title>Web Deployment</title>
      <link>https://fireship.io/courses/supabase/deploy-web/</link>
      <pubDate>Sun, 20 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/supabase/deploy-web/</guid>
      <description>Netlify: https://app.netlify.com/
Your public/netlify.toml file:
[[redirects]] from = &amp;#34;/*&amp;#34; to = &amp;#34;/index.html&amp;#34; status = 200 </description>
    </item>
    
    <item>
      <title>Dynamic Drawer</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-drawer/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-drawer/</guid>
      <description>Drawer Create a new file named drawer.dart in the topics directory. It will be attached to the Scaffold on the topics screen to easily navigate to any quiz in the app.
file_type_flutter drawer.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:font_awesome_flutter/font_awesome_flutter.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; import &amp;#39;package:quizapp/quiz/quiz.dart&amp;#39;; import &amp;#39;package:quizapp/services/models.dart&amp;#39;; class TopicDrawer extends StatelessWidget { final List&amp;lt;Topic&amp;gt; topics; const TopicDrawer({ Key? key, required this.topics}) : super(key: key); @override Widget build(BuildContext context) { return Drawer( child: ListView.separated( shrinkWrap: true, itemCount: topics.</description>
    </item>
    
    <item>
      <title>Quiz State Management</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-quiz-state/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-quiz-state/</guid>
      <description>State Management with Provider Manage the state of the quiz with the Provider ChangeNotifier.
file_type_dartlang main.dart import &amp;#39;../services/services.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; // Shared Data class QuizState with ChangeNotifier { double _progress = 0; Option _selected; final PageController controller = PageController(); get progress =&amp;gt; _progress; get selected =&amp;gt; _selected; set progress(double newValue) { _progress = newValue; notifyListeners(); } set selected(Option newValue) { _selected = newValue; notifyListeners(); } void nextPage() async { await controller.</description>
    </item>
    
    <item>
      <title>Recurring Payments</title>
      <link>https://fireship.io/courses/stripe-js/billing-recurring/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-recurring/</guid>
      <description>Subscription Billing Webhook Examples file_type_typescript billing.ts import { stripe } from &amp;#39;./&amp;#39;; import Stripe from &amp;#39;stripe&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import { firestore } from &amp;#39;firebase-admin&amp;#39;; /** * Business logic for specific webhook event types */ const webhookHandlers = { &amp;#39;payment_intent.succeeded&amp;#39;: async (data: Stripe.PaymentIntent) =&amp;gt; { // Add your business logic here }, &amp;#39;payment_intent.payment_failed&amp;#39;: async (data: Stripe.PaymentIntent) =&amp;gt; { // Add your business logic here }, &amp;#39;customer.subscription.deleted&amp;#39;: async (data: Stripe.</description>
    </item>
    
    <item>
      <title>Prerendering</title>
      <link>https://fireship.io/courses/angular/ssr-prerendering/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/ssr-prerendering/</guid>
      <description>Create a script that can prerender specific routes using Angular Universal.
Note, make sure you have enabled Universal with the schematic from the previous video or with ng add @nestjs/ng-universal.
command line npm install --save-dev fs-extra http-server@0.9.0 package.json Scripts Add the following scripts to your package.json.
file_type_npm package.json // ... &amp;#34;scripts&amp;#34;: { &amp;#34;build:prerender&amp;#34;: &amp;#34;npm run build:client-and-server-bundles &amp;amp;&amp;amp; node prerender.js&amp;#34;, &amp;#34;serve:prerender&amp;#34;: &amp;#34;http-server dist/browser -c-1&amp;#34; } Prerender Script file_type_js prerender.js require(&amp;#39;zone.js/dist/zone-node&amp;#39;); require(&amp;#39;reflect-metadata&amp;#39;); const { join } = require(&amp;#39;path&amp;#39;); const { enableProdMode } = require(&amp;#39;@angular/core&amp;#39;); // Import module map for lazy loading const { provideModuleMap } = require(&amp;#39;@nguniversal/module-map-ngfactory-loader&amp;#39;); const { renderModuleFactory } = require(&amp;#39;@angular/platform-server&amp;#39;); // leave this as require(), imported via webpack const { AppServerModuleNgFactory, LAZY_MODULE_MAP } = require(`.</description>
    </item>
    
    <item>
      <title>User Profile</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-profile/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-profile/</guid>
      <description>Profile Page Customize your profile screen with the total quiz score.
file_type_flutter profile.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; import &amp;#39;package:quizapp/services/services.dart&amp;#39;; class ProfileScreen extends StatelessWidget { const ProfileScreen({super.key}); @override Widget build(BuildContext context) { var report = Provider.of&amp;lt;Report&amp;gt;(context); var user = AuthService().user; if (user != null) { // add your UI here } } } </description>
    </item>
    
    <item>
      <title>Angular Universal on Google Cloud Run</title>
      <link>https://fireship.io/courses/angular/ssr-deploy-cloud-run/</link>
      <pubDate>Tue, 16 Jul 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/ssr-deploy-cloud-run/</guid>
      <description>Deploy Angular Universal to Google Cloud Run and connect it to Firebase hosting. Make sure Google Cloud SDK is installed on your local machine. Cloud Run is a solid choice, because it gives you a fully-managed &amp;ldquo;serverless&amp;rdquo; runtime using a Docker container - not to mention a generous free tier.
Dockerize the App file_type_docker Dockerfile FROM node:10 WORKDIR usr/src/app COPY package*.json ./ RUN npm install # Copy local angular/nest code to the container COPY .</description>
    </item>
    
    <item>
      <title>Animated Progress Bar</title>
      <link>https://fireship.io/courses/flutter-firebase/topics-progress-bar/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/topics-progress-bar/</guid>
      <description>Animated Progress Bar Use a Stack to create a custom animated progress bar.
file_type_flutter shared/progress_bar.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:quizapp/services/models.dart&amp;#39;; import &amp;#39;package:provider/provider.dart&amp;#39;; class AnimatedProgressbar extends StatelessWidget { final double value; final double height; const const AnimatedProgressbar({super.key, required this.value, this.height = 12}); @override Widget build(BuildContext context) { return LayoutBuilder( builder: (BuildContext context, BoxConstraints box) { return Container( padding: const EdgeInsets.all(10), width: box.maxWidth, child: Stack( children: [ Container( height: height, decoration: BoxDecoration( color: Theme.</description>
    </item>
    
    <item>
      <title>Quiz PageView</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/project-quiz-pageview/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/project-quiz-pageview/</guid>
      <description>Reference the Quiz.dart source</description>
    </item>
    
    <item>
      <title>Billing with React</title>
      <link>https://fireship.io/courses/stripe-js/billing-react/</link>
      <pubDate>Tue, 28 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/billing-react/</guid>
      <description>Subscriptions.js import React, { useState, useEffect, Suspense } from &amp;#39;react&amp;#39;; import { fetchFromAPI } from &amp;#39;./helpers&amp;#39;; import { CardElement, useStripe, useElements } from &amp;#39;@stripe/react-stripe-js&amp;#39;; import { useUser, AuthCheck } from &amp;#39;reactfire&amp;#39;; import { db } from &amp;#39;./firebase&amp;#39;; import { SignIn, SignOut } from &amp;#39;./Customers&amp;#39;; // Shows user document in Firestore function UserData(props) { const [data, setData] = useState({}); // Subscribe to the user&amp;#39;s data in Firestore useEffect( () =&amp;gt; { const unsubscribe = db.</description>
    </item>
    
    <item>
      <title>Google Play</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/release-android/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/release-android/</guid>
      <description></description>
    </item>
    
    <item>
      <title>State Management with Provider</title>
      <link>https://fireship.io/courses/flutter-firebase/quiz-state/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/quiz-state/</guid>
      <description>Quiz State Define a class that contains the data required by the UI. Add getters and setters for the data, making sure to call notifyListeners() when the data changes.
file_type_flutter quiz/quiz_state.dart import &amp;#39;package:flutter/material.dart&amp;#39;; import &amp;#39;package:quizapp/services/models.dart&amp;#39;; class QuizState with ChangeNotifier { double _progress = 0; Option? _selected; double get progress =&amp;gt; _progress; Option? get selected =&amp;gt; _selected; set progress(double newValue) { _progress = newValue; notifyListeners(); } set selected(Option? newValue) { _selected = newValue; notifyListeners(); } } Provider Now that we have our state, we need to make it available to widgets that depend on it.</description>
    </item>
    
    <item>
      <title>Backend Security</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-security/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-security/</guid>
      <description>Complete Firestore Rules file_type_firebase firestore.rules rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { // Required for collection group queries match /posts/{postId} { allow read; } match /users/{userId} { allow read; allow create: if isValidUser(userId); } match /usernames/{username} { allow read; allow create: if isValidUsername(username); } match /users/{userId}/posts/{postId} { allow read; allow create: if canCreatePost(userId); allow update: if canUpdatePost(userId) || canIncrementHearts(userId, postId); allow delete: if request.auth.uid == userId; } match /users/{userId}/posts/{postId}/hearts/{heartId} { allow read; allow write: if request.</description>
    </item>
    
    <item>
      <title>Apple App Store</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/release-ios/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/release-ios/</guid>
      <description>Official iOS Release Docs</description>
    </item>
    
    <item>
      <title>Dynamic Screens</title>
      <link>https://fireship.io/courses/flutter-firebase/quiz-page-view/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/quiz-page-view/</guid>
      <description>Page View In the quiz screen, update the Scaffold to use a PageView.
file_type_flutter quiz.dart return Scaffold( appBar: AppBar( title: AnimatedProgressbar(value: state.progress), leading: IconButton( icon: const Icon(FontAwesomeIcons.xmark), onPressed: () =&amp;gt; Navigator.pop(context), ), ), body: PageView.builder( physics: const NeverScrollableScrollPhysics(), scrollDirection: Axis.vertical, controller: state.controller, onPageChanged: (int idx) =&amp;gt; state.progress = (idx / (quiz.questions.length + 1)), itemBuilder: (BuildContext context, int idx) { if (idx == 0) { return StartPage(quiz: quiz); } else if (idx == quiz.</description>
    </item>
    
    <item>
      <title>Vercel Deployment</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-vercel/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-vercel/</guid>
      <description>Which cloud provider does Vercel primarily use under the hood? Vercel is the company behind Next.js and their platform is highly optimized for it. Create a free Vercel account to deploy your code.
Note: When deploying to Vercel remember to add your vercel deployment domain to the authorized domains within your firebase app project, to ensure that your Google Sign-In works. Add the domain in the format {ProjectName}.vercel.app as an Authorized Domain under Authentication / Sign-in method / Authorized Domains</description>
    </item>
    
    <item>
      <title>Bottom Sheet</title>
      <link>https://fireship.io/courses/flutter-firebase/quiz-bottom-sheet/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/quiz-bottom-sheet/</guid>
      <description>Quiz Bottom Sheet The QuestionPage implements a method that creates a modal bottom sheet to tell the user if their answer was correct or not.
file_type_flutter quiz.dart class QuestionPage extends StatelessWidget { final Question question; const QuestionPage({super.key, required this.question}); @override Widget build(BuildContext context) { var state = Provider.of&amp;lt;QuizState&amp;gt;(context); return Column( mainAxisAlignment: MainAxisAlignment.end, children: [ Expanded( child: Container( padding: const EdgeInsets.all(16), alignment: Alignment.center, child: Text(question.text), ), ), Container( padding: const EdgeInsets.all(20), child: Column( mainAxisAlignment: MainAxisAlignment.</description>
    </item>
    
    <item>
      <title>Firebase Deployment</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-firebase/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-firebase/</guid>
      <description>Deploy as Static Site Note: This method works for static sites that use getStaticProps ONLY. Deployment with full SSR requires cloud functions or some other form of a backend server.
command line firebase init hosting # select /out as your hosting directory next build next export firebase deploy --only hosting Deployment with SSR See the custom server docs for a general idea of the process.</description>
    </item>
    
    <item>
      <title>Google Play</title>
      <link>https://fireship.io/courses/flutter-firebase/release-android/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/release-android/</guid>
      <description>Official Android Flutter Relese Guide</description>
    </item>
    
    <item>
      <title>Apple App Store</title>
      <link>https://fireship.io/courses/flutter-firebase/release-ios/</link>
      <pubDate>Thu, 11 Nov 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/release-ios/</guid>
      <description>Official iOS Release Docs</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://fireship.io/courses/stripe-js/deployment-docker/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/deployment-docker/</guid>
      <description>Dockerize command line docker build -t fireship/stripe-server . docker run -p 3333:3333 fireship/stripe-server Deploy to Cloud Run Push the container to Container Registry.
command line gcloud config set project &amp;lt;PROJECT_ID&amp;gt; gcloud builds submit --tag gcr.io/PROJECT_ID/stripe-server Then follow the steps in the video to create a Cloud Run Service.</description>
    </item>
    
    <item>
      <title>Firebase Cloud Functions</title>
      <link>https://fireship.io/courses/stripe-js/deployment-cloud-functions/</link>
      <pubDate>Mon, 20 Apr 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/stripe-js/deployment-cloud-functions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Carta de achamento da America Portuguesa</title>
      <link>https://fireship.io/lessons/ffmpeg-useful-techniques/</link>
      <pubDate>Wed, 01 Mar 2023 13:08:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ffmpeg-useful-techniques/</guid>
      <description>Sobre a carta de Achamento do Brasil Quest√µes 1. Como s√£o descritos os Amer√≠ndios? Pardos Bons rostos, bons narizes; Bem feitos. Sem-vergonhas(literalmente) 2. Que presentes lhe s√£o dados Galinha(s) Ramal Sombreiro 3. Como se chamava o piloto? Afonso Lopes 4. Qual a import√¢ncia dos pilotos neste texto? Eram o primeiro √† tomar iniciativa nas expedi√ß√µes. 5. √∏ 6.Que costumes distintos surpreendem os portugues? Nudez &amp;amp; inoc√™ncia. 7. Como √© descrito o capit√£o Bem vestido, usava joias ¬´ &amp;ldquo;(&amp;hellip;), com um colar de ouro mui grande ao pesco√ßo(&amp;hellip;) &amp;quot; ¬ª 8.</description>
    </item>
    
    <item>
      <title>Pocketbase Chat App</title>
      <link>https://fireship.io/lessons/pocketbase-chat-app/</link>
      <pubDate>Sat, 17 Dec 2022 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pocketbase-chat-app/</guid>
      <description>In the following tutorial we will build a chat app with Pocketbase and Svelte. Pocketbase is a backend (inspired by Firebase) structured as a single executable file. It provides a realtime DB based on SQLite and user authentication system that allows us to quickly prototype and deploy a chat app.
Pocketbase Setup Serve it Locally First, download pocketbase then run the executable locally with ./pocketbase serve. You should have access to an admin dashboard that looks like this:</description>
    </item>
    
    <item>
      <title>Setup Node with TypeScript</title>
      <link>https://fireship.io/lessons/typescript-nodejs-setup/</link>
      <pubDate>Sat, 26 Nov 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-nodejs-setup/</guid>
      <description>The following lesson demonstrates how to setup a Node.js (v18)project with TypeScript when using ES Modules. TS version 4.7 introduced a new NodeNext compliler option that can translate ES Modules to CommonJS modules. It simplifies the setup process for Node.js projects, but there are important caveats to be aware of.
More about ES Modules in TS from the TypeScript docs.
Setup Package.json Module Type npm init -y npm install -D typescript @types/node Update the package.</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://fireship.io/privacy/</link>
      <pubDate>Sun, 11 Sep 2022 08:36:36 -0700</pubDate>
      
      <guid>https://fireship.io/privacy/</guid>
      <description>Privacy Policy Fireship.io (&amp;ldquo;Fireship&amp;rdquo; &amp;ldquo;we&amp;rdquo; or &amp;ldquo;us&amp;rdquo;) is committed to protecting your privacy. This Privacy Policy explains the methods and reasons we collect, use, disclose, transfer, and store your information. If you have any questions about the contents of this policy, don‚Äôt hesitate to contact us.
If you do not consent to the collection and use of information from or about you in accordance with this Privacy Policy, then you are not permitted to use Fireship or any services provided on https://fireship.</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>https://fireship.io/terms/</link>
      <pubDate>Sun, 11 Sep 2022 08:36:36 -0700</pubDate>
      
      <guid>https://fireship.io/terms/</guid>
      <description>Terms &amp;amp;&amp;amp; Conditions By accessing this website, you are agreeing to be bound by these website Terms and Conditions of Use, all applicable laws and regulations, and agree that you are responsible for compliance with any applicable local laws. If you do not agree with any of these terms, you are prohibited from using or accessing this site. The materials contained in this website are protected by applicable copyright and trademark law.</description>
    </item>
    
    <item>
      <title>Realtime SSR with Nuxt3 and Firebase</title>
      <link>https://fireship.io/lessons/nuxt-3-firebase/</link>
      <pubDate>Thu, 28 Apr 2022 12:14:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/nuxt-3-firebase/</guid>
      <description>Nuxt3 hit release candidate recently with a variety of awesome new features. But you might be wondering&amp;hellip; how do I use Nuxt3 with Firebase? There is no documented best practice as of today, so I put together a demo that is capable of server-side rendering (SSR) via Firestore, followed by hydration to secure realtime data on the client. This gives a website the benefits SEO-friendly HTML, without sacrificing the power the realtime data updates after the initial page load.</description>
    </item>
    
    <item>
      <title>10 Design Patterns in TypeScript</title>
      <link>https://fireship.io/lessons/typescript-design-patterns/</link>
      <pubDate>Sun, 13 Mar 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-design-patterns/</guid>
      <description>Design patterns is a highly influential book published in 1994 by four computer scientists called the Gang of Four. It was originally aimed at C++ developers, but has since become a book for anyone interested in object-oriented software design.
In the following lesson, we will look at 10 different patterns from this book with simplified modern examples in TypeScript. For additional patterns and examples, check out Refactoring Guru.
Creational Creational patterns are related to the creation of new objects.</description>
    </item>
    
    <item>
      <title>Code This, Not That - Python Edition</title>
      <link>https://fireship.io/lessons/code-this-not-that-python-edition/</link>
      <pubDate>Sun, 20 Feb 2022 15:31:36 +0100</pubDate>
      
      <guid>https://fireship.io/lessons/code-this-not-that-python-edition/</guid>
      <description>Introduction Python is one of the most popular languages in the world. It has many practical applications including web development, desktop apps, IoT, data analysis, and machine learning. This lesson contains ten tips that will make your code more pythonic.
To make life simpler, we‚Äôll use the following key to denote a few categories
üí© - code that you should avoid. ü§î - code that is generally ok, but ignores built-in language features.</description>
    </item>
    
    <item>
      <title>Twitter Bot Tutorial</title>
      <link>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</link>
      <pubDate>Thu, 03 Feb 2022 09:09:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</guid>
      <description>Full tutorial under development&amp;hellip;</description>
    </item>
    
    <item>
      <title>Sabz</title>
      <link>https://fireship.io/contributors/sabz/</link>
      <pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/sabz/</guid>
      <description>Sabz is a self-taught developer &amp;amp;&amp;amp; designer. He is interested in web, desktop development.</description>
    </item>
    
    <item>
      <title>Web3 NFT Tutorial</title>
      <link>https://fireship.io/lessons/web3-solidity-hardhat-react-tutorial/</link>
      <pubDate>Mon, 17 Jan 2022 13:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web3-solidity-hardhat-react-tutorial/</guid>
      <description>Over the last few months, you&amp;rsquo;ve likely heard there term Web3 thrown around in the media. It generally refers to decentralized webapps that use Ethereum smart contracts to replace traditional web servers. Sounds pretty cool, let&amp;rsquo;s build one!
The following tutorial demonstrates the entire process of building a smart contact, then interacting with it on the web using Ethers.js and React. The app can mint non-fungible tokens (NFTs) when a user transfers Ether from a wallet like MetaMask.</description>
    </item>
    
    <item>
      <title>Fulltext Search with Redis and Next.js</title>
      <link>https://fireship.io/lessons/redis-nextjs/</link>
      <pubDate>Mon, 10 Jan 2022 19:49:05 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/redis-nextjs/</guid>
      <description>Redis is an in-memory key-value store that is often used as a cache to make traditional databases faster. However, it has evolved into a multimodel database capable of fulltext search, graph relationships, AI workloads, and more.
In the following tutorial, we use Next.js and Redis Enterprise Cloud to build a webapp that can store JSON data in the cloud, then query it with results that update instantly in the UI.</description>
    </item>
    
    <item>
      <title>Riverpod with Firebase</title>
      <link>https://fireship.io/lessons/firebase-riverpod-flutter/</link>
      <pubDate>Sat, 27 Nov 2021 13:45:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-riverpod-flutter/</guid>
      <description>Riverpod is a reactive state-management library for Flutter that can simplify the way global data is shared throughout your application. It is especially useful with Firebase because it allows to you easily join Streams together, like a Firestore document with a Firebase Auth user.
The following tutorial demonstrates how to use Riverpod to manage Firebase Auth state and relational realtime data in Firestore.
Learning Objectives
Riverpod Basics w/ Firebase Listen to the current user&amp;rsquo;s auth state Join realtime Firestore data based on current user&amp;rsquo;s UID Setup This tutorial assumes you have already installed Firebase into your app.</description>
    </item>
    
    <item>
      <title>Cryptography Concepts for Node.js Developers</title>
      <link>https://fireship.io/lessons/node-crypto-examples/</link>
      <pubDate>Thu, 28 Oct 2021 13:29:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/node-crypto-examples/</guid>
      <description>The mysterious discipline of cryptography is the backbone of the internet. Without it, there would be no secrets and no privacy in the digital world. As a developer, you don‚Äôt need to understand the math that goes into cryptography, but it‚Äôs absolutely essential to know key concepts like hashes, salt, keypairs, encryption, and signing.
The following tutorial explains essential cryptography concepts and implements them with the builtin Node.js crypto module.</description>
    </item>
    
    <item>
      <title>API Monetization with Stripe Metered Billing</title>
      <link>https://fireship.io/lessons/api-monetization-stripe/</link>
      <pubDate>Sun, 24 Oct 2021 10:12:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/api-monetization-stripe/</guid>
      <description>Building a monetized API for a SaaS product might seem like a daunting task, but it&amp;rsquo;s actually relatively simple when you bring in tools like Stripe&amp;rsquo;s Metered Billing feature. There are 4 main steps in the process:
Create an API Subscribe a customer to a recurring subscription in Stripe Create custom API keys to authenticate requests to the API Report API usage to Stripe The following lesson demonstrates the backend flow for building API with Express.</description>
    </item>
    
    <item>
      <title>Tailwind Tips &amp; Tricks</title>
      <link>https://fireship.io/lessons/tailwind-tutorial/</link>
      <pubDate>Tue, 19 Oct 2021 08:11:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/tailwind-tutorial/</guid>
      <description>The following tutorial will get you up and running with Tailwind CSS, empowering you to build a beautiful, responsive, and animated websites quickly. We will build a side navigation menu inspired by Discord.
Setup Install the Tailwind VS Code extension Install the Tailwind VS Code extension.
Use a JS Framework Feel free to use the JS framework of your choice. This tutorial uses Create React App.
Discord-Inspired Icon Navbar Make the App a Flexible Container Create a flexbox row by simply adding the flex utility to the parent element.</description>
    </item>
    
    <item>
      <title>React Native Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/react-native-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 13:18:57 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-native-firebase-chat-demo/</guid>
      <description>React Native is one of the most productive ways to build a cross-platform mobile app, especially for developers with a background in JavaScript. It has provides excellent support for Firebase with the React Native Firebase package
In the following lesson, we will build a basic chat app with React Native and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/flutter-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-chat-demo/</guid>
      <description>Flutter makes it possible to build high-performance cross-platform apps with sound type safety thanks to the Dart programming language. It provides excellent support for Firebase with official plugins maintained by Google.
In the following lesson, we will build a basic chat app with Flutter and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Realtime Charts with D3</title>
      <link>https://fireship.io/lessons/realtime-charts-d3-firebase/</link>
      <pubDate>Mon, 20 Sep 2021 10:31:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-charts-d3-firebase/</guid>
      <description>D3.js, or Data Driven Documents, is a powerful tool for building charts with JavaScript, CSS, and SVG. It&amp;rsquo;s a library that takes data as an input outputs dynamic, interactive, and beautiful visualizations. In this tutorial, we&amp;rsquo;ll build an animated realtime chart that changes its appearance when a new data point is added to Firestore.
Example of the realtime chart you will build in this tutorial
Project Setup Install D3 &amp;amp; Firebase Create a new project with Vite, then install D3 and Firebase.</description>
    </item>
    
    <item>
      <title>Animated Notifications with Framer Motion</title>
      <link>https://fireship.io/lessons/framer-motion-advanced-notifications/</link>
      <pubDate>Sun, 12 Sep 2021 16:17:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/framer-motion-advanced-notifications/</guid>
      <description>Learn advanced Framer Motion techniques by creating an animated notification feed from scratch. We dive into concepts like transitions, spring animations, SVGs, and drag gestures to create dismissible notifications.
‚ö†Ô∏è This is the sequel to the Framer Motion Basics Tutorial. Make sure to watch that one first!
üöÄ Try out the live demo
Notification Basic Notification Start by creating a basic animated notification using a motion.li component. Feel free to experiment with the notificationVariants object to customize the animation result.</description>
    </item>
    
    <item>
      <title>Animated Modals with Framer Motion</title>
      <link>https://fireship.io/lessons/framer-motion-modal/</link>
      <pubDate>Sun, 12 Sep 2021 15:20:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/framer-motion-modal/</guid>
      <description>Framer Motion is a React library for adding declarative animations to your components. It provides a variety of components that wrap plain HTML elements to extend them with animation superpowers ü¶∏. In this lesson, we will build a modal with Framer Motion with a variety of different animations styles.
üöÄ Try out the live demo
Setup Installation Create a new React project
command line $ npx create-react-app framer-demo Open your new React app</description>
    </item>
    
    <item>
      <title>Firebase v9 Migration</title>
      <link>https://fireship.io/lessons/firebase-v9-migration/</link>
      <pubDate>Thu, 02 Sep 2021 12:10:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-v9-migration/</guid>
      <description>The Firebase team recently released a new web SDK that utilizes tree-shaking in order to lower JavaScript bundle sizes when used with module bundlers like Webpack and Rollup. At a high level, it works by only importing the functions/classes/code that we actually NEED, versus importing entire modules like auth, firestore, and so on. The Fireship site was able to reduce its JavaScript bundle size by ~35% ü§Ø by upgrading to the new version.</description>
    </item>
    
    <item>
      <title>Alex Guja</title>
      <link>https://fireship.io/contributors/alex-guja/</link>
      <pubDate>Sat, 28 Aug 2021 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/contributors/alex-guja/</guid>
      <description>Alex is a full-stack developer based in Europe. He is interested in web development, mobile apps, data engineering, and cloud technologies. In his free time, he enjoys reading, writes music, and likes to meet new people.</description>
    </item>
    
    <item>
      <title>Learn Go in 100 Lines</title>
      <link>https://fireship.io/lessons/learn-go-in-100-lines/</link>
      <pubDate>Sat, 28 Aug 2021 07:27:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/learn-go-in-100-lines/</guid>
      <description>Introduction Go is an open-source programming language developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is often described as &amp;ldquo;C for the 21st century&amp;rdquo;, however, it borrows important ideas from several other languages like ALGOL, Pascal, Modula-2, Oberon, CSP, and others. At its core, Go relies on simplicity, reliability, and efficiency to overcome the shortcomings of its ancestors. Go has garbage collection, a package system, first-class functions, lexical scope, immutable strings that rely on UTF-8, and an awesome concurrency model.</description>
    </item>
    
    <item>
      <title>Wavy Backgrounds with CSS &amp; SVG</title>
      <link>https://fireship.io/lessons/wavy-backgrounds/</link>
      <pubDate>Thu, 19 Aug 2021 12:06:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/wavy-backgrounds/</guid>
      <description>Wavy backgrounds have been all the rage in design for the last few years. The following tutorial demonstrates several different ways to create wavy backgrounds with CSS and SVG.
CSS Versions Bubble Pattern CSS Bubble
The bubble pattern creates an elliptical shape that stretches over the top of the content. It only requires CSS to create the effect.
file_type_html index.html &amp;lt;section class=&amp;#34;bubble&amp;#34;&amp;gt; &amp;lt;!-- content here --&amp;gt; &amp;lt;/section&amp;gt; Use the pseudo-element ::after to style an eliptical border radius to the content.</description>
    </item>
    
    <item>
      <title>Handle media queries in React with hooks</title>
      <link>https://fireship.io/snippets/use-media-query-hook/</link>
      <pubDate>Thu, 08 Jul 2021 23:11:49 -0400</pubDate>
      
      <guid>https://fireship.io/snippets/use-media-query-hook/</guid>
      <description>Hooks let you use state and other React features without writing a class.
useMediaQuery() This simple hook makes it easy to share &amp;amp;&amp;amp; render components, logic, styling, etc. through the use of media queries from your JSX code.
Create the hook hooks/useMediaQuery.jsx import { useState, useEffect } from &amp;#34;react&amp;#34;; const useMediaQuery = (query) =&amp;gt; { const [matches, setMatches] = useState(false); useEffect(() =&amp;gt; { const media = window.matchMedia(query); if (media.matches !== matches) { setMatches(media.</description>
    </item>
    
    <item>
      <title>Kyle Leary</title>
      <link>https://fireship.io/contributors/kyle-leary/</link>
      <pubDate>Thu, 08 Jul 2021 22:00:30 -0400</pubDate>
      
      <guid>https://fireship.io/contributors/kyle-leary/</guid>
      <description>Kyle aka &amp;ldquo;Klutch&amp;rdquo; or &amp;ldquo;KlutchDev&amp;rdquo; is a battle-hardened fullstack JavaScript/React &amp;amp;&amp;amp; Firebase developer from western Massachusetts. Klutch is currently learning Rust, TypeScript, and preparing for the OSWE exam. When not writing code he is relaxing at home with his long time sweetheart Chelsea and cats Murph/Zelda or shredding guitar.</description>
    </item>
    
    <item>
      <title>Google Sheets as a Database</title>
      <link>https://fireship.io/lessons/google-sheets-database-nextjs/</link>
      <pubDate>Tue, 22 Jun 2021 19:13:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-sheets-database-nextjs/</guid>
      <description>Choosing the right database for your app is difficult. If you have a small project or are just prototyping, Google Sheets actually works quite nicely as a primary database. It is especially practical for JAM-stack web apps that use server-side rendering. The following tutorial will teach you how to use Google Sheets as a database for Next.js.
‚ö†Ô∏è Be warned&amp;hellip; Google Sheets does not scale like a true production database (because that&amp;rsquo;s not what it is for).</description>
    </item>
    
    <item>
      <title>Three.js Basics</title>
      <link>https://fireship.io/lessons/threejs-tutorial-portfolio/</link>
      <pubDate>Fri, 21 May 2021 08:45:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/threejs-tutorial-portfolio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Accept Crypto Payments with Coinbase Commerce</title>
      <link>https://fireship.io/lessons/crypto-payments-web-firebase/</link>
      <pubDate>Mon, 29 Mar 2021 11:13:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/crypto-payments-web-firebase/</guid>
      <description>Accepting crypto payments, like Bitcoin and Ethereum, in your app opens the door to more customers in a very fast growing niche. Coinbase Commerce is like the Stripe Payments API for crypto. It provides a simple API where you can create charges, invoices, etc. But unlike credit cards, which are processed by a central authority, crypto payments are distributed to a global network of miners where they are confirmed on the blockchain.</description>
    </item>
    
    <item>
      <title>WebRTC Video Chat on Firebase</title>
      <link>https://fireship.io/lessons/webrtc-firebase-video-chat/</link>
      <pubDate>Tue, 02 Mar 2021 15:10:46 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/webrtc-firebase-video-chat/</guid>
      <description>WebRTC facilities realtime audio/video communication on the web using a peer-to-peer protocol, allowing you to build apps like Zoom, Skype, etc.
The following lesson builds a 1-to-1 video chat, where each peer streams directly to the other peer - there is no need for a middle-man server to handle video content. However, a 3rd party server is required for signaling that stores shared data for stream negotiation. Firestore is an excellent choice for WebRTC because it is easy to listen to updates to the database in realtime.</description>
    </item>
    
    <item>
      <title>Jeff Delaney</title>
      <link>https://fireship.io/contributors/jeff-delaney/</link>
      <pubDate>Sat, 27 Feb 2021 09:32:30 -0700</pubDate>
      
      <guid>https://fireship.io/contributors/jeff-delaney/</guid>
      <description>Jeff Delaney is a Google Developer Expert and the creator of fireship.io. When not writing code, he is out seeking adventure with his wife and 3 boys.</description>
    </item>
    
    <item>
      <title>Invite-Only Firebase Phone Auth</title>
      <link>https://fireship.io/lessons/invite-only-firebase-phone-auth/</link>
      <pubDate>Wed, 24 Feb 2021 15:42:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/invite-only-firebase-phone-auth/</guid>
      <description>The meteoric rise of Clubhouse from a mostly unknown app to 10M weekly users demonstrates the power of #FOMO - fear of missing out. No, you can&amp;rsquo;t just download the app and start having fun. It uses an invite-only authentication system that requires a current user to invite you to the club with your phone number. Once you&amp;rsquo;re in, you&amp;rsquo;re granted two invites to send to your friends, creating a pyramid of organic user growth.</description>
    </item>
    
    <item>
      <title>Custom Usernames in Firebase</title>
      <link>https://fireship.io/lessons/custom-usernames-firebase/</link>
      <pubDate>Sat, 23 Jan 2021 11:51:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-firebase/</guid>
      <description>Firebase assigns each user a unique ID upon signing up, but many apps require users to choose their own custom unique username, which is not an out-of-box feature in Firebase. Think of apps like Twitter or Medium, where each user‚Äôs profile can be visited on a user like example.com/{username}. The following lesson demonstrates how to securely create and validate custom usernames for Firebase users by combining Cloud Firestore.
Demo of custom usernames in Firebase</description>
    </item>
    
    <item>
      <title>Host a Website on Raspberry Pi</title>
      <link>https://fireship.io/lessons/host-website-raspberry-pi/</link>
      <pubDate>Fri, 15 Jan 2021 14:37:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/host-website-raspberry-pi/</guid>
      <description>AWS recently banned Parler from it&amp;rsquo;s cloud platform, effectively destroying its 10M user app with the flick of a switch. Whether you agree or not, it was within Amazon&amp;rsquo;s legal rights to make this move.
Now imagine you&amp;rsquo;ve just been kicked off the cloud&amp;hellip; where do you go? The Internet is still an open platform, but you&amp;rsquo;re faced with the ugly prospect of a reverse cloud migration back to on-prem physical servers.</description>
    </item>
    
    <item>
      <title>Seven Awesome PWA Features</title>
      <link>https://fireship.io/lessons/pwa-top-features/</link>
      <pubDate>Tue, 05 Jan 2021 09:31:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-top-features/</guid>
      <description>Progressive Web Apps (PWA) represent a collection of capabilities that put web apps on a level playing field with native iOS, Android, and desktops apps. The following tutorial implements a 7 lesser-known web features.
1. App Shortcuts App Shortcuts
file_type_config manifest.json { &amp;#34;name&amp;#34;: &amp;#34;Fireship&amp;#34;, //... &amp;#34;shortcuts&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Activity Feed&amp;#34;, &amp;#34;short_name&amp;#34;: &amp;#34;Feed&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;View your activity feed&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;/feed?utm_source=homescreen&amp;#34;, &amp;#34;icons&amp;#34;: [{ &amp;#34;src&amp;#34;: &amp;#34;/icons/feed.png&amp;#34;, &amp;#34;sizes&amp;#34;: &amp;#34;192x192&amp;#34; }] }, { &amp;#34;name&amp;#34;: &amp;#34;Recent Comments&amp;#34;, &amp;#34;short_name&amp;#34;: &amp;#34;Comments&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;View recent comments&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;/comments?</description>
    </item>
    
    <item>
      <title>Video to GIF with WASM</title>
      <link>https://fireship.io/lessons/wasm-video-to-gif/</link>
      <pubDate>Sun, 15 Nov 2020 10:14:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/wasm-video-to-gif/</guid>
      <description>Web Assembly (WASM) opens the door to building high-performance apps in the browser with languages other than JavaScript. Software normally reserved for installed desktop apps can now run in the browser with near-native performance. The following tutorial demonstrates how to use FFmpeg.wasm to perform CPU-intensive video editing tasks from a frontend react app.
Initial Setup Create a new react app, then install FFmpeg.
command line npx create-snowpack-app gifmakr --template @snowpack/app-template-react npm install @ffmpeg/ffmpeg @ffmpeg/core GIF Maker App Load FFmpeg The main binary for FFmpeg is loaded asynchronously via a CDN.</description>
    </item>
    
    <item>
      <title>FaunaDB Basics</title>
      <link>https://fireship.io/lessons/fauna-db-quickstart/</link>
      <pubDate>Sun, 11 Oct 2020 07:14:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/fauna-db-quickstart/</guid>
      <description>FaunaDB is a next-generation cloud database that combines the simplicity of NoSQL, without sacrificing the ability to model complex relationships. It&amp;rsquo;s completely serverless, fast, ACID-compliant, and has a generous free tier for small apps - basically everything you could possibly want in a fully-managed database.
The following lesson demonstrates how to model a basic twitter-inspired social graph with FaunaDB and access it on the web with Node.js. It will introduce you to Fauna Query Language (FQL) and common patterns for reading and writing to the database.</description>
    </item>
    
    <item>
      <title>React Firebase Chat App</title>
      <link>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</link>
      <pubDate>Fri, 25 Sep 2020 07:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</guid>
      <description>The following tutorial demonstrates how to build a simple group chat app with React and Firebase. The goal of this lesson is to showcase important beginner concepts when working with the ‚öõÔ∏èüî• React Firebase stack, including user authentication, firestore, and security rules.
React Firebase Chat Demo
Important Links
Live Demo Source Code React Firebase Hooks Initial Setup Firebase Project Create a free Firebase project. Make sure to enable Google SignIn and and activate Cloud Firestore.</description>
    </item>
    
    <item>
      <title>Animated CSS Cards Tutorial</title>
      <link>https://fireship.io/lessons/css-cards-animated/</link>
      <pubDate>Thu, 10 Sep 2020 07:33:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-cards-animated/</guid>
      <description>The following lesson demonstrates how to build an animated card collection inspired by the 2020 homepage of css-tricks.com.
The original version on CSS tricks
The cloned card stack
Stacked Card Start by adding the following HTML markup.
HTML file_type_html index.html &amp;lt;section class=&amp;#34;card-list&amp;#34;&amp;gt; &amp;lt;article class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;header class=&amp;#34;card-header&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Sep 11th 2020&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Never forget&amp;lt;/h2&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;div class=&amp;#34;card-author&amp;#34;&amp;gt; &amp;lt;a class=&amp;#34;author-avatar&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;avatar.png&amp;#34; /&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;svg class=&amp;#34;half-circle&amp;#34; viewBox=&amp;#34;0 0 106 57&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M102 4c0 27.</description>
    </item>
    
    <item>
      <title>Seven Database Paradigms</title>
      <link>https://fireship.io/lessons/top-seven-database-paradigms/</link>
      <pubDate>Tue, 01 Sep 2020 16:09:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/top-seven-database-paradigms/</guid>
      <description>Choose the right database for the job üî®
Database Paradigms Explained Visually Key-Value Popular Key-Value Databases: Redis, Memcached, Etcd
key value database diagram
Wide Column Popular Wide-Column Databases: Cassandra, Apache HBase
wide column database diagram
Document Oriented Popular Document Databases: MongoDB, Firestore, CouchDB
document database diagram
Relational Popular Relational Databases: MySQL, Postgres, SQL Server, CockroachDB
Graph Popular Graph Databases: Neo4j, DGraph, Janus Graph
Search Engine Popular Search Databases: ElasticSearch, Algolia, MeiliSearch</description>
    </item>
    
    <item>
      <title>Fulltext Search on Firebase with Meilisearch</title>
      <link>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</link>
      <pubDate>Fri, 28 Aug 2020 08:14:16 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</guid>
      <description>A common issue that developers face with NoSQL databases (and SQL to a lesser extent) is a lack of full-text search capabilities. If you want to build a performant typeahead search box or handle multi-property filtering on a collection, you‚Äôll find it frustratingly difficult to implement in Firestore - it‚Äôs just not the right database for the job. There are many good solutions, like Algolia and ElasticSearch, but they can be expensive and/or complex to manage.</description>
    </item>
    
    <item>
      <title>Docker Basics Tutorial with Node.js</title>
      <link>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</link>
      <pubDate>Mon, 24 Aug 2020 08:08:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</guid>
      <description>Code Breakdown Dockerfile A Dockerfile is like DNA for building a Docker Image.
file_type_docker Dockerfile FROM node:12 WORKDIR /app COPY package*.json ./ RUN npm install COPY . . ENV PORT=8080 EXPOSE 8080 CMD [ &amp;#34;npm&amp;#34;, &amp;#34;start&amp;#34; ] Dockerignore A Dockerignore file is required so we don&amp;rsquo;t add the node_modules folder to the image.
file_type_docker .dockerignore node_modules Node.js App This is the code we went to run as the container&amp;rsquo;s process.</description>
    </item>
    
    <item>
      <title>Firebase Quickstart</title>
      <link>https://fireship.io/lessons/firebase-quickstart/</link>
      <pubDate>Sun, 26 Jul 2020 08:27:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-quickstart/</guid>
      <description>Firebase makes app development faster ‚ö°, cheaper üíµ, and more enjoyable üòÄ for developers. The idea behind a Backend-as-a-Service (BaaS) is to eliminate the need to write and maintain server-side code - things like user authentication, trusted API calls, security logic, database connections, traffic scaling, and the list goes on. These requirements take time, money, and add complexity to a project. The more resources you can invest in the frontend user experience, the more likely your app is to succeed.</description>
    </item>
    
    <item>
      <title>Firebase Emulator Advanced Usage Guide</title>
      <link>https://fireship.io/lessons/firebase-emulator-advanced/</link>
      <pubDate>Sun, 31 May 2020 19:11:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-emulator-advanced/</guid>
      <description>The Firebase emulator suite allows developers to run a mock Firebase environment locally. Last week, Firebase released a new feature called the Emulator UI to visualize and manage Firestore (and Realtime DB) from the browser. The following lesson contains a variety of advanced techniques for setting up a Firebase development environment.
üå†Did you know? The new @firebase Emulator UI makes Firestore available on the browser window...
With a little bit of JS, you can extend the UI with your own custom stuff, like buttons to populate fake data.</description>
    </item>
    
    <item>
      <title>David Bautista</title>
      <link>https://fireship.io/contributors/david-bautista/</link>
      <pubDate>Tue, 26 May 2020 13:01:01 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/david-bautista/</guid>
      <description>David Bautista is a Software Engineer from Mexico.</description>
    </item>
    
    <item>
      <title>Access Google APIs for Users with OAuth 2.0</title>
      <link>https://fireship.io/lessons/google-apis-node-tutorial/</link>
      <pubDate>Sat, 23 May 2020 00:33:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-apis-node-tutorial/</guid>
      <description>How do you make APIs calls to a Google service on behalf of a user? The following lesson demonstrates how to get permission from a user with OAuth 2.0 to make authenticated requests to Google APIs from a backend Node.js server like Firebase Cloud Functions.
Examples of common use cases might include:
Upload a file to a user&amp;rsquo;s Google Drive Make an appointment on a user&amp;rsquo;s Google Calendar Access a user&amp;rsquo;s infrastructure on Google Cloud Platform üí° Note: This lesson covers server-side OAuth.</description>
    </item>
    
    <item>
      <title>Authenticate a Firebase User on the Server</title>
      <link>https://fireship.io/snippets/express-middleware-auth-token-firebase/</link>
      <pubDate>Fri, 22 May 2020 05:56:37 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/express-middleware-auth-token-firebase/</guid>
      <description>The following snippet demonstrates how to setup server-side authentication in Firebase on any node server using Express.js.
Note. If using Firebase Cloud Functions, you can use Callable Functions to automatically handle this type of authentication.
Client-side: Include the ID Token Your client-side code must attach the ID token to the authorization header when making a request to the server. The example below uses the browser&amp;rsquo;s built in fetch API.
file_type_js frontend-app.</description>
    </item>
    
    <item>
      <title>Regex Cheat Sheet</title>
      <link>https://fireship.io/lessons/regex-cheat-sheet-js/</link>
      <pubDate>Mon, 18 May 2020 16:17:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/regex-cheat-sheet-js/</guid>
      <description>Regular Expressions are notoriously difficult to learn - they have a very compact syntax that ends up looking like gibberish. However, they can be extremely powerful when it comes to form validation, find and replace tasks, and/or searching through a body of text. The following cheatsheet provides common RegEx examples and techniques for the JavaScript developer.
üî• There are several awesome tools that can help you debug RegEx in the browser - my personal favorite is RegExr.</description>
    </item>
    
    <item>
      <title>How to use JS with Flutter Web</title>
      <link>https://fireship.io/snippets/using-js-with-flutter-web/</link>
      <pubDate>Sun, 19 Apr 2020 08:00:17 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/using-js-with-flutter-web/</guid>
      <description>Flutter Web opens the door to building progressive web apps (PWAs) entirely in Dart. However, your Dart code will likely need to interop with JavaScript at some point to access browser APIs and/or your own custom JS apps. The following snippet demonstrates how access JS from a Flutter web app.
Using JavaScript in Dart &amp;amp; Flutter Dart.js is a built-in library that can interop with JavaScript.
Add a Script Create a JS file in the web directory and add some functions to it.</description>
    </item>
    
    <item>
      <title>Multi-Level Dropdown Menu with React</title>
      <link>https://fireship.io/lessons/dropdown-menu-multi-level-react/</link>
      <pubDate>Thu, 16 Apr 2020 19:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/dropdown-menu-multi-level-react/</guid>
      <description>The following tutorial demonstrates how to build animated dropdown menu with React. It is inspired by Facebook&amp;rsquo;s March 2020 web UI update.
Facebook&amp;rsquo;s new UI in 2020
Initial Setup Start by creating a new app with CRA and install the React Transition Group package to handle animation.
command line npx create-react-app facebook cd facebook npm i react-transition-group npm start Top Navigation Build a simple flexbox navigation bar to give the dropdown some context.</description>
    </item>
    
    <item>
      <title>Google Secret Manager with Firebase</title>
      <link>https://fireship.io/lessons/secret-manager-with-firebase/</link>
      <pubDate>Wed, 15 Apr 2020 13:08:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secret-manager-with-firebase/</guid>
      <description>Secret Manager is a new service on Google Cloud that allows us to store and version sensitive data like private API keys and passwords, then access it from any cloud service. It provides encryption, audit logging, versioning, and IAM roles for secure fine-grained control over sensitive information.
A common use-case for a Firebase apps is the management of secret API keys in a Cloud Function. The following lesson will teach you how add secrets via the Google Cloud console, then read them from a Firebase Cloud Function with Node.</description>
    </item>
    
    <item>
      <title>Johan Walhout</title>
      <link>https://fireship.io/contributors/johan-walhout/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/johan-walhout/</guid>
      <description>Johan is a software engineer developing apps and webapplications in Angular 2+, VueJS, Nodejs and Dart/Flutter. When he is not working on new projects, he enjoy to have adventures with his wife, four boys and a dog.</description>
    </item>
    
    <item>
      <title>Autosave Vue Forms with Firestore</title>
      <link>https://fireship.io/lessons/vue-autosaving-forms-with-firestore/</link>
      <pubDate>Tue, 07 Apr 2020 15:14:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/vue-autosaving-forms-with-firestore/</guid>
      <description>Modern applications that accept complex user inputs often provide an automatic save action that runs in the background, such as Google Docs and Microsoft Office:
Microsoft Office files are auto-saved
The following lesson builds a reactive Vue form that automatically syncs the user&amp;rsquo;s input to a backend database - Firestore. It keeps track of the state of the form, and when modified, waits for a short debounce before writing the changes to the backend database.</description>
    </item>
    
    <item>
      <title>Multifactor Auth with Firebase (2FA)</title>
      <link>https://fireship.io/lessons/two-factor-auth-firebase/</link>
      <pubDate>Sat, 04 Apr 2020 13:49:27 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/two-factor-auth-firebase/</guid>
      <description>How do you handle two-step verification (2FA) or multifactor authentication (MFA) in Firebase? Until recently, the answer was you can&amp;rsquo;t. Thankfully, in 2020 we can implement multifactor auth flows in Firebase with Google Cloud Identity Platform. The following tutorial demonstrates an optional multifactor auth flow that works like this&amp;hellip;
Sign up with email/password and require email verification. Opt-in to MFA and register phone number(s). Attempt login from a new device. Verify SMS text code verification.</description>
    </item>
    
    <item>
      <title>Web Development Setup Guide for Windows with Linux (WSL)</title>
      <link>https://fireship.io/lessons/windows-10-for-web-dev/</link>
      <pubDate>Fri, 03 Apr 2020 13:22:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/windows-10-for-web-dev/</guid>
      <description>Historically, Windows has not been been the preferred OS for most web developers, but things have changed over the past couple years. Microsoft recently launched Windows Subsystem for Linux or WSL (WSL2), allowing us to install REAL linux distros (like Ubuntu) on Windows 10. This means you can use Linux toolchains (bash, zsh, tmux) and apps to manage the file system and run windows apps.
Unlike a dual boot system, where two operating systems are installed on the same hard drive, WSL runs Linux in a compatibility layer that can run unmodified ELF64 binaries.</description>
    </item>
    
    <item>
      <title>How to Build a CSS Dropdown Menu</title>
      <link>https://fireship.io/snippets/basic-css-dropdown-menu/</link>
      <pubDate>Tue, 24 Mar 2020 12:03:21 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/basic-css-dropdown-menu/</guid>
      <description>The following snippet demonstrates how to build a dropdown menu with CSS (no JavaScript) that maintains its state when clicked. The special sauce in this demo is the :focus-within pseudo selector, which allows the dropdown to stay open when its child links are clicked.
Step 1: Start with a Navigation Bar Start with some navbar markup.
file_type_html &amp;lt;nav class=&amp;#34;navbar&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;navbar-nav&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;Home&amp;lt;/li&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;About&amp;lt;/li&amp;gt; &amp;lt;!-- Dropdown will go here --&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;Login&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; The navbar is just simple flex container.</description>
    </item>
    
    <item>
      <title>How to Build a Theme-Switcher</title>
      <link>https://fireship.io/lessons/theme-toggler/</link>
      <pubDate>Tue, 24 Mar 2020 12:00:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/theme-toggler/</guid>
      <description>Almost every good dev website these days has the ability to switch between light/dark mode - but how do you toggle multiple themes and style variations? The following lesson demonstrates how to build a theme switcher, inspired by Alligator.io, that allows a user to switch between four different global styles - light, dark, light-solar, and dark-solar.
Theme Switcher Dropdown Menu The HTML markup should should have some type of clickable element.</description>
    </item>
    
    <item>
      <title>Five Useful Github Actions Examples</title>
      <link>https://fireship.io/lessons/five-useful-github-actions-examples/</link>
      <pubDate>Fri, 13 Mar 2020 09:26:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/five-useful-github-actions-examples/</guid>
      <description>Github Actions make it easy to roll out a wide variety of DevOps automation tasks. The following lesson provides five examples of CI/CD and automation using Github Actions.
Example 1: Continuous Integration Continuous Integration (CI) automates the process of testing and building your code before merging it. In practice, developers should commit or integrate their changes to the main shared repo once-per-day (or more).
Workflow file_type_light_yaml .github/workflows/workflow.yml name: Node Continuous Integration on: pull_request: branches: [ master ] jobs: test_pull_request: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: 12 - run: npm ci - run: npm test - run: npm run build Example 2: Continuous Deployment Continuous Deployment (CD) automatically releases new production code to users.</description>
    </item>
    
    <item>
      <title>Automatic Backups for Firestore via Github Actions</title>
      <link>https://fireship.io/snippets/firestore-automated-backups/</link>
      <pubDate>Thu, 12 Mar 2020 17:20:51 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-automated-backups/</guid>
      <description>As of today, Firestore does not support automatic backups, but it DOES support exports via the gcloud CLI or REST API. Although not technically a backup in database jargon, an automatic export is valuable to have for disaster recovery because it can be re-imported to replace lost data.
The following snippet exports all Firestore data automatically every day at midnight using a scheduled Github Action.
Generate a Service Key on GCP We need a service account to grant Github Actions permission to run the export command via the Google Cloud CLI.</description>
    </item>
    
    <item>
      <title>CSS Grid Layout Examples</title>
      <link>https://fireship.io/lessons/three-responsive-css-grid-layouts/</link>
      <pubDate>Sun, 08 Mar 2020 11:04:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/three-responsive-css-grid-layouts/</guid>
      <description>The following lesson contains three examples of CSS Grid layouts.
Bootstrap-Style 12 Column Grid Grid can significantly reduce the amount of code required to build responsive row/column layouts. Unlike a flex-based grid like Bootstrap, it does not require a bunch of classes in the markup to make the children responsive.
The grid below is an example of an implicit grid because we do not know the exact number of rows or columns in advance.</description>
    </item>
    
    <item>
      <title>Electron Screen Capture Tutorial</title>
      <link>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</link>
      <pubDate>Wed, 04 Mar 2020 06:56:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</guid>
      <description>Electron opens the world of desktops apps to the average JavaScript developer. It wraps Chromium with Node.js, providing a browser for building UIs and Node for low-level system operations.
The following project tutorial demonstrates how to build a simple screen recorder with Electron. The app can retrieve the available screens from the system, turn the screen into a video feed, then record and save the raw video file to the system.</description>
    </item>
    
    <item>
      <title>Responsive Animated Navbar with CSS</title>
      <link>https://fireship.io/lessons/css-responsive-icon-navbar/</link>
      <pubDate>Sat, 29 Feb 2020 15:04:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-responsive-icon-navbar/</guid>
      <description>The following lesson demonstrates how to build a responsive, animated icon navigation bar using nothing but plain CSS. This project combines a variety of modern CSS features like flexbox, media queries, transitions, and filters to build a unique experience with minimal code.
Step 1 - Initial Setup üö® The demo contains a bunch of dummy HTML not shown below. Copy or clone it from the full source code to build the demo locally.</description>
    </item>
    
    <item>
      <title>Top 7 Security Concepts for Web Developers</title>
      <link>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</link>
      <pubDate>Thu, 13 Feb 2020 09:37:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</guid>
      <description>Cloud providers and web application frameworks go to great lengths to protect you from writing insecure code. The Cloud provides secure defaults and monitoring for your infrastructure, while Angular and React automatically sanitize HTML to prevent the injection of malicious JavaScript. Despite these safeguards, no application is 100%, secure and clever new exploits will be discovered. The following lesson explains some of the most common hacking techniques and how to secure your app against them.</description>
    </item>
    
    <item>
      <title>Delete a Firestore Collection</title>
      <link>https://fireship.io/snippets/delete-firestore-collection/</link>
      <pubDate>Tue, 11 Feb 2020 14:29:28 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/delete-firestore-collection/</guid>
      <description>Deleting an entire collection from Firestore should be handled on a backend server. Collections can grow infinitely large, so deleting a millions of documents can be an excessively large workload to put on a clientside web or mobile app.
Option A - Use the CLI or Console You can manually delete a collection or subcollection from the Firebase Console OR by using the CLI.
command line firebase firestore:delete path-to-delete Option B - Use a Cloud Function It is possible to interact with Firebase Tools from a Cloud Function.</description>
    </item>
    
    <item>
      <title>Sign In with Apple on Firebase</title>
      <link>https://fireship.io/lessons/apple-signin-with-firebase-tutorial/</link>
      <pubDate>Sun, 09 Feb 2020 08:41:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/apple-signin-with-firebase-tutorial/</guid>
      <description>Sign in with Apple was announced in 2019 and allows users to authenticate into your Firebase app with an Apple ID. Users must have two-factor authentication (2FA) enabled on their Apple account AND be signed into iCloud.
The following lesson demonstrates how to configure Apple SignIn with the Firebase JavaScript SDK (web).
üö® As of April 2020, all native iOS apps that offer social auth methods (Google, Facebook, etc.) MUST also include Apple Sign In as an option.</description>
    </item>
    
    <item>
      <title>Javascript 2020 Predictions</title>
      <link>https://fireship.io/lessons/javascript-2020-predictions/</link>
      <pubDate>Mon, 16 Dec 2019 07:27:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/javascript-2020-predictions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What is Cloud Computing in 2020?</title>
      <link>https://fireship.io/lessons/cloud-computing-in-2020/</link>
      <pubDate>Tue, 10 Dec 2019 11:59:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-computing-in-2020/</guid>
      <description>Data Sources Gartner Forecasts Forbes Enterprise Computing Flexera Report 2019 </description>
    </item>
    
    <item>
      <title>How to Build a Slack App</title>
      <link>https://fireship.io/lessons/how-to-build-a-slack-bot/</link>
      <pubDate>Tue, 03 Dec 2019 14:22:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-build-a-slack-bot/</guid>
      <description>Slack Apps, or Bots, allow you to extend slack with interactive features that can improve your teams productivity. The following lesson is a step-by-step guide to building a Slack App using Firebase Cloud Functions as the backend server.
This lesson builds Slack App for the actual Fireship Slack. Join to see the CyberJeff bot in action.
Our Slack App will perform the following tasks.
Listen to events, such as a new user joining the #general channel.</description>
    </item>
    
    <item>
      <title>Handle Radial Pan Events in Flutter</title>
      <link>https://fireship.io/snippets/circular-drag-flutter/</link>
      <pubDate>Mon, 02 Dec 2019 09:19:58 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/circular-drag-flutter/</guid>
      <description>A UI element that is not currently supported out of the box with Flutter is a click wheel, or knob, or radial control, rotatable circle, or whatever you want to call it. The following snippet demonstrates how to take a circular container, then detect which direction the user is rotating (clockwise or counter clockwise) and its velocity.
Full wheel demo source code.
Flutter Circular Pan Wheel Detect Pan Gestures Use a GestureDetector to wrap a container with a BoxShape.</description>
    </item>
    
    <item>
      <title>Build the Classic iPod UI in Flutter</title>
      <link>https://fireship.io/lessons/flutter-ipod/</link>
      <pubDate>Sun, 01 Dec 2019 09:12:43 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-ipod/</guid>
      <description>An awesome tweet was making the rounds last week that recreates the iPod Classic UI with SwiftUI. It features a click wheel that scrolls through a list of items when rotated and makes for an excellent Flutter UI challenge.
Turned my iPhone into an iPod Classic with Click Wheel and Cover Flow with #SwiftUI pic.twitter.com/zVk5YJj0rh
&amp;mdash; Elvin (@elvin_not_11) November 27, 2019 Creating an animated scrolling list with Flutter is a piece of cake, but calculating scroll direction/velocity from the pan events on the wheel is a bigger challenge.</description>
    </item>
    
    <item>
      <title>Firestore Rate Limiting</title>
      <link>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</link>
      <pubDate>Sat, 30 Nov 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</guid>
      <description>Rate limiting is the process of blocking access to cloud resources after a certain threshold has been reached. Firestore bills based on the quantity of reads and writes, but does not currently provide a way to block IPs or set explicit rate limits with Security Rules. So how do you prevent a DDoS attack or a disgruntled user from spamming the app with unnecessary records.
The following examples are based on an app that needs to&amp;hellip;</description>
    </item>
    
    <item>
      <title>Firestore Pagination Guide</title>
      <link>https://fireship.io/lessons/firestore-pagination-guide/</link>
      <pubDate>Tue, 26 Nov 2019 09:17:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-pagination-guide/</guid>
      <description>Pagination is the process of dividing data into discrete pages. In Firestore, it is achieved by ordering a collection by a field, limiting it to a consistent page size, then offsetting the query. The Firebase Web SDK v7.3.0 introduced a new limitToLast(n) method that makes the process much easier. The following lesson demonstrates how to paginate Firestore data in both a forward and backward direction and discusses advanced serverside techniques.</description>
    </item>
    
    <item>
      <title>Access the Index on Dart List.map()</title>
      <link>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</link>
      <pubDate>Sun, 24 Nov 2019 07:55:05 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</guid>
      <description>The following snippet demonstrates how to access the iteration index when using List.map. It is a common need in Flutter when looping over or mapping a list of values to widgets.
Problem Unlike JavaScript, one cannot simply access the index of a list during a List.map operation in Dart.
file_type_dartlang main.dart List myList = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; myList.map( (val, index) { // This does not work! // Which index am I on?</description>
    </item>
    
    <item>
      <title>Build a Binary Clock with Flutter</title>
      <link>https://fireship.io/lessons/build-a-binary-clock-flutter/</link>
      <pubDate>Thu, 21 Nov 2019 12:40:31 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-binary-clock-flutter/</guid>
      <description>The Flutter Clock Contest is currently running with a submission deadline of Jan 20th, 2020. The following lesson will teach you how to build a basic clock with Flutter.
Binary Clock Basics We are building the binary clock shown in the demo video below. Notice how the clock ticks once-per-second and updates the highlighted boxes in the UI. The actual time is shown in big plain digits at the bottom, with the binary value for each number under it.</description>
    </item>
    
    <item>
      <title>Firestore Order by Document ID or Field</title>
      <link>https://fireship.io/snippets/firestore-increment-document-id-value/</link>
      <pubDate>Mon, 18 Nov 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-document-id-value/</guid>
      <description>The follow snippet contains strategies for ordering a collections sequentially. For example, you may want a field that increases by 1 after each new document is created. Cloud Firestore does not provide automatic ordering on the auto-generated docIDs, so we need be clever to solve this problem .
Auto-ordering Techniques Timestamp Approach The easiest way to order by creation time is to use a server timestamp. This tells Firestore to add a date to the document based on Google Cloud&amp;rsquo;s backend time, so you&amp;rsquo;re not relying on the client&amp;rsquo;s clock (which is likely to be inaccurate).</description>
    </item>
    
    <item>
      <title>Custom Svelte Store Examples</title>
      <link>https://fireship.io/snippets/custom-svelte-stores/</link>
      <pubDate>Fri, 15 Nov 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/custom-svelte-stores/</guid>
      <description>A store provides a reactive stream of data that can change over time. Creating a custom store in Svelte is easy. It&amp;rsquo;s just a simple matter of creating a writable store in a function and returning its subscribe function on an object.
Custom Store Use-Cases Use-case: Business logic An obvious use case is to create abstractions for your data. You can use writable as a low-level building block for more complex features.</description>
    </item>
    
    <item>
      <title>Deck.gl Google Maps Tutorial</title>
      <link>https://fireship.io/lessons/deckgl-google-maps-tutorial/</link>
      <pubDate>Tue, 29 Oct 2019 07:53:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/deckgl-google-maps-tutorial/</guid>
      <description>Have you ever tried to load thousands of datapoints into Google Maps? It probably didn&amp;rsquo;t go very well from a performance standpoint. Deck.gl is a library that solves this problem by running expensive computations on the GPU with WebGL. This means you can run realtime 3D visualizations on datasets with millions of geographic points.
In the following lesson, you will learn how to add high-performance data overlays to Google Maps based on a dataset of 140,000+ incidents of gun violence in the United States.</description>
    </item>
    
    <item>
      <title>Stripe Payment Intents Tutorial</title>
      <link>https://fireship.io/lessons/stripe-payment-intents-tutorial/</link>
      <pubDate>Tue, 22 Oct 2019 18:05:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-payment-intents-tutorial/</guid>
      <description>Stripe provides a huge API with everything you could ever want to build a complex payment system. Recent changes in the online payments landscape have resulted in significant changes to the API, most notably the Payment Intents API. The following lesson demonstrates two modern strategies for accepting one-time payments - (1) Checkout and (2) Stripe Elements with Payment Intents.
As of September 2019, many European banks now require their customers to validate payments using 3D secure standard or Strong Customer Authentication SCA.</description>
    </item>
    
    <item>
      <title>Top 100 Firebase Tips and Tricks</title>
      <link>https://fireship.io/lessons/firebase-tips-and-tricks/</link>
      <pubDate>Wed, 09 Oct 2019 20:31:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-tips-and-tricks/</guid>
      <description>The list below outlines the Firebase tips presented in the video.
Get Started Create a two Firebase Projects - one for development and another for live production data Link Google Analytics Limit permissions for employees, follow the Principle of Least Privilege Update contact info for GDPR Add a project and don&amp;rsquo;t worry about exposing your credentials in frontend code Upgrade to Blaze, then set a budget on GCP Generate detailed reports for billing Install the Firebase Tools CLI and GCloud.</description>
    </item>
    
    <item>
      <title>Graphql Basics Tutorial</title>
      <link>https://fireship.io/lessons/graphql-basics-tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 09:38:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/graphql-basics-tutorial/</guid>
      <description>GraphQL has been one of the fastest growing web technologies over the past few years. This lesson covers the basics of GraphQL and demonstrates how to build an Angular app that fetches data with Apollo via the public SpaceX API.
üôè Special thanks to Arjun for producing the code for this demo! Head over to github for the Full Lesson and give it a ‚≠ê.</description>
    </item>
    
    <item>
      <title>Firebase Analytics for the Web</title>
      <link>https://fireship.io/lessons/firebase-analytics-web-guide/</link>
      <pubDate>Thu, 03 Oct 2019 13:08:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-analytics-web-guide/</guid>
      <description>Firebase recently announced support for Analytics and Remote Config on the web. When combined, these services make it possible to customize the UI/UX of your app based on data collected from Google Analytics. The following lesson will show you how to collect Google Analytics events and user properties, then read aggregated data in your app to customize the experience for a specific audience.
Initial Setup Firebase Analytics was added to the JavaScript SDK in version 7.</description>
    </item>
    
    <item>
      <title>Advanced Firebase Auth with Custom Claims</title>
      <link>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</link>
      <pubDate>Mon, 23 Sep 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</guid>
      <description>Firebase allows developers to modify authentication ID tokens to provide fine-grained system access to authorized users. The follow lesson adds custom claims to the Firebase user record to build a role-based access control feature that is secured with Firestore rules.
Set Custom Claims from the Command Line It is not possible (currently) to add custom claims from the Firebase Console. This means we need to write some code with Firebase Admin.</description>
    </item>
    
    <item>
      <title>Lenny Cunningham</title>
      <link>https://fireship.io/contributors/lenny-cunningham/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/lenny-cunningham/</guid>
      <description>Lenny is a self taught hobbiest for WebApp Development. Owns Acadiana Apps. A small company specializing in custom web app development, and Google Apps Script integrations.</description>
    </item>
    
    <item>
      <title>Algolia Fulltext Search Cloud Functions</title>
      <link>https://fireship.io/lessons/algolia-cloud-functions/</link>
      <pubDate>Sun, 25 Aug 2019 10:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/algolia-cloud-functions/</guid>
      <description>One of the most commonly encountered limitations of Cloud Firestore (and GCP) is full-text search. This functionality is essential if you need to query complex text patterns in a database or filter results by multiple dynamic properties. My favorite solution to this limitation is Algolia, which provides a powerful, developer-friendly, search &amp;amp; discovery API. In the following lesson you will learn how to sync your Firestore data to an Algolia index via Cloud Functions.</description>
    </item>
    
    <item>
      <title>Setup Google Maps With Svelte 3</title>
      <link>https://fireship.io/snippets/setup-google-maps-with-svelte/</link>
      <pubDate>Thu, 22 Aug 2019 13:31:18 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-google-maps-with-svelte/</guid>
      <description>The following guide will show you how to configure Google Maps with Svelte 3.
Enable the Google Maps JS API First, you must enable Google Maps with a Google Cloud or Firebase project, then grab your API from the credentials tab.
Enable the Google Maps JavaScript API from a GCP or Firebase project.
Detect when Google Maps is Ready Google Maps will be loaded asynchronously and the script can notify us when it is ready by calling a callback function.</description>
    </item>
    
    <item>
      <title>Setup Nest on Cloud Functions</title>
      <link>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</link>
      <pubDate>Mon, 12 Aug 2019 10:26:16 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</guid>
      <description>The following snippet demonstrates two different techniques for setting up NestJS on Firebase Cloud Functions.
Option A - Point a Function to Nest The first setup modifies the functions configuration to use the Nest /dist output, as opposed to the default functions directory. This option is ideal if you have an existing Nest app.
Step 1 - Create Nest App command line nest generate app server Step 2 - Add Functions Add functions, then delete the automatically generated directory.</description>
    </item>
    
    <item>
      <title>Build a Chatbot With Dialogflow</title>
      <link>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</link>
      <pubDate>Mon, 12 Aug 2019 09:45:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</guid>
      <description>Chatbots make it possible for the average developer to deliver excellent (and affordable) customer service at scale - Building conversational experiences has never been easier thanks to the Dialogflow conversation platform.
Dialogflow is a free tool on Google Cloud for creating voice and text conversational interfaces. It uses Natural Language Processing NLP technology, allowing you to create experiences similar to Google Assistant or Amazon Alexa. In following lesson creates a chatbot from scratch in the three main steps:</description>
    </item>
    
    <item>
      <title>MySQL on Cloud Functions</title>
      <link>https://fireship.io/lessons/sql-firebase-typeorm/</link>
      <pubDate>Tue, 06 Aug 2019 12:31:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sql-firebase-typeorm/</guid>
      <description>Firebase&amp;rsquo;s NoSQL databases are excellent for flexibility and scale, but there are times when a traditional relational SQL database is a better tool for the job (or you may not have a choice with a legacy system). Does that mean you should ditch the Firebase platform altogether? Of course not! In fact, connecting a Cloud SQL instance to Firebase Cloud Functions is one of the easiest ways to hook up a database to a web or mobile app.</description>
    </item>
    
    <item>
      <title>Flutter File Uploads</title>
      <link>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</link>
      <pubDate>Fri, 26 Jul 2019 12:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</guid>
      <description>Camera apps are one of the most popular niches in the market, with the recent viral growth of FaceApp being a prime example. There are a variety of plugins for Flutter that make camera-based features easy to develop, and when combined with Firebase the results can be easily uploaded your backend cloud infrastructure. The following lesson demonstrates the following features:
Capture images from the device camera or image gallery. Crop, rotate, and resize an image file.</description>
    </item>
    
    <item>
      <title>Modern Web Scraping Guide</title>
      <link>https://fireship.io/lessons/web-scraping-guide/</link>
      <pubDate>Wed, 17 Jul 2019 13:01:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web-scraping-guide/</guid>
      <description>In a perfect world, every website provides free access to data with an easy-to-use API&amp;hellip; but the world is far from perfect. However, it is possible to use web scraping techniques to manually extract data from websites by brute force. The following lesson examines two different types of web scrapers and implements them with NodeJS and Firebase Cloud Functions.
Initial Setup Let&amp;rsquo;s start by initializing Firebase Cloud Functions with JavaScript.</description>
    </item>
    
    <item>
      <title>SendGrid Transactional Email Guide</title>
      <link>https://fireship.io/lessons/sendgrid-transactional-email-guide/</link>
      <pubDate>Fri, 05 Jul 2019 10:26:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sendgrid-transactional-email-guide/</guid>
      <description>Transactional email is the art of communicating with users in response to events or conditions, and is an important consideration for the overall user experience (UX) of an app. One of the most popular email APIs is SendGrid (recetly acquired by Twilio). It is flexible, provides a NodeJS SDK, and starts with free tier for small projects. The following lesson will teach you how to send email from your app based on user-driven events with Firebase Cloud Functions.</description>
    </item>
    
    <item>
      <title>In App Purchases in Flutter</title>
      <link>https://fireship.io/lessons/flutter-inapp-purchases/</link>
      <pubDate>Tue, 25 Jun 2019 06:14:51 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-inapp-purchases/</guid>
      <description>Flutter recently launched official support for In App Purchases (IAP) and provides a unified plugin for both iOS and Android. Native mobile apps that collect payments for digital goods on the Apple App Store and/or Google Play Store are typically required to use the In App Purchases API, which means services like Stripe and Paypal are out of the question (with the exception of payments for physically shipped goods). In reality, In App Purchases are far more lucrative for digital products, with the game Candy Crush generating $4MM in revenue per day in 2018.</description>
    </item>
    
    <item>
      <title>PayPal Checkout</title>
      <link>https://fireship.io/lessons/paypal-checkout-frontend/</link>
      <pubDate>Sun, 23 Jun 2019 06:44:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/paypal-checkout-frontend/</guid>
      <description>In February 2019, the PayPal Checkout API received a much needed facelift that brought massive improvements to the developer experience. The new v2 API has detailed documentation on par with Stripe and offers one of the smoothest paths to start accepting payments and/or subscriptions in a progressive web app. The following lesson will show you how to start accepting payments entirely from your frontend JavaScript code with PayPal Checkout with your choice of Angular, React, and Vue.</description>
    </item>
    
    <item>
      <title>FCM Push Notifications for Flutter</title>
      <link>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</link>
      <pubDate>Tue, 11 Jun 2019 06:37:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</guid>
      <description>When used correctly, push notifications can be an excellent way to drive user engagement and keep your app in focus on a consistent basis. When used incorrectly, they can be annoying and motivate users to simply uninstall your app and never look back. Fortunately, Firebase Cloud Messaging (FCM) provides a sophisticated set of tools to send notifications only to users who actually want them. The following lesson will teach you how to configure FCM in Flutter to broadcast both Topic-based, Device-based, and Segment-based push notifications.</description>
    </item>
    
    <item>
      <title>Collection Group Query with Firestore</title>
      <link>https://fireship.io/lessons/collection-group-query-firestore/</link>
      <pubDate>Mon, 20 May 2019 08:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/collection-group-query-firestore/</guid>
      <description>At Google I/O 2019, Firebase launched a new query type, Collection Group Queries, which can have a major impact on your data modeling decisions. It allows you to combine all subcollections that share the same name, then query them together. Prior to this feature release, it was common to model one-to-many relationships with root collections that contained a field (or foreign key if you will) pointing to the parent document. Root collections are still fine, but this new feature makes it far more practical to organize your data in a natural hierarchy.</description>
    </item>
    
    <item>
      <title>Flutter Provider with Firebase</title>
      <link>https://fireship.io/lessons/advanced-flutter-firebase/</link>
      <pubDate>Sat, 11 May 2019 13:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-flutter-firebase/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
    <item>
      <title>Firebase Performance Quickstart</title>
      <link>https://fireship.io/lessons/firebase-performance-quickstart/</link>
      <pubDate>Thu, 09 May 2019 15:45:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-performance-quickstart/</guid>
      <description>Firebase announced Performance Monitoring for the Web at Google I/O 2019 - a long-awaited feature for Progressive Web Apps. It provides a simple way to add robust performance analytics to your app with minimal effort, while also adding the ability to run custom traces in your code. In the following lesson, you will learn how to add this new tool to any web app and setup traces to find performance bottlenecks.</description>
    </item>
    
    <item>
      <title>Flutter Drag and Drop Basics</title>
      <link>https://fireship.io/lessons/flutter-drag-and-drop-basics/</link>
      <pubDate>Tue, 30 Apr 2019 11:45:14 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-drag-and-drop-basics/</guid>
      <description>The following lesson will teach you how to build a simple drag-and-drop UI with the Draggable and DragTarget widgets. The demo app is a kid&amp;rsquo;s game (ages 2 to 4) that requires the user to drag a fruit emoji üçã from the left column to the matching color on the right. If successfully dropped it will mark that item complete ‚úÖ and the score will increase by one. The user can also reset the game at any time by pressing on the floating action button.</description>
    </item>
    
    <item>
      <title>Svelte Realtime Todo List with Firebase</title>
      <link>https://fireship.io/lessons/svelte-v3-overview-firebase/</link>
      <pubDate>Wed, 24 Apr 2019 07:01:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/svelte-v3-overview-firebase/</guid>
      <description>Svelte 3 was announced recently and it delivers a refreshing alternative to the big three component frameworks/libraries of React, Angular, and Vue. In fact, calling it a framework/library would not be very accurate, because Svelte is actually a compiler that turns your code into Vanilla JS, meaning it does not need to ship the entire framework in the JS bundle. Its focus on simplicity really stands out and makes for a very developer-friendly JavaScript experience.</description>
    </item>
    
    <item>
      <title>Dynamic Scheduled Background Jobs in Firebase</title>
      <link>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</link>
      <pubDate>Sat, 20 Apr 2019 07:44:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</guid>
      <description>Last week, Firebase announced a new scheduled cron trigger for Cloud Functions that makes it easy to run serverless code on a set time interval. This function type is special because it combines the powers of Cloud Scheduler and Pub/Sub to guarantee security that you don&amp;rsquo;t have with a regular HTTP-triggered function.
Scheduling a function on a static time interval is straight forward, but what if you want to build a dynamic task queue where users can schedule their own background jobs?</description>
    </item>
    
    <item>
      <title>Firebase Microservices With Cloud Run</title>
      <link>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</link>
      <pubDate>Tue, 09 Apr 2019 10:25:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</guid>
      <description>Yesterday Google Cloud released a game-changing new product called Cloud Run that allows you to run and scale stateless Docker containers in a serverless execution environment powered by Knative.
Benefits
Run backend microservices with any programming language and/or dependencies. Serverless pricing, only pay for what you use. Scale automatically. Prevent cloud vendor lock-in. Some of the things you might do with it&amp;hellip;
Deploy server-rendered SSR frontend apps to Firebase Hosting, like Angular Universal, Nuxt, or Next.</description>
    </item>
    
    <item>
      <title>Cron Example Schedules</title>
      <link>https://fireship.io/snippets/crontab-crash-course/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/crontab-crash-course/</guid>
      <description>Cron is a long-running process used on Linux servers that ticks at specific times based on the crontab pattern (with a minimum of 1 minute of granularity). It is used to setup cronjobs, which are background tasks that get executed at a specific time or interval. Also, Firebase now has a time-triggered Cloud Function that can be set with crontab. The following guide will teach you how to schedule cronjobs in this format.</description>
    </item>
    
    <item>
      <title>How to Use Firestore Increment</title>
      <link>https://fireship.io/snippets/firestore-increment-tips/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-tips/</guid>
      <description>One of the common challenges faced when working with Firestore is maintaining an accurate count of a value on a document (or multiple documents). One cannot simply update a counter and expect it to be accurate because many clients might be competing to update the same value simultaneously. The solution to this problem has traditionally been to deploy a Cloud Function that runs the update in a transaction to guarantee an atomic update.</description>
    </item>
    
    <item>
      <title>Flutter Flare 2D Animation Basics</title>
      <link>https://fireship.io/lessons/animated-navigation-flutter-flare/</link>
      <pubDate>Tue, 02 Apr 2019 11:00:35 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/animated-navigation-flutter-flare/</guid>
      <description>Whenever I see an awesome UI element in a native app my first question is How do I make that in Flutter?. That&amp;rsquo;s exactly what I asked when I downloaded the Giphy Android app recently, which has runs a colorful and fun animation for each icon in the bottom navbar.
These animations are complex. Hypothetically, they could be created in Flutter natively with a custom painter, but that would be very challenging and painful.</description>
    </item>
    
    <item>
      <title>Use Coder to Run VS Code on Google Cloud</title>
      <link>https://fireship.io/lessons/vscode-cloud-coder-tensorflow/</link>
      <pubDate>Sun, 31 Mar 2019 05:49:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/vscode-cloud-coder-tensorflow/</guid>
      <description>Turning VS Code into a full IDE requires you to carefully blend your favorite extensions and packages for the type of development work you perform. It can take hours or even days to get your development environment fine-tuned for optimal productivity. But what happens upgrade to a new computer? Or need to share your IDE with somebody on the other side of the world? Or maybe you just need more compute resources&amp;hellip;</description>
    </item>
    
    <item>
      <title>Flutter Firestore Animated SlideShow</title>
      <link>https://fireship.io/lessons/flutter-slider-like-reflectly/</link>
      <pubDate>Wed, 20 Mar 2019 10:18:59 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-slider-like-reflectly/</guid>
      <description>One of the best examples of a well-designed UI in Flutter is Reflectly - an AI-powered journal app for iOS and Android. The following lesson will show you how to build an animated slideshow carousel inspired by the work of Reflectly. In addition, we will wire it up to Firestore to make it filterable and able to scale to an infinite number of pages.
PageView Widget Intro The most import widget in this lesson is the PageView, which makes it possible to easily build sliding pages.</description>
    </item>
    
    <item>
      <title>Flutter Skeleton Text with Shimmer Animation</title>
      <link>https://fireship.io/snippets/flutter-skeleton-text/</link>
      <pubDate>Tue, 19 Mar 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/flutter-skeleton-text/</guid>
      <description>Skeleton text is a strategy that improves the perceived load time of content by rendering a blank placeholder that roughly matches the size of the expected content. This method was originally made popular by Facebook, but is now used on many popular apps and websites.
Use this skeleton text widget as a placeholder when loading data from an external source.
Flutter Skeleton Text Widget The skeleton text effect can be created in Flutter with an animated loop over a color gradient.</description>
    </item>
    
    <item>
      <title>BigQuery ML Quickstart</title>
      <link>https://fireship.io/lessons/bigquery-ml-quickstart/</link>
      <pubDate>Wed, 13 Mar 2019 18:23:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/bigquery-ml-quickstart/</guid>
      <description>BigQuery is a serverless Data Warehouse that makes it easy to process and query massive amounts of data. It supports standard SQL queries in a web-based UI, via the command line, or with a variety of client libraries. In addition, it recently landed support for integrated machine learning, allowing you to build predictive models without data science skills.
What can you do with Big Query?
Stream data to business intelligence tools like Data Studio, Tableau, etc.</description>
    </item>
    
    <item>
      <title>Flutter State Management Guide</title>
      <link>https://fireship.io/lessons/flutter-state-management-guide/</link>
      <pubDate>Fri, 08 Mar 2019 15:19:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-state-management-guide/</guid>
      <description>State management is a hot-button topic that brings out strong opinions in developers, and in extreme cases results in Twitter fights. In my experience, people tend to over-engineer features that would otherwise be straight-forward because they assume a full-blown state management library is necessary. In some cases, they just add complexity, but in others, they can be extremely valuable. My recommendation is to analyze these strategies closely and choose an approach that feels right for your app&amp;rsquo;s requirements and your team&amp;rsquo;s style.</description>
    </item>
    
    <item>
      <title>Stripe Elements and Checkout with Angular</title>
      <link>https://fireship.io/lessons/stripe-elements-angular/</link>
      <pubDate>Mon, 04 Mar 2019 08:48:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-elements-angular/</guid>
      <description>üí∞ Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Stripe provides several JavaScript libraries - Stripe Elements &amp;amp; Checkout - that makes it easy to collect and validate payment sources like credit cards, bank accounts, and more. The following lesson will show you how to integrate Stripe&amp;rsquo;s clientside JS packages into an Angular application.
Step 0. Prerequisites This lesson only covers the frontend code.</description>
    </item>
    
    <item>
      <title>Flutter Animated Radial Menu</title>
      <link>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</link>
      <pubDate>Sun, 24 Feb 2019 09:14:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</guid>
      <description>Building a flashy animated radial menu in Flutter can be done with ease thanks to the Transform widget and staggered animations. The following lesson will teach you how to compose flutter animations into a cool rotating circular widget, which can easily maintain 60FPS on modern smartphones.
Step 1 - Initial Setup We will define two custom widgets for this demo.
The parent RadialMenu is a StatefulWidget responsible for defining an AnimationController that sets a duration for the animation.</description>
    </item>
    
    <item>
      <title>Trusted Web Activity - PWA to Play Store Guide</title>
      <link>https://fireship.io/lessons/pwa-to-play-store/</link>
      <pubDate>Wed, 20 Feb 2019 10:27:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-to-play-store/</guid>
      <description>Web developers already have a variety of interesting options for using JavaScript to write native mobile apps with tools like React Native, Cordova/Ionic, NativeScript, just to name a few. I&amp;rsquo;ve spent many hours brainstorming with clients on this topic and recently summed up my thoughts about Hybrid App development, but there&amp;rsquo;s a brand new strategy to add to the list&amp;hellip; Trusted Web Activities (TWA). The following guide will show you how to covert any progressive web app to an Android App on the Google Play Store.</description>
    </item>
    
    <item>
      <title>GitHub Action deploying Angular App to Firebase Hosting</title>
      <link>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</link>
      <pubDate>Tue, 19 Feb 2019 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</guid>
      <description>This snippet helps you to setup GitHub Actions in your Angular project to build and deploy your app to Firebase on git push.
Step 1. Actions In your repository click on Actions.
Step 2. New Workflow To create your first workflow click on Set up a workflow yourself
Your first GitHub action looks like this:
main.yml name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Run a one-line script run: echo Hello, world!</description>
    </item>
    
    <item>
      <title>Upload Multiple Files to Firebase Storage with Angular</title>
      <link>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</link>
      <pubDate>Mon, 18 Feb 2019 13:45:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</guid>
      <description>Firebase makes it easy to upload a huge payload of raw files a cloud storage bucket. The following lesson will teach you how to upload files to Firebase Storage with Angular, including several advanced concepts about how to&amp;hellip;
Handle multiple simultaneous concurrent file uploads. Save the resulting download URL to Firestore. Display a progress bar and provide UI controls to pause, cancel, and resume uploads. This post first appeared as Episode 82 on AngularFirebase.</description>
    </item>
    
    <item>
      <title>Darshan Gowda</title>
      <link>https://fireship.io/contributors/darshan-gowda/</link>
      <pubDate>Thu, 14 Feb 2019 21:30:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/darshan-gowda/</guid>
      <description>Darshan is a freelancer from Bangalore, India. He loves to code, teach and play basketball.</description>
    </item>
    
    <item>
      <title>Flutter Realtime Geolocation Firebase</title>
      <link>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</link>
      <pubDate>Wed, 13 Feb 2019 06:22:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</guid>
      <description>Looking to build a realtime geolocation app like Lyft, Postmates, or Waze? It is easier than you might think when you combine the power of Flutter, Google Maps, and Firebase. The following lesson will show you how use Google Maps in Flutter, then listen to a realtime feed of geolocation data in Firestore queried by its distance from a centerpoint - made possible by the GeoFlutterFire package.
Special thanks to Darshan Gowda for creating the GeoFlutterFire library and providing the example code for this lesson.</description>
    </item>
    
    <item>
      <title>Working with Firestore Arrays</title>
      <link>https://fireship.io/lessons/firestore-array-queries-guide/</link>
      <pubDate>Tue, 12 Feb 2019 14:46:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-array-queries-guide/</guid>
      <description>Have you ever wanted to make a query to Firestore for all documents with an array containing a certain value? Array queries are possible as of Firebase JS SDK v5.3.0. In addition, the SDK also added support for the atomic addition and removal of elements on an array field.
Firestore Arrays Queries Firebase introduced an array-contains operator that can be used with where to query array fields. It will return all documents that contain a the provided value in the array.</description>
    </item>
    
    <item>
      <title>Angular Router Animations Guide</title>
      <link>https://fireship.io/lessons/angular-router-animations/</link>
      <pubDate>Sun, 10 Feb 2019 07:42:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-router-animations/</guid>
      <description>Smooth animated router transitions will impress your users and set your app apart from the crowd. In the following lesson, you will learn how to build complex router transition animations in Angular.
Here&amp;rsquo;s a summary of the animations that we will build from scratch.
fader basic fade in slider slide in from left or right transformer translate, scale, and rotate stepper complex keyframed animation sequences Router Animations Setup Let&amp;rsquo;s start by taking care of the initial Angular Router animations boilerplate.</description>
    </item>
    
    <item>
      <title>TypeScript Decorators by Example</title>
      <link>https://fireship.io/lessons/ts-decorators-by-example/</link>
      <pubDate>Sun, 03 Feb 2019 09:39:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ts-decorators-by-example/</guid>
      <description>One of coolest, yet least approachable features in TypeScript is the Decorator. We see Decorators implemented by the Angular Framework for classes like @Component, properties like @ViewChild, and methods like @HostListener, but have you ever considered building your own from scratch? They seem magical üçÑ in practice, but they are just JavaScript functions that allow us to annotate our code or hook into its behavior - this is known as Metaprogramming.</description>
    </item>
    
    <item>
      <title>Flutter Widget Positioning - A Guide for the CSS Developer</title>
      <link>https://fireship.io/lessons/flutter-widget-positioning-guide/</link>
      <pubDate>Tue, 29 Jan 2019 07:10:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-widget-positioning-guide/</guid>
      <description>The addition of Flexbox to CSS revolutionized the way we position elements on the web. It makes the alignment of elements on a 2D plane automatic and well, flexible. Fortunately, Flutter uses the same principles for aligning widgets with Flex, Column, and Row. In addition, it supports absolute and fixed positioning with Stack.
The following lesson will teach you how to position containers and build layouts in Flutter with direct comparisons to CSS Flexbox.</description>
    </item>
    
    <item>
      <title>Realtime Presence with Angular &#43; Firebase</title>
      <link>https://fireship.io/lessons/realtime-presence-angular-firebase/</link>
      <pubDate>Sun, 27 Jan 2019 14:04:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-presence-angular-firebase/</guid>
      <description>Social media and chat apps (think Slack, Facebook Messenger, etc) often have presence detection systems that can indicate if your friends are online, offline, or away. Traditionally, features like this have been challenging because you need manage state between the client &amp;amp; server, but the Firebase RealtimeDB makes it easy. The following lesson will show you how to build a realtime user presence system with Angular and Firebase.
The browser on the left shows the actual user activity, while the browser on the right is just a neutral observer of the presence changes</description>
    </item>
    
    <item>
      <title>Intersection Observer for Lazy-Loaded Images</title>
      <link>https://fireship.io/snippets/intersection-observer-lazy-load-images/</link>
      <pubDate>Fri, 25 Jan 2019 05:48:23 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/intersection-observer-lazy-load-images/</guid>
      <description>IntersectionObserver is a browser API that allows you to detect when an element is visible in the window or within a scrollable element. Browser support is pretty decent with Safari being the main holdout at the time of this article, but there is a polyfill to support Apple users.
Packages using IntersectionObserver:
QuickLink - Adds a preload tag to visible links on the page. Vanilla Lazy Load - Lazy loaded images.</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>Flutter for JavaScript Developers</title>
      <link>https://fireship.io/lessons/flutter-for-js-developers/</link>
      <pubDate>Sun, 20 Jan 2019 12:28:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-for-js-developers/</guid>
      <description>So you&amp;rsquo;re a web developer working with JavaScript and curious about Flutter? That was me about one-year ago, and at the time, learning an uncommon language like Dart seemed ridiculous because there are existing hybrid app frameworks in JS. Then I tried it&amp;hellip; To my surprise, I was able to write productive code right out of the gate. The following lesson will compare Dart/Flutter to JS/ReactNative.
Source: FlutterDev subreddit
Throughout this lesson, you will see the üëâ emoji.</description>
    </item>
    
    <item>
      <title>How to Participate on Github</title>
      <link>https://fireship.io/snippets/git-how-to-participate-on-github/</link>
      <pubDate>Thu, 17 Jan 2019 05:42:54 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/git-how-to-participate-on-github/</guid>
      <description>Contributing to open-source is satisfying on many levels. Not only does it validate your skills for recruiters, but it leads to higher quality software that empowers developers to build better products. But submitting your first pull request on GitHub can be intimidating. The goal of this guide is to give you a clear set of steps for contributing any OS project (like fireship.io üî•).
This guide assumes that you have a Github account and git installed on your machine.</description>
    </item>
    
    <item>
      <title>Continuous Integration and Deployment with Google Cloud Build</title>
      <link>https://fireship.io/lessons/ci-cd-with-google-cloud-build/</link>
      <pubDate>Thu, 17 Jan 2019 04:17:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ci-cd-with-google-cloud-build/</guid>
      <description>Continuous Integration and Delivery, aka CI/CD, aka DevOps is the process of automating build, test, and deploy tasks between code changes to your software. The practice can yield a wide range of benefits, but most importantly it keeps your development code looking nearly identical to your production code. The adoption of devops has been a macrotrend in tech for the last few years and presents opportunites for both large teams and independent entrepreneurs.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Google SignIn &#43; Firestore</title>
      <link>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</link>
      <pubDate>Mon, 14 Jan 2019 07:43:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</guid>
      <description>The following lesson will show you how to implement Google SignIn with Flutter and Firebase, then update a custom user profile in Firestore. We will demonstrate several key concepts related to building reactive UIs with realtime streaming data, including
Global Streams and Observables with RxDart StatefulWidget StreamBuilder Step 0: Prerequisites Install FlutterFire Step 1: Build Out the UI First, let&amp;rsquo;s start with a basic UI. Notice we have placeholders for LoginButton() and UserProfile() - these will be created later in the lesson.</description>
    </item>
    
    <item>
      <title>Flutter Google Maps Setup</title>
      <link>https://fireship.io/snippets/setup-google-maps-flutter/</link>
      <pubDate>Sat, 12 Jan 2019 10:13:59 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-google-maps-flutter/</guid>
      <description>The following guide is designed to get you up and running with Google Maps in Flutter for iOS and Android, as well as device GPS tracking.
Also refer to the official Flutter Google Maps Plugin setup docs as needed.
Google Maps for Flutter Get your Google Maps API Key First, obtain an API key for Google Maps within the context of a Google Cloud Platform project.
iOS Setup file_type_config ios/Runner/AppDelegate.m #include &amp;#34;AppDelegate.</description>
    </item>
    
    <item>
      <title>Firestore Security Rules Cookbook</title>
      <link>https://fireship.io/snippets/firestore-rules-recipes/</link>
      <pubDate>Wed, 02 Jan 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-rules-recipes/</guid>
      <description>The purpose of this reference is to demonstrate common Firestore security rules patterns. Many of the rules below are extracted into functions to maximize code reuse.
Basic Recipes Let&amp;rsquo;s start with some common Firestore security use cases needed by almost every app.
At runtime, Firebase rules look for the first valid allow == true rule and NOT vice-versa. This is very important to keep in mind, as you might think you secured a path, only for it to be allowed somewhere else.</description>
    </item>
    
    <item>
      <title>Google OAuth with @angular/fire</title>
      <link>https://fireship.io/lessons/angularfire-google-oauth/</link>
      <pubDate>Sat, 29 Dec 2018 06:51:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angularfire-google-oauth/</guid>
      <description>A solid user authentication system is the bedrock of most web applications. In fact, when starting a new project I genernally focus on user auth first because so many other features depend the user&amp;rsquo;s auth state. The following lesson will show you how to build an OAuth authentication feature using the Google sign-in method. In addition, we will save custom user data to the Firestore database, making it possible to customize a user&amp;rsquo;s profile and/or query all users.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming with Typescript</title>
      <link>https://fireship.io/lessons/object-oriented-programming-with-typescript/</link>
      <pubDate>Mon, 10 Dec 2018 15:34:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/object-oriented-programming-with-typescript/</guid>
      <description>OOP is usually defined by its two core concepts: Polymorphism and Inheritance. Although both concepts are related, they are not the same.
In this article, we‚Äôll take a simple approach to Inheritance, as it‚Äôs the most representative of the two.
But instead of getting bored with theory and definition, let‚Äôs take a look at a real life example, that illustrates perfectly the advantages of Inheritance.
Like all apps, our example web app needs, at some point, to persist some data to a database.</description>
    </item>
    
    <item>
      <title>Testing Firestore Security Rules With the Emulator</title>
      <link>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</link>
      <pubDate>Wed, 31 Oct 2018 18:20:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</guid>
      <description>üî• Deep dive with the Firestore Security Rules Master Course.
The most exciting announcement (in my opinion) at Firebase Summit 2018 was the local emulator for Firestore and RTDB, making it possible to test security rules locally or on a CI server. If you&amp;rsquo;re brand new to Firebase security, make sure to watch the Firestore Security Rules Guide.
Project Setup The following lesson creates an isolated testing environment solely for testing rules logic.</description>
    </item>
    
    <item>
      <title>Infinite Virtual Scroll with the Angular CDK</title>
      <link>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</link>
      <pubDate>Sun, 21 Oct 2018 18:16:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</guid>
      <description>The release of Angular v7 gives us access to a new virtual scroll behavior in the Material Component Development Kit (CDK). It provides tools for looping over a lists that only render elements when they are visible in the viewport, preventing lag an janky-ness in the browser. As an added bonus, it exposes a reliable API for building an infinite scroll where new batches of data are retrieved automatically when the user scrolls to the bottom of the list.</description>
    </item>
    
    <item>
      <title>Group Chat with Firestore</title>
      <link>https://fireship.io/lessons/build-group-chat-with-firestore/</link>
      <pubDate>Sun, 14 Oct 2018 18:11:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-group-chat-with-firestore/</guid>
      <description>One of the most compelling reasons to choose Firebase as your backend is to meet the demands of complex realtime features, like group chat. Managing state between multiple clients in realtime is a major undertaking, but with Firebase it becomes almost trivial. The following lesson will teach you how to build a simple group chat app with Cloud Firestore.
This lesson is accompanied by a real demo! Give Firestore Mega Chat a whirl.</description>
    </item>
    
    <item>
      <title>ML Engine Tutorial with Python</title>
      <link>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</link>
      <pubDate>Mon, 01 Oct 2018 18:03:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</guid>
      <description>Building a predictive model is only half the battle when it comes to machine learning - you also need a way for clientside apps to consume it and add value to the user experience. Today we&amp;rsquo;re going to wire up a collection of Google Cloud services to train and deploy a Python-based ML model to the cloud. The following lesson is designed for product-minded developers who want to get an idea of the end-to-end ML process in the cloud.</description>
    </item>
    
    <item>
      <title>Using the Google Calendar API</title>
      <link>https://fireship.io/lessons/google-calendar-api-with-firebase/</link>
      <pubDate>Mon, 24 Sep 2018 17:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-calendar-api-with-firebase/</guid>
      <description>I use Google Calendar almost every day and really appreciate apps that can coordinate important events for me automatically. Today, we&amp;rsquo;ll learn how to integrate Google&amp;rsquo;s JavaScript API client with Firebase to make authenticated requests to the Calendar API on the behalf of a user. This article was inspired by the real-world requirements of a Broadway Life, a tour company in NYC and needs to perform full CRUD operations on their clients&amp;rsquo; calendar.</description>
    </item>
    
    <item>
      <title>How to Pass Data to Modals in Ionic</title>
      <link>https://fireship.io/snippets/use-componentprops-to-pass-data-to-modals-in-ionic-4/</link>
      <pubDate>Sat, 22 Sep 2018 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/use-componentprops-to-pass-data-to-modals-in-ionic-4/</guid>
      <description>The snippet below shows you how to use componentProps to pass data into an Ionic 4 modal. This technique is useful when updating dynamic data.
Pass Data into Ionic4 Modals In previous versions of Ionic, the NavParams class was used to read the passed data. This is no longer necessary and should not be used, although it does still work technically. In version 4, sharing data with a modal is easier than ever&amp;hellip;</description>
    </item>
    
    <item>
      <title>How to Share Code between JavaScript Apps</title>
      <link>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</link>
      <pubDate>Tue, 04 Sep 2018 17:48:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</guid>
      <description>The right project structure for your app depends primarily on (1) its complexity, and (2) the size of your team. In this lesson, I will show you how to use NPM packages to share code in a big JavaScript project that contains multiple apps.
Monorepos versus Multiple Repos There are two high-level strategies for handling source control in a large complex web application - monorepo and multiple repos. Some developers have very strong preferences for one or the other, but it mostly just boils down to a series of tradeoffs.</description>
    </item>
    
    <item>
      <title>Ionic Routing and Navigation Guide</title>
      <link>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</link>
      <pubDate>Tue, 04 Sep 2018 17:43:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</guid>
      <description>The single most important change from Ionic v3 to v4 is how routing and navigation is handled. In the past, Ionic used its own push-pop NavController, but has since decieded to use the Angular Router directly. This is a very smart move in my opinion because Angular&amp;rsquo;s router is just so powerful - but it does have a bit of a learning curve. In the following lesson, you will learn the fundamental concepts required to be successful with routing and navigation in Ionic 4.</description>
    </item>
    
    <item>
      <title>Deploy Multiple Sites to Firebase Hosting</title>
      <link>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</link>
      <pubDate>Wed, 29 Aug 2018 17:35:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</guid>
      <description>Firebase hosting recently announced support for multiple hosting targets within a single project. I am thrilled to see this feature because it is such a common requirement for real world apps. For example, you might have two separate apps - one for customers, one for admin employees - both of which share the same database and functions. In the past, we would have to get clever with deployment by either sharing the same URL or juggling multiple projects.</description>
    </item>
    
    <item>
      <title>Custom Rxjs Operators by Example</title>
      <link>https://fireship.io/lessons/custom-rxjs-operators-by-example/</link>
      <pubDate>Sun, 26 Aug 2018 17:28:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-rxjs-operators-by-example/</guid>
      <description>Understanding how to build custom RxJS operators will provide a huge boost to your knowledge of reactive programming and Observables. Not to mention, they have a wide variety of practical use cases and provide excellent code reuse. The following lesson will show you how to build a handful of custom pipeable operators from scratch.
What is an RxJS Operator? An operator is just a pure function that takes the source Observable as it&amp;rsquo;s input and returns an Observable as its output, usually modified in some way.</description>
    </item>
    
    <item>
      <title>Join Collections in Firestore</title>
      <link>https://fireship.io/lessons/firestore-joins-similar-to-sql/</link>
      <pubDate>Thu, 23 Aug 2018 17:30:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-joins-similar-to-sql/</guid>
      <description>How do I perform a SQL JOIN in Firestore? - it&amp;rsquo;s a difficult question almost all developers will come across. The simple answer for ALL NoSQL databases is that it&amp;rsquo;s just not possible in an apples-to-apples way. We can&amp;rsquo;t perform this operation server-side, however, we can get clever with custom RxJS operators to solve similar problems - plus gain the added benefit of maintaining realtime listeners on all data.
Our operators require AngularFire and will add some RxJS magic to its existing Observables to tackle the challenge of joining Firestore documents and collections together easily in Firestore.</description>
    </item>
    
    <item>
      <title>Introduction to Rxfire Rxjs for Firebase</title>
      <link>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</link>
      <pubDate>Wed, 22 Aug 2018 15:22:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</guid>
      <description>Maintaining async callback-based code is one of the most challenging tasks a developer will face. Over the past few years, RxJS has become the leading tool for reactive programming in JavaScript, so it only makes sense that Firebase would leverage it to make realtime streams more developer-friendly. In the following lesson, you will take an early look at a new officially-supported library called RxFire.
Principles Not a replacement for AngularFire2 in Angular projects.</description>
    </item>
    
    <item>
      <title>Ionic Intro Slider for New Users</title>
      <link>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</link>
      <pubDate>Sun, 19 Aug 2018 15:16:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</guid>
      <description>A useful intro slider is a sign of a highly polished mobile app. A quick tutorial for using your app provides an excellent user experience and can reduce bounce rates for new users.
In the following lesson, you will learn how to use the slider component in Ionic 4 to build a multi-step introduction that educates users how to use your app.
Ionic slides as an app tutorial for new users</description>
    </item>
    
    <item>
      <title>Testing RxJS Observables With Jest</title>
      <link>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</link>
      <pubDate>Sat, 18 Aug 2018 18:39:19 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</guid>
      <description>The snippet below shows you how to test asynchronous RxJS Observables with Jest. It&amp;rsquo;s probably easier than you think.
Testing a Single Emitted Value Let&amp;rsquo;s imagine we have an Observable that should emit a string, which we can create with the of helper. The key to making this test work is passing it the the done keyword, otherwise it will finish before the data is emitted.
You can then write your expectations inside of the the subscribe callback, then call done() when you&amp;rsquo;re ready for the test to finish.</description>
    </item>
    
    <item>
      <title>Ionic CSS Variables Dynamic Theme Generator</title>
      <link>https://fireship.io/lessons/css-variables-in-ionic-4/</link>
      <pubDate>Tue, 14 Aug 2018 15:10:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-variables-in-ionic-4/</guid>
      <description>One of the major changes to theming in Ionic 4 is the use of CSS variables, which are simply CSS values that can be reused across multiple elements or components. Unlike variables in Sass or LESS that need to be compiled, they can be changed and interpreted by the browser on the fly. This is an extremely powerful feature for web components that use the Shadow DOM, like Ionic 4.</description>
    </item>
    
    <item>
      <title>Image Thumbnail Resizer Cloud Function</title>
      <link>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</link>
      <pubDate>Thu, 09 Aug 2018 15:06:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</guid>
      <description>The single most common Cloud Function use-case for a storage bucket is to resize images to thumbnails in the background. I&amp;rsquo;ve built quite a few of these functions and have developed some techniques to make the process more developer-friendly and performant. The following lesson demonstrates how to resize a Cloud Storage upload to a set of thumbnails using Cloud Functions v2.x.
Thumbnails resized by a Firebase Cloud Function
Initial Setup Want to master the fundamentals of serverless?</description>
    </item>
    
    <item>
      <title>Metered Stripe Subscription Billing</title>
      <link>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</link>
      <pubDate>Sat, 14 Jul 2018 14:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</guid>
      <description>üí∞ Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Today we will something very ambitious - our own Software-as-a-Service (SaaS) product that bills users based on metered usage. The app is a hypothetical project management tool with a pay-as-you-go billing system based on the volume of usage (just like the Blaze plan in Firebase). A user can create multiple projects, each at a cost of $1.</description>
    </item>
    
    <item>
      <title>Realtime GeoQueries with Firestore</title>
      <link>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</link>
      <pubDate>Tue, 10 Jul 2018 05:59:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</guid>
      <description>The ability to query by geographic coordinates in Firestore is a highly requested feature because many successful apps - like Uber, Pokemon Go, Instagram, etc - use realtime maps as part of the core user experience. Today you will learn how to build a realtime Google map using Firestore as the data source.
Fingers-crossed: It&#39;s possible that Firestore will have native support for Geolcation queries in the future, but there is no public timeline for this feature that I&#39;m aware of</description>
    </item>
    
    <item>
      <title>Arjun Yelamanchili</title>
      <link>https://fireship.io/contributors/arjun-yelamanchili/</link>
      <pubDate>Wed, 13 Jun 2018 10:22:57 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/arjun-yelamanchili/</guid>
      <description>Arjun is a full-stack developer and future blockchain billionaire based in Denver, CO</description>
    </item>
    
    <item>
      <title>Dominik ≈†imon√≠k</title>
      <link>https://fireship.io/contributors/dominik-simonik/</link>
      <pubDate>Wed, 13 Jun 2018 10:22:57 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/dominik-simonik/</guid>
      <description>Dominik ≈†imon√≠k is software engineer developing apps in Angular, Java, Dart, Nodejs and Ruby. He is GDG Organizer and lector for women at community Czechitas in the Czech republic. When he is not at the computer he does some sort of geek things like drone races etc.</description>
    </item>
    
    <item>
      <title>Patrick Mullot</title>
      <link>https://fireship.io/contributors/patrick-mullot/</link>
      <pubDate>Wed, 13 Jun 2018 10:22:57 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/patrick-mullot/</guid>
      <description>Patrick is a part-time full-stack developer, with (too) many years of experience as a Project Developer and programmer. He now specializes in the Firebase ecosystem. When not in his tech-cave, he enjoys traveling and have long walks with his family and their 4 legged friends</description>
    </item>
    
    <item>
      <title>Radi Cho</title>
      <link>https://fireship.io/contributors/radi-cho/</link>
      <pubDate>Wed, 13 Jun 2018 10:22:57 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/radi-cho/</guid>
      <description>Radi is a student, developing futuristic projects, websites and Android apps as a hobby. He also plays with ML, IoT, Cloud services and anything else that looks like the next big thing.</description>
    </item>
    
    <item>
      <title>Zack DeRose</title>
      <link>https://fireship.io/contributors/zack-derose/</link>
      <pubDate>Wed, 13 Jun 2018 10:22:57 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/zack-derose/</guid>
      <description>Zack is a GDE for Google, as well as an Engineer and Engineering Manager for Nx, and an avid fan of Supabase.
Zack always bets on Javascript (and Typescript), but he also enjoys Postgres, making videos, and has been dabbling recently in shit-posting on Twitter.</description>
    </item>
    
    <item>
      <title>Auto-save Reactive Form with Firestore</title>
      <link>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</link>
      <pubDate>Mon, 28 May 2018 14:17:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</guid>
      <description>Forms are one of the most critical, yet most cumbersome aspects of app development. They require a ton of HTML markup and require complex validation rules for a good user experience. Almost all forms must be synced to a backend database, leaving us faced a state management conundrum that is not always easy to solve. In this lesson, my goal is to provide you with a reliable solution for syncing your frontend forms to any backend database.</description>
    </item>
    
    <item>
      <title>Test Firebase Cloud Functions with Jest</title>
      <link>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</link>
      <pubDate>Wed, 23 May 2018 14:25:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</guid>
      <description>Firebase Cloud Functions makes building a serverless backend easy and fun, but the proper way to write unit tests in this environment is not exactly clear. In this episode, I will show you how to setup a testing environment for your functions and use Jest to implement unit tests.
Jest is my preferred testing framework for Cloud Functions, but the official docs use Mocha, Sinon, and Chai. Either approach works.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Basics Guide</title>
      <link>https://fireship.io/lessons/basics-reactive-forms-in-angular/</link>
      <pubDate>Mon, 21 May 2018 14:03:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/basics-reactive-forms-in-angular/</guid>
      <description>As part of the Angular Basics Series, we will be taking a comprehensive look at Reactive Forms from the ground up. The official documentation is a very long read, so this guide is designed to help you master the basics by focusing on the bare essential concepts you must know.
Reactive Forms for PROs Advanced Auto-saving Firestore Form Email/Password Auth with Reactive Forms 1. Reactive Forms Fundamentals At this point, it is assumed that you have an existing Angular project started with the CLI v6+.</description>
    </item>
    
    <item>
      <title>Build an Angular Library With NgPackagr</title>
      <link>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</link>
      <pubDate>Wed, 02 May 2018 13:55:36 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</guid>
      <description>In this lesson, I will show you how to build an Angular Library from scratch using NgPackagr. My main motivation for this article is that Google Analytics recently changed their main API to gtag.js, but solid Angular libraries were lacking, so I decided to build one from scratch. NgPackagr made the bundling process very easy.
Angular packages are standardized by the Angular Package Format, but generating this output manually is difficult.</description>
    </item>
    
    <item>
      <title>Angular Elements Guide</title>
      <link>https://fireship.io/lessons/angular-elements-quick-start-guide/</link>
      <pubDate>Sun, 29 Apr 2018 13:43:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-elements-quick-start-guide/</guid>
      <description>It is exciting to finally see the adoption of web components going mainstream. There are many tools available for building them, but none can match the power and stability of Angular Elements. The following lesson will provide a handful of useful techniques aimed at building complex production-ready custom elements.
In addition to this post, check out these resources:
Manfred Steyer&amp;rsquo;s Angular Elements Series Sam Julian&amp;rsquo;s Getting Started with Angular Elements Nrwl&amp;rsquo;s Five Reasons to Use Angular Elements Angular Elements QuickStart Rendering without Zone.</description>
    </item>
    
    <item>
      <title>NGXS Quick Start</title>
      <link>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</link>
      <pubDate>Fri, 06 Apr 2018 13:32:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</guid>
      <description>In this lesson we will get up and running with NGXS - a redux-style state management system for Angular. My goal in this lesson is to get you familiar with the core concepts that underpin this library and make some balanced comparisons to NgRx.
This article is a work in progress. Let me know what you think about NGXS in the comments. NgRx vs NGXS The big question on everybody&amp;rsquo;s mind is how does NGXS compare to NgRx?</description>
    </item>
    
    <item>
      <title>TensorFlow.js Quick Start Tutorial</title>
      <link>https://fireship.io/lessons/tensorflow-js-quick-start/</link>
      <pubDate>Sat, 31 Mar 2018 13:25:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/tensorflow-js-quick-start/</guid>
      <description>Google launched TensorFlow.js at TensorFlow Dev Summit 2018, which opens the door to building machine learning (ML) models in the browser. This means web developers can do things like&amp;hellip;
Build privacy-friendly AI features. Data never leaves the client, so you can build deep learning models without ever seeing the actual data. Use pre-trained Python ML models in your app. There are tons of successful Python-based models that you can load into the browser and start running predictions with minimal code.</description>
    </item>
    
    <item>
      <title>CSV to Firestore</title>
      <link>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</link>
      <pubDate>Sun, 25 Mar 2018 17:34:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</guid>
      <description>If you want to migrate your existing database to Firestore, you might be wondering&amp;hellip; How do I import JSON or CSV to Firestore?. In this lesson, I will provide you with a reliable pipeline for reading raw data and parsing it to a writable format for Firestore.
Everybody has different data modeling needs, so I will teach you how to quickly roll out your own NodeJS CSV-to-Firestore command line import tool.</description>
    </item>
    
    <item>
      <title>Passwordless Signup With Firebase on the Web</title>
      <link>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</link>
      <pubDate>Tue, 20 Mar 2018 17:25:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</guid>
      <description>Passwordless auth - or email-link signup - is a cool new user authentication option in the Firebase SDK that was released in v4.12.0 on March 20th, 2018. Rather than force a user to remember a password, we simply send them an email with a link that creates the JSON Web Token when they redirect back to the site. As a user of apps, I see this method quickly replacing traditional passwords and personally find it much more user-friendly.</description>
    </item>
    
    <item>
      <title>The Ultimate Beginners Guide to Firebase</title>
      <link>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</link>
      <pubDate>Sun, 25 Feb 2018 16:13:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</guid>
      <description>Today we&amp;rsquo;re going back to the basics in Firebase by building a basic web app from scratch. Even though this is beginner level, I think it&amp;rsquo;s very useful to write code with Firebase using nothing but plain JS, especially if you&amp;rsquo;re used to developing with a framework library like AngularFire, ReactFire, or Vuefire. In addition, I want give you my Why Firebase? opinion and explain why it&amp;rsquo;s my goto cloud provider.</description>
    </item>
    
    <item>
      <title>Typeahead Autocomplete with Firestore</title>
      <link>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</link>
      <pubDate>Tue, 20 Feb 2018 14:40:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</guid>
      <description>In this lesson, we will build a basic typeahead or autocomplete system using nothing but Firestore. It relies on an object/map data structure that exposes some of the more advanced query patterns available to us. The database contains a collection of movie documents, and our goal is to build a search form that will auto-populate results based on the movie&amp;rsquo;s title.
Typeahead demo using only Firestore
Method 1: Offset with the Magic uf8ff Character A few months ago I created a RealtimeDB Autocomplete lesson that uses &#39;\uf8ff&#39;, which is a very high Unicode point.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Async Validation</title>
      <link>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</link>
      <pubDate>Sat, 10 Feb 2018 15:40:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</guid>
      <description>Reactive form validation can be a complex and difficult feature to implement, especially if you need to validate fields asynchronously. Angular ships with a few built-in validators, but they can only take you so far&amp;hellip;
Today, we are building a custom async validator that can verify username uniqueness in Firebase Firestore. My goal is to show you async validator for your reactive forms that you can apply to virtually any backend data source.</description>
    </item>
    
    <item>
      <title>Advanced Data Modeling with Firestore by Example</title>
      <link>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</link>
      <pubDate>Mon, 05 Feb 2018 15:31:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</guid>
      <description>In the previous lesson, we learned the fundamentals of relational data modeling with Firestore. Today I want to push further and look at several more practical examples. In addition to data modeling, we will look at techniques like duplication, aggregation, composite keys, bucketing, and more.
Keep in mind, Firestore is still in beta. Firebase engineers hinted at some really cool features on the roadmap (geo queries, query by array of ids) - I&#39;ll be sure to keep you posted :)</description>
    </item>
    
    <item>
      <title>Firestore NoSQL Relational Data Modeling</title>
      <link>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</link>
      <pubDate>Mon, 05 Feb 2018 15:20:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</guid>
      <description>Looking for advanced data modeling concepts and examples? Take the Firestore Data Modeling Course.
Data modeling in a NoSQL environment is tricky - especially if you come from a RDBMS background (MySQL, Postgres, etc) because you will need to unlearn many of the core principles already solidified in your brain. Firestore uses a document-oriented NoSQL model, similar to MongoDB and CouchDB, which leads to fundamentally different data structuring decisions.
The goal of this lesson is to examine data modeling principles in Firestore with comparisons to SQL.</description>
    </item>
    
    <item>
      <title>Extract Text from Images</title>
      <link>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</link>
      <pubDate>Fri, 02 Feb 2018 15:08:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>Google Cloud Vision with Ionic - Not Hotdog App</title>
      <link>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</link>
      <pubDate>Wed, 24 Jan 2018 15:00:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</guid>
      <description>In this lesson, we&amp;rsquo;re going to combine Google&amp;rsquo;s Google&amp;rsquo;s Cloud Vision API with Ionic and Firebase to create a native mobile app that can automatically label and tag images. But most importantly, it can determine if an image is a hotdog or not - just like the SeeFood app that made Jin Yang very rich.
Just a few years ago, this technology would have been unreachable by the average developer. You would need to train your own deep neural network on tens-of-thousands of images with massive amounts of computing power.</description>
    </item>
    
    <item>
      <title>Mobile Touch Animation with HammerJS</title>
      <link>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</link>
      <pubDate>Thu, 28 Dec 2017 14:17:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</guid>
      <description>If your app targets users on mobile devices (80% of apps do), then you should carefully consider the impact of touch gestures, i.e. swipe, tap, pinch, etc. In this lesson, I will show you how to listen to touch gestures with HammerJS, then apply cool animations to them with Angular.
In addition, we will learn how to customize the configuration of HammerJS and build our own custom events beyond the basic ones provided.</description>
    </item>
    
    <item>
      <title>Material Data Tables With Firestore</title>
      <link>https://fireship.io/lessons/material-data-tables-with-firestore/</link>
      <pubDate>Tue, 12 Dec 2017 05:49:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/material-data-tables-with-firestore/</guid>
      <description>In this lesson, I will show you how to build an Angular Material data datable that is sortable and filterable, while maintaining a realtime connection with Firestore. A dialog modal will be used share data between material components and update documents in Firestore.
This tutorial also makes suggestions for performance optimization when dealing with hundreds rows in the view. The end result is a table that&amp;hellip;
Uses Firebase/Firestore as the data source.</description>
    </item>
    
    <item>
      <title>Role Based Authorization With Firestore</title>
      <link>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</link>
      <pubDate>Thu, 07 Dec 2017 05:39:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</guid>
      <description>Learn more about data modeling in Firestore in the full course.
In this lesson, I will show you how to assign roles to users with the Firestore NoSQL database, then secure them on both the frontend and backend. This feature is known as role-based access control and is commonly used in forums, social media, etc - Stack Overflow Privileges is an excellent specimen of this feature in the wild (minus the ranking system).</description>
    </item>
    
    <item>
      <title>PWA Performance Optimization Tips</title>
      <link>https://fireship.io/lessons/pwa-performance-optimization-angular/</link>
      <pubDate>Sat, 25 Nov 2017 12:27:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-performance-optimization-angular/</guid>
      <description>The following lesson contains a handful of tips and ideas aimed at optimizing the Lighthouse PWA performance score. Any good optimization starts with a solid analysis, so I will also provide you with some advanced tools for analyzing the performance for your progressive web app.
High Performance PWAs with Angular PWA performance is largely dependent on the way you design your app. In this demo, I am following the PRPL pattern from Polymer as closely as possible.</description>
    </item>
    
    <item>
      <title>CSV Exports from Firestore</title>
      <link>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</link>
      <pubDate>Tue, 14 Nov 2017 12:13:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</guid>
      <description>A common business requirement for a professional app is to export data as comma separated values, or CSV format. Data formatted this way can be used by spreadsheet software like Microsoft Excel and Google Docs, but it can also be used as input to many popular machine learning libraries. It this lesson, I will show you how to export a Firestore collection in CSV format using Firebase Cloud Functions and a Storage Bucket.</description>
    </item>
    
    <item>
      <title>Multi-step Reactive Form for Email-Password Signup</title>
      <link>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</link>
      <pubDate>Sun, 12 Nov 2017 12:05:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</guid>
      <description>Firebase password auth can be configured with a few lines of code, but what happens if you need additional custom user data before authorizing activity in your app? In this lesson, my goal is to show you several important concepts.
Email/Password Auth Reactive Forms in Angular Security with custom Firebase user data What are we Building? This lesson is based off of the [Firstarter PWA starter app](https://firestarter-96e46.firebaseapp.com/), which is organized into NgModules.</description>
    </item>
    
    <item>
      <title>Middleware for Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</link>
      <pubDate>Wed, 08 Nov 2017 11:57:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</guid>
      <description>In Angular SEO Part 1, I introduced the awesomeness of Headless Chrome and Rendertron. The only thing missing is the middleware that can determine if incoming traffic is a bot or a regular user. Rendertron has officially supported Express middleware or you can create your own from scratch using Firebase Cloud Functions. As you will see, it&amp;rsquo;s not all that difficult.
This method works really well with Firebase and here&amp;rsquo;s why&amp;hellip;</description>
    </item>
    
    <item>
      <title>Angular SEO with Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</link>
      <pubDate>Mon, 06 Nov 2017 11:43:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</guid>
      <description>‚ö†Ô∏è As of 2020, SEO and SSR in Angular is much-improved. Consider Angular Universal as your first option before this approach.
The single most common question I receive is How do I make Angular SEO friendly. Usually my answer is Well, it&amp;rsquo;s complicated&amp;hellip; no more. Today I bring you a simple solution to this very important problem.
I am going to show you a novel SEO strategy to make an Angular5 (or any Progressive Web App for that matter) visible to search engine crawlers and social media link preview bots.</description>
    </item>
    
    <item>
      <title>Cloud Functions Data Aggregation</title>
      <link>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</link>
      <pubDate>Sun, 29 Oct 2017 11:27:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</guid>
      <description>The following lesson demonstrates how to make Firestore queries faster and more cost-effective by aggregating data from a subcollection to its parent. Aggregation is simply the process of totaling up a bunch of documents and calculating combined or cumulative information about them.
A Firebase Cloud Function configured with a Firestore database trigger makes it possible to perform this task automatically whenever a document changes. This demo simulates the relationship between blog posts and a subcollection of comments.</description>
    </item>
    
    <item>
      <title>Star Ratings System With Firestore</title>
      <link>https://fireship.io/lessons/star-ratings-system-with-firestore/</link>
      <pubDate>Tue, 17 Oct 2017 11:17:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/star-ratings-system-with-firestore/</guid>
      <description>In this lesson, we will build a five-star rating system from scratch with Angular and Firebase.
Knowing how to implement star reviews in Angular is an important skill for a developer because the same concepts are used for likes, hearts, votes, and many other common UX features.
Firestore Data Structure How do we model star-ratings in a NoSQL database like firestore? In the SQL world, this is known as a many-to-many-through` relationship where Users have many Movies through Reviews AND Movies have many Users through Reviews</description>
    </item>
    
    <item>
      <title>Http With Angular Quick Start</title>
      <link>https://fireship.io/lessons/http-with-angular-quick-start/</link>
      <pubDate>Wed, 11 Oct 2017 10:56:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/http-with-angular-quick-start/</guid>
      <description>In this lesson, we are going to use the Angular HTTP Client to make API calls to an API endpoint to retrieve data. My goal is to teach you the fundamental concepts needed to start using one of the thousands of RESTful APIs in the world.
This lesson uses the newer `HttpClientModule` introduced in Angular 4.3, not to be confused with the old standalone HttpModule.
To simulate requests to a real API we are using JSONPlaceholder.</description>
    </item>
    
    <item>
      <title>Infinite Scroll Firestore Angular</title>
      <link>https://fireship.io/lessons/infinite-scroll-firestore-angular/</link>
      <pubDate>Wed, 11 Oct 2017 05:26:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-scroll-firestore-angular/</guid>
      <description>A few months ago, I showed you how to create a basic infinite scroll feature using Realtime Database. Today, we will create a more sophisticated and flexible pagination service with Firestore to facilitate infinite scroll.
As an added bonus, the feature will be able to scroll upwards, which is useful when scrolling back in time through a text feed - think Facebook Messenger or Slack.
Get the [Firestore Pagination source code](https://github.</description>
    </item>
    
    <item>
      <title>Build a Weather App with Angular</title>
      <link>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</link>
      <pubDate>Mon, 09 Oct 2017 11:07:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</guid>
      <description>In this lesson, you will learn how to retrieve weather data from an API and use it in a frontend Angular app. A secure backend built with Firebase Cloud Functions will make the HTTP request to ensure sensitive data is not exposed in Angular.
The end result looks like this, but you will have access to whole bunch of weather data to completely customize the user experience.
Weather forecasting app demo</description>
    </item>
    
    <item>
      <title>Secure Firebase Cloud Functions for Authenticated Users</title>
      <link>https://fireship.io/lessons/secure-firebase-cloud-functions/</link>
      <pubDate>Wed, 27 Sep 2017 07:08:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secure-firebase-cloud-functions/</guid>
      <description>Learn more in the Cloud Functions Master Course.
In this lesson, I will show you how to run Firebase Cloud Functions ONLY when users are authenticated with a valid user ID.
Endpoint security is critical - especially if using a paid 3rd party API like SendGrid or Twilio. There are certain situations where only want a function to run if the user is currently authenticated. For example, you may have a function that sends transactional email to a user via SendGrid.</description>
    </item>
    
    <item>
      <title>Desktop Apps with Electron and Angular</title>
      <link>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</link>
      <pubDate>Thu, 21 Sep 2017 06:56:25 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</guid>
      <description>In this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.
This lesson covers the following topics:
Configure Electron 1.7 with Angular. Build a simple timer app in Angular. Package the app for install on Windows 10, macOS, and Linux Ubuntu.</description>
    </item>
    
    <item>
      <title>Angular NgRx Starter Guide</title>
      <link>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</link>
      <pubDate>Sun, 27 Aug 2017 06:25:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</guid>
      <description>The Redux JavaScript library was made famous by React and Elm, but its design patterns can also be applied in Angular. The general idea is that all application data is kept in a single JavaScript object on the client, giving you a predictable tree of state changes (we&amp;rsquo;ll get into this later). In this lesson, we are going to build a simple NgRx Angular app from scratch, that will eventually become this NgRx-Fire demo app.</description>
    </item>
    
    <item>
      <title>Push Notifications on the Web</title>
      <link>https://fireship.io/lessons/push-messages-with-firestore/</link>
      <pubDate>Tue, 01 Aug 2017 05:14:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/push-messages-with-firestore/</guid>
      <description>A few months ago, I released a video covering Firebase Cloud Messaging (FCM) with the Realtime Database. Today, I am going to update this code with the following improvements:
Save FCM tokens in Firestore. Send Firebase push messages to multiple devices simultaneously. Angular 5 firebase cloud messaging demo in angular
Setting Up Firebase Cloud Messaging in Angular There are several steps you must take in Angular to get started with cloud messaging.</description>
    </item>
    
    <item>
      <title>Build Realtime Maps with Mapbox GL</title>
      <link>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</link>
      <pubDate>Fri, 28 Jul 2017 04:59:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</guid>
      <description>In this lesson, I am going to cover the basics of building realtime map features with Angular4, Firebase, and MapBox. Here‚Äôs a highlight of what is covered in the code below. How to obtain a user‚Äôs current location How to connect Firebase data with Mapbox How to format GeoJSON data. How to quickly customize map styles. realtime interaction between two maps
Initial Setup Start by signing up for a free Mapbox account, then installing mapbox-gl in your Angular project.</description>
    </item>
    
    <item>
      <title>Angular Animations Examples</title>
      <link>https://fireship.io/lessons/angular-animations-examples/</link>
      <pubDate>Mon, 24 Jul 2017 04:50:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-animations-examples/</guid>
      <description>Animation is often the X-factor that sets remarkable apps apart from average apps. In this lesson, I provide five basic animation examples based on Angular 4.3+. This article covers the animation techniques I find most useful when building Angular apps, but check out this excellent post on new Angular 4.2 animation features for a more comprehensive look at the latest features.
All animations can be boiled down into two simple steps:</description>
    </item>
    
    <item>
      <title>Firebase Phone Authentication</title>
      <link>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</link>
      <pubDate>Wed, 19 Jul 2017 04:34:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</guid>
      <description>Signing up users with a phone number adds certain degree of trust or confidence to an app. In this lesson, we are going to use the new phone authentication paradigm from Firebase in our Angular 4 app. At this time, phone auth is not supported in AngularFire, so we will use the firebase JavaScript SDK directly. Phone auth can also be used to link accounts, providing an effective solution for two-factor authentication.</description>
    </item>
    
    <item>
      <title>Facebook-Inspired Reactions From Scratch</title>
      <link>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</link>
      <pubDate>Wed, 05 Jul 2017 16:00:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build a Facebook-inspired reaction component. It works by mapping each reaction type to an integer then saves it with an associated userId. This is similar to the reddit voting system lesson, with some added complexity to manage the various reaction types. Importing the Graphics First, let‚Äôs add some graphics to the assets folder.</description>
    </item>
    
    <item>
      <title>Angular Toast Message Notifications From Scratch</title>
      <link>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</link>
      <pubDate>Mon, 03 Jul 2017 15:50:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build toast notifications from scratch with Angular 4. There are a couple of good Angular toast packages that solve this problem, but it‚Äôs not very hard to do from scratch. This implementation provides a feed of 5 messages/notifications, which the user can dismiss by clicking. A service will manage the notifications, so they can be observed or updated from any component.</description>
    </item>
    
    <item>
      <title>Twitter Inspired Follow System with Firebase</title>
      <link>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</link>
      <pubDate>Tue, 27 Jun 2017 15:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
The idea of user following and unfollowing has been around since the rise of Twitter, but add this feature into an app is not as easy as you might think. It is an inherently relational problem, so making it work with a NoSQL database requires some tradeoffs. In this lesson, we are going to build twitter-inspired follow and unfollow feature using on Firebase and Angular 4.</description>
    </item>
    
    <item>
      <title>Text Translator With Firebase Cloud Functions Onwrite and Angular</title>
      <link>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</link>
      <pubDate>Sun, 25 Jun 2017 15:17:21 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
In this lesson, we are going to use Firebase Cloud Functions to run code in the background when new data is created in a specific part of the database, using the onWrite event handler. This will allow us to abstract CPU or memory intensive tasks outside of the frontend Angular app.</description>
    </item>
    
    <item>
      <title>Custom Usernames With Firebase Authentication and Angular</title>
      <link>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</link>
      <pubDate>Sat, 24 Jun 2017 15:27:32 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app and the custom Firebase Usernames tutorial.
Firebase authentication is super convenient, but you can‚Äôt easily assign custom usernames out of the box. In this lesson, we are going to give users custom usernames and asynchronously validate their availability during the signup process. On every keyup, the username will be checked for duplicates, so we can display a helpful message to the user.</description>
    </item>
    
    <item>
      <title>Reddit Style Upvoting in Angular 4 and Firebase</title>
      <link>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</link>
      <pubDate>Fri, 23 Jun 2017 15:09:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
Upvoting and downvoting is an excellent ay handle community-driven content curation. Reddit is the most famous example of this feature, but it is common throughout the interwebs on places like StackOverflow, Kaggle, and others. In this lesson, we will use Angular 4 and Firebase to implement upvoting with ease.</description>
    </item>
    
    <item>
      <title>Sharing Data between Angular Components - Four Methods</title>
      <link>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</link>
      <pubDate>Thu, 20 Apr 2017 14:13:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</guid>
      <description>Learning Angular? Check out the full Angular 9 Course
Data sharing is an essential concept to understand before diving into your first Angular project. In this lesson, I provide four different methods for sharing data between Angular components.
The Parent-Child-Sibling structure of our Angular app.
Parent to Child: Sharing Data via Input This is probably the most common and straightforward method of sharing data. It works by using the @Input() decorator to allow data to be passed via the template.</description>
    </item>
    
    <item>
      <title>Reactive Crud App With Angular and Firebase Tutorial</title>
      <link>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</link>
      <pubDate>Mon, 10 Apr 2017 13:06:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
We‚Äôre going to be building a basic list of items that you do CRUD to - create, read, update, delete. The feature itself is nothing special, it‚Äôs really just a skeleton that demonstrates how to do the most common operations with Angular and Firebase. The realtime database from Firebase uses NoSQL, so think of CRUD in the following terms.</description>
    </item>
    
    <item>
      <title>Canceled</title>
      <link>https://fireship.io/fail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/fail/</guid>
      <description> Purchase Cancelled Looks like you we&#39;re not able to complete your purchase. If you ran into any issues or have questions, email hello@fireship.io
You may now close this tab </description>
    </item>
    
    <item>
      <title>Dashboard</title>
      <link>https://fireship.io/dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/dashboard/</guid>
      <description>XP User ID: PRO Status: Account Email: Sign Out Enterprise Account Use the form below to assign your seats. Each account will get a welcome email and have full access after signing in. You can always revoke access later.
Manage account FAQ How do I get my T-shirt &amp; Sticker? You should have received an email with a link to a Google Form after upgrading. If not, you can access with the /pro command in Discord</description>
    </item>
    
    <item>
      <title>Finn Krestel</title>
      <link>https://fireship.io/contributors/finn-krestel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/finn-krestel/</guid>
      <description>Finn Krestel is a Java, JavaScript, CSS and HTML developer. He mainly uses React or Preact for interactive web applications. Next.js is his favorite SSR framework.</description>
    </item>
    
    <item>
      <title>Get Started</title>
      <link>https://fireship.io/get-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/get-started/</guid>
      <description>Getting Starting Learning Paths This is how you do it.
webdev react firebase flutter Get in Touch This is how you do it.
Experience Points This is how you do it.</description>
    </item>
    
    <item>
      <title>Jarrett Helton</title>
      <link>https://fireship.io/contributors/jarrett-helton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/jarrett-helton/</guid>
      <description>Jarrett is a code enthusiast from the Central Michigan area. He is a jack-of-all-trades engineer with experiences in just about everything you can shake a stick at. When not slangin&amp;rsquo; code for federal health care contracts, he finds enjoyment with side projects through different LLCs and is always open for more consultations. On the occasion he is not coding or sleeping, you can find him chilling with his wife and daughter.</description>
    </item>
    
    <item>
      <title>Jeroen Ouwehand</title>
      <link>https://fireship.io/contributors/jeroen.ouwehand/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/jeroen.ouwehand/</guid>
      <description>Jeroen is a full-stack developer from Rotterdam (The Netherlands) and is currently working for a bank. Sometimes writes posts on Medium or contribute on Github.</description>
    </item>
    
    <item>
      <title>Jorge Dacosta</title>
      <link>https://fireship.io/contributors/jorge-dacosta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/jorge-dacosta/</guid>
      <description>Jorge Dacosta is Co-Founder of Splash Ink (üá¶üá¥ üáøüá¶), Graphic Designer and Open Source (OSS) enthusiast who loves share his knowledge.</description>
    </item>
    
    <item>
      <title>Marc Stammerjohann</title>
      <link>https://fireship.io/contributors/marc-stammerjohann/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/marc-stammerjohann/</guid>
      <description>Marc Stammerjohann is a freelance full-stack software engineer developing apps with Ionic, Angular, Typescript, Java and Kotlin. He is interested in Web Components, nest and Prisma lately. In his free time he enjoys inline skating, traveling, diving and reading books.</description>
    </item>
    
    <item>
      <title>pro</title>
      <link>https://fireship.io/pro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/pro/</guid>
      <description>Become an awesome developer Learn the essential skills for modern fullstack app development while having tons of fun in the process. ü¶Ñ You are a pro member! Only use this page if purchasing a gift or enterprise account
Plan $ Unlimited access to PRO courses Quizzes with hand-picked meme prizes Invite to private Discord chat Free Sticker mailed to your door Lifetime $ 399 once All PRO-tier benefits Single payment, lifetime access 4,200 bonus xp points Next Level T-shirt shipped worldwide Yo!</description>
    </item>
    
    <item>
      <title>Shawn Eubanks</title>
      <link>https://fireship.io/contributors/shawn-eubanks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/shawn-eubanks/</guid>
      <description>devEUBE = technology geek and expert problem solver. I love to learn anything new, and I am especially interested and passionate about emerging technologies in cloud computing and web development. I am driven and passionate about sharing skills and knowledge with others and helping others succeed using new and innovative technologies.
Passionate Hobbies: Learning New Media, Gaming and Design / Development of media and web presences.</description>
    </item>
    
    <item>
      <title>Success!</title>
      <link>https://fireship.io/success/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/success/</guid>
      <description> Purchase Confirmed! Thank you for your order! You should now have access to your content. If you run into any issues email hello@fireship.io
You may now close this tab </description>
    </item>
    
    <item>
      <title>Wei Lun</title>
      <link>https://fireship.io/contributors/weilun/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fireship.io/contributors/weilun/</guid>
      <description>Wei Lun is a bachelor&amp;rsquo;s degree student in Software Engineering based in Malaysia. He actively learning trendy technologies, mainly in web, mobile, cloud technologies and solution architect.</description>
    </item>
    
  </channel>
</rss>
