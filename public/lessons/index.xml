<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lessons on Fireship</title>
    <link>https://fireship.io/lessons/</link>
    <description>Recent content in Lessons on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Mar 2023 13:08:58 -0700</lastBuildDate><atom:link href="https://fireship.io/lessons/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Carta de achamento da America Portuguesa</title>
      <link>https://fireship.io/lessons/ffmpeg-useful-techniques/</link>
      <pubDate>Wed, 01 Mar 2023 13:08:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ffmpeg-useful-techniques/</guid>
      <description>Sobre a carta de Achamento do Brasil Questões 1. Como são descritos os Ameríndios? Pardos Bons rostos, bons narizes; Bem feitos. Sem-vergonhas(literalmente) 2. Que presentes lhe são dados Galinha(s) Ramal Sombreiro 3. Como se chamava o piloto? Afonso Lopes 4. Qual a importância dos pilotos neste texto? Eram o primeiro à tomar iniciativa nas expedições. 5. ø 6.Que costumes distintos surpreendem os portugues? Nudez &amp;amp; inocência. 7. Como é descrito o capitão Bem vestido, usava joias « &amp;ldquo;(&amp;hellip;), com um colar de ouro mui grande ao pescoço(&amp;hellip;) &amp;quot; » 8.</description>
    </item>
    
    <item>
      <title>Pocketbase Chat App</title>
      <link>https://fireship.io/lessons/pocketbase-chat-app/</link>
      <pubDate>Sat, 17 Dec 2022 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pocketbase-chat-app/</guid>
      <description>In the following tutorial we will build a chat app with Pocketbase and Svelte. Pocketbase is a backend (inspired by Firebase) structured as a single executable file. It provides a realtime DB based on SQLite and user authentication system that allows us to quickly prototype and deploy a chat app.
Pocketbase Setup Serve it Locally First, download pocketbase then run the executable locally with ./pocketbase serve. You should have access to an admin dashboard that looks like this:</description>
    </item>
    
    <item>
      <title>Setup Node with TypeScript</title>
      <link>https://fireship.io/lessons/typescript-nodejs-setup/</link>
      <pubDate>Sat, 26 Nov 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-nodejs-setup/</guid>
      <description>The following lesson demonstrates how to setup a Node.js (v18)project with TypeScript when using ES Modules. TS version 4.7 introduced a new NodeNext compliler option that can translate ES Modules to CommonJS modules. It simplifies the setup process for Node.js projects, but there are important caveats to be aware of.
More about ES Modules in TS from the TypeScript docs.
Setup Package.json Module Type npm init -y npm install -D typescript @types/node Update the package.</description>
    </item>
    
    <item>
      <title>Realtime SSR with Nuxt3 and Firebase</title>
      <link>https://fireship.io/lessons/nuxt-3-firebase/</link>
      <pubDate>Thu, 28 Apr 2022 12:14:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/nuxt-3-firebase/</guid>
      <description>Nuxt3 hit release candidate recently with a variety of awesome new features. But you might be wondering&amp;hellip; how do I use Nuxt3 with Firebase? There is no documented best practice as of today, so I put together a demo that is capable of server-side rendering (SSR) via Firestore, followed by hydration to secure realtime data on the client. This gives a website the benefits SEO-friendly HTML, without sacrificing the power the realtime data updates after the initial page load.</description>
    </item>
    
    <item>
      <title>10 Design Patterns in TypeScript</title>
      <link>https://fireship.io/lessons/typescript-design-patterns/</link>
      <pubDate>Sun, 13 Mar 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-design-patterns/</guid>
      <description>Design patterns is a highly influential book published in 1994 by four computer scientists called the Gang of Four. It was originally aimed at C++ developers, but has since become a book for anyone interested in object-oriented software design.
In the following lesson, we will look at 10 different patterns from this book with simplified modern examples in TypeScript. For additional patterns and examples, check out Refactoring Guru.
Creational Creational patterns are related to the creation of new objects.</description>
    </item>
    
    <item>
      <title>Code This, Not That - Python Edition</title>
      <link>https://fireship.io/lessons/code-this-not-that-python-edition/</link>
      <pubDate>Sun, 20 Feb 2022 15:31:36 +0100</pubDate>
      
      <guid>https://fireship.io/lessons/code-this-not-that-python-edition/</guid>
      <description>Introduction Python is one of the most popular languages in the world. It has many practical applications including web development, desktop apps, IoT, data analysis, and machine learning. This lesson contains ten tips that will make your code more pythonic.
To make life simpler, we’ll use the following key to denote a few categories
💩 - code that you should avoid. 🤔 - code that is generally ok, but ignores built-in language features.</description>
    </item>
    
    <item>
      <title>Twitter Bot Tutorial</title>
      <link>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</link>
      <pubDate>Thu, 03 Feb 2022 09:09:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</guid>
      <description>Full tutorial under development&amp;hellip;</description>
    </item>
    
    <item>
      <title>Web3 NFT Tutorial</title>
      <link>https://fireship.io/lessons/web3-solidity-hardhat-react-tutorial/</link>
      <pubDate>Mon, 17 Jan 2022 13:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web3-solidity-hardhat-react-tutorial/</guid>
      <description>Over the last few months, you&amp;rsquo;ve likely heard there term Web3 thrown around in the media. It generally refers to decentralized webapps that use Ethereum smart contracts to replace traditional web servers. Sounds pretty cool, let&amp;rsquo;s build one!
The following tutorial demonstrates the entire process of building a smart contact, then interacting with it on the web using Ethers.js and React. The app can mint non-fungible tokens (NFTs) when a user transfers Ether from a wallet like MetaMask.</description>
    </item>
    
    <item>
      <title>Fulltext Search with Redis and Next.js</title>
      <link>https://fireship.io/lessons/redis-nextjs/</link>
      <pubDate>Mon, 10 Jan 2022 19:49:05 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/redis-nextjs/</guid>
      <description>Redis is an in-memory key-value store that is often used as a cache to make traditional databases faster. However, it has evolved into a multimodel database capable of fulltext search, graph relationships, AI workloads, and more.
In the following tutorial, we use Next.js and Redis Enterprise Cloud to build a webapp that can store JSON data in the cloud, then query it with results that update instantly in the UI.</description>
    </item>
    
    <item>
      <title>Riverpod with Firebase</title>
      <link>https://fireship.io/lessons/firebase-riverpod-flutter/</link>
      <pubDate>Sat, 27 Nov 2021 13:45:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-riverpod-flutter/</guid>
      <description>Riverpod is a reactive state-management library for Flutter that can simplify the way global data is shared throughout your application. It is especially useful with Firebase because it allows to you easily join Streams together, like a Firestore document with a Firebase Auth user.
The following tutorial demonstrates how to use Riverpod to manage Firebase Auth state and relational realtime data in Firestore.
Learning Objectives
Riverpod Basics w/ Firebase Listen to the current user&amp;rsquo;s auth state Join realtime Firestore data based on current user&amp;rsquo;s UID Setup This tutorial assumes you have already installed Firebase into your app.</description>
    </item>
    
    <item>
      <title>Cryptography Concepts for Node.js Developers</title>
      <link>https://fireship.io/lessons/node-crypto-examples/</link>
      <pubDate>Thu, 28 Oct 2021 13:29:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/node-crypto-examples/</guid>
      <description>The mysterious discipline of cryptography is the backbone of the internet. Without it, there would be no secrets and no privacy in the digital world. As a developer, you don’t need to understand the math that goes into cryptography, but it’s absolutely essential to know key concepts like hashes, salt, keypairs, encryption, and signing.
The following tutorial explains essential cryptography concepts and implements them with the builtin Node.js crypto module.</description>
    </item>
    
    <item>
      <title>API Monetization with Stripe Metered Billing</title>
      <link>https://fireship.io/lessons/api-monetization-stripe/</link>
      <pubDate>Sun, 24 Oct 2021 10:12:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/api-monetization-stripe/</guid>
      <description>Building a monetized API for a SaaS product might seem like a daunting task, but it&amp;rsquo;s actually relatively simple when you bring in tools like Stripe&amp;rsquo;s Metered Billing feature. There are 4 main steps in the process:
Create an API Subscribe a customer to a recurring subscription in Stripe Create custom API keys to authenticate requests to the API Report API usage to Stripe The following lesson demonstrates the backend flow for building API with Express.</description>
    </item>
    
    <item>
      <title>Tailwind Tips &amp; Tricks</title>
      <link>https://fireship.io/lessons/tailwind-tutorial/</link>
      <pubDate>Tue, 19 Oct 2021 08:11:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/tailwind-tutorial/</guid>
      <description>The following tutorial will get you up and running with Tailwind CSS, empowering you to build a beautiful, responsive, and animated websites quickly. We will build a side navigation menu inspired by Discord.
Setup Install the Tailwind VS Code extension Install the Tailwind VS Code extension.
Use a JS Framework Feel free to use the JS framework of your choice. This tutorial uses Create React App.
Discord-Inspired Icon Navbar Make the App a Flexible Container Create a flexbox row by simply adding the flex utility to the parent element.</description>
    </item>
    
    <item>
      <title>React Native Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/react-native-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 13:18:57 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-native-firebase-chat-demo/</guid>
      <description>React Native is one of the most productive ways to build a cross-platform mobile app, especially for developers with a background in JavaScript. It has provides excellent support for Firebase with the React Native Firebase package
In the following lesson, we will build a basic chat app with React Native and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/flutter-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-chat-demo/</guid>
      <description>Flutter makes it possible to build high-performance cross-platform apps with sound type safety thanks to the Dart programming language. It provides excellent support for Firebase with official plugins maintained by Google.
In the following lesson, we will build a basic chat app with Flutter and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Realtime Charts with D3</title>
      <link>https://fireship.io/lessons/realtime-charts-d3-firebase/</link>
      <pubDate>Mon, 20 Sep 2021 10:31:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-charts-d3-firebase/</guid>
      <description>D3.js, or Data Driven Documents, is a powerful tool for building charts with JavaScript, CSS, and SVG. It&amp;rsquo;s a library that takes data as an input outputs dynamic, interactive, and beautiful visualizations. In this tutorial, we&amp;rsquo;ll build an animated realtime chart that changes its appearance when a new data point is added to Firestore.
Example of the realtime chart you will build in this tutorial
Project Setup Install D3 &amp;amp; Firebase Create a new project with Vite, then install D3 and Firebase.</description>
    </item>
    
    <item>
      <title>Animated Notifications with Framer Motion</title>
      <link>https://fireship.io/lessons/framer-motion-advanced-notifications/</link>
      <pubDate>Sun, 12 Sep 2021 16:17:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/framer-motion-advanced-notifications/</guid>
      <description>Learn advanced Framer Motion techniques by creating an animated notification feed from scratch. We dive into concepts like transitions, spring animations, SVGs, and drag gestures to create dismissible notifications.
⚠️ This is the sequel to the Framer Motion Basics Tutorial. Make sure to watch that one first!
🚀 Try out the live demo
Notification Basic Notification Start by creating a basic animated notification using a motion.li component. Feel free to experiment with the notificationVariants object to customize the animation result.</description>
    </item>
    
    <item>
      <title>Animated Modals with Framer Motion</title>
      <link>https://fireship.io/lessons/framer-motion-modal/</link>
      <pubDate>Sun, 12 Sep 2021 15:20:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/framer-motion-modal/</guid>
      <description>Framer Motion is a React library for adding declarative animations to your components. It provides a variety of components that wrap plain HTML elements to extend them with animation superpowers 🦸. In this lesson, we will build a modal with Framer Motion with a variety of different animations styles.
🚀 Try out the live demo
Setup Installation Create a new React project
command line $ npx create-react-app framer-demo Open your new React app</description>
    </item>
    
    <item>
      <title>Firebase v9 Migration</title>
      <link>https://fireship.io/lessons/firebase-v9-migration/</link>
      <pubDate>Thu, 02 Sep 2021 12:10:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-v9-migration/</guid>
      <description>The Firebase team recently released a new web SDK that utilizes tree-shaking in order to lower JavaScript bundle sizes when used with module bundlers like Webpack and Rollup. At a high level, it works by only importing the functions/classes/code that we actually NEED, versus importing entire modules like auth, firestore, and so on. The Fireship site was able to reduce its JavaScript bundle size by ~35% 🤯 by upgrading to the new version.</description>
    </item>
    
    <item>
      <title>Learn Go in 100 Lines</title>
      <link>https://fireship.io/lessons/learn-go-in-100-lines/</link>
      <pubDate>Sat, 28 Aug 2021 07:27:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/learn-go-in-100-lines/</guid>
      <description>Introduction Go is an open-source programming language developed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. It is often described as &amp;ldquo;C for the 21st century&amp;rdquo;, however, it borrows important ideas from several other languages like ALGOL, Pascal, Modula-2, Oberon, CSP, and others. At its core, Go relies on simplicity, reliability, and efficiency to overcome the shortcomings of its ancestors. Go has garbage collection, a package system, first-class functions, lexical scope, immutable strings that rely on UTF-8, and an awesome concurrency model.</description>
    </item>
    
    <item>
      <title>Wavy Backgrounds with CSS &amp; SVG</title>
      <link>https://fireship.io/lessons/wavy-backgrounds/</link>
      <pubDate>Thu, 19 Aug 2021 12:06:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/wavy-backgrounds/</guid>
      <description>Wavy backgrounds have been all the rage in design for the last few years. The following tutorial demonstrates several different ways to create wavy backgrounds with CSS and SVG.
CSS Versions Bubble Pattern CSS Bubble
The bubble pattern creates an elliptical shape that stretches over the top of the content. It only requires CSS to create the effect.
file_type_html index.html &amp;lt;section class=&amp;#34;bubble&amp;#34;&amp;gt; &amp;lt;!-- content here --&amp;gt; &amp;lt;/section&amp;gt; Use the pseudo-element ::after to style an eliptical border radius to the content.</description>
    </item>
    
    <item>
      <title>Google Sheets as a Database</title>
      <link>https://fireship.io/lessons/google-sheets-database-nextjs/</link>
      <pubDate>Tue, 22 Jun 2021 19:13:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-sheets-database-nextjs/</guid>
      <description>Choosing the right database for your app is difficult. If you have a small project or are just prototyping, Google Sheets actually works quite nicely as a primary database. It is especially practical for JAM-stack web apps that use server-side rendering. The following tutorial will teach you how to use Google Sheets as a database for Next.js.
⚠️ Be warned&amp;hellip; Google Sheets does not scale like a true production database (because that&amp;rsquo;s not what it is for).</description>
    </item>
    
    <item>
      <title>Three.js Basics</title>
      <link>https://fireship.io/lessons/threejs-tutorial-portfolio/</link>
      <pubDate>Fri, 21 May 2021 08:45:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/threejs-tutorial-portfolio/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Accept Crypto Payments with Coinbase Commerce</title>
      <link>https://fireship.io/lessons/crypto-payments-web-firebase/</link>
      <pubDate>Mon, 29 Mar 2021 11:13:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/crypto-payments-web-firebase/</guid>
      <description>Accepting crypto payments, like Bitcoin and Ethereum, in your app opens the door to more customers in a very fast growing niche. Coinbase Commerce is like the Stripe Payments API for crypto. It provides a simple API where you can create charges, invoices, etc. But unlike credit cards, which are processed by a central authority, crypto payments are distributed to a global network of miners where they are confirmed on the blockchain.</description>
    </item>
    
    <item>
      <title>WebRTC Video Chat on Firebase</title>
      <link>https://fireship.io/lessons/webrtc-firebase-video-chat/</link>
      <pubDate>Tue, 02 Mar 2021 15:10:46 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/webrtc-firebase-video-chat/</guid>
      <description>WebRTC facilities realtime audio/video communication on the web using a peer-to-peer protocol, allowing you to build apps like Zoom, Skype, etc.
The following lesson builds a 1-to-1 video chat, where each peer streams directly to the other peer - there is no need for a middle-man server to handle video content. However, a 3rd party server is required for signaling that stores shared data for stream negotiation. Firestore is an excellent choice for WebRTC because it is easy to listen to updates to the database in realtime.</description>
    </item>
    
    <item>
      <title>Invite-Only Firebase Phone Auth</title>
      <link>https://fireship.io/lessons/invite-only-firebase-phone-auth/</link>
      <pubDate>Wed, 24 Feb 2021 15:42:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/invite-only-firebase-phone-auth/</guid>
      <description>The meteoric rise of Clubhouse from a mostly unknown app to 10M weekly users demonstrates the power of #FOMO - fear of missing out. No, you can&amp;rsquo;t just download the app and start having fun. It uses an invite-only authentication system that requires a current user to invite you to the club with your phone number. Once you&amp;rsquo;re in, you&amp;rsquo;re granted two invites to send to your friends, creating a pyramid of organic user growth.</description>
    </item>
    
    <item>
      <title>Custom Usernames in Firebase</title>
      <link>https://fireship.io/lessons/custom-usernames-firebase/</link>
      <pubDate>Sat, 23 Jan 2021 11:51:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-firebase/</guid>
      <description>Firebase assigns each user a unique ID upon signing up, but many apps require users to choose their own custom unique username, which is not an out-of-box feature in Firebase. Think of apps like Twitter or Medium, where each user’s profile can be visited on a user like example.com/{username}. The following lesson demonstrates how to securely create and validate custom usernames for Firebase users by combining Cloud Firestore.
Demo of custom usernames in Firebase</description>
    </item>
    
    <item>
      <title>Host a Website on Raspberry Pi</title>
      <link>https://fireship.io/lessons/host-website-raspberry-pi/</link>
      <pubDate>Fri, 15 Jan 2021 14:37:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/host-website-raspberry-pi/</guid>
      <description>AWS recently banned Parler from it&amp;rsquo;s cloud platform, effectively destroying its 10M user app with the flick of a switch. Whether you agree or not, it was within Amazon&amp;rsquo;s legal rights to make this move.
Now imagine you&amp;rsquo;ve just been kicked off the cloud&amp;hellip; where do you go? The Internet is still an open platform, but you&amp;rsquo;re faced with the ugly prospect of a reverse cloud migration back to on-prem physical servers.</description>
    </item>
    
    <item>
      <title>Seven Awesome PWA Features</title>
      <link>https://fireship.io/lessons/pwa-top-features/</link>
      <pubDate>Tue, 05 Jan 2021 09:31:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-top-features/</guid>
      <description>Progressive Web Apps (PWA) represent a collection of capabilities that put web apps on a level playing field with native iOS, Android, and desktops apps. The following tutorial implements a 7 lesser-known web features.
1. App Shortcuts App Shortcuts
file_type_config manifest.json { &amp;#34;name&amp;#34;: &amp;#34;Fireship&amp;#34;, //... &amp;#34;shortcuts&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;Activity Feed&amp;#34;, &amp;#34;short_name&amp;#34;: &amp;#34;Feed&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;View your activity feed&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;/feed?utm_source=homescreen&amp;#34;, &amp;#34;icons&amp;#34;: [{ &amp;#34;src&amp;#34;: &amp;#34;/icons/feed.png&amp;#34;, &amp;#34;sizes&amp;#34;: &amp;#34;192x192&amp;#34; }] }, { &amp;#34;name&amp;#34;: &amp;#34;Recent Comments&amp;#34;, &amp;#34;short_name&amp;#34;: &amp;#34;Comments&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;View recent comments&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;/comments?</description>
    </item>
    
    <item>
      <title>Video to GIF with WASM</title>
      <link>https://fireship.io/lessons/wasm-video-to-gif/</link>
      <pubDate>Sun, 15 Nov 2020 10:14:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/wasm-video-to-gif/</guid>
      <description>Web Assembly (WASM) opens the door to building high-performance apps in the browser with languages other than JavaScript. Software normally reserved for installed desktop apps can now run in the browser with near-native performance. The following tutorial demonstrates how to use FFmpeg.wasm to perform CPU-intensive video editing tasks from a frontend react app.
Initial Setup Create a new react app, then install FFmpeg.
command line npx create-snowpack-app gifmakr --template @snowpack/app-template-react npm install @ffmpeg/ffmpeg @ffmpeg/core GIF Maker App Load FFmpeg The main binary for FFmpeg is loaded asynchronously via a CDN.</description>
    </item>
    
    <item>
      <title>FaunaDB Basics</title>
      <link>https://fireship.io/lessons/fauna-db-quickstart/</link>
      <pubDate>Sun, 11 Oct 2020 07:14:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/fauna-db-quickstart/</guid>
      <description>FaunaDB is a next-generation cloud database that combines the simplicity of NoSQL, without sacrificing the ability to model complex relationships. It&amp;rsquo;s completely serverless, fast, ACID-compliant, and has a generous free tier for small apps - basically everything you could possibly want in a fully-managed database.
The following lesson demonstrates how to model a basic twitter-inspired social graph with FaunaDB and access it on the web with Node.js. It will introduce you to Fauna Query Language (FQL) and common patterns for reading and writing to the database.</description>
    </item>
    
    <item>
      <title>React Firebase Chat App</title>
      <link>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</link>
      <pubDate>Fri, 25 Sep 2020 07:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</guid>
      <description>The following tutorial demonstrates how to build a simple group chat app with React and Firebase. The goal of this lesson is to showcase important beginner concepts when working with the ⚛️🔥 React Firebase stack, including user authentication, firestore, and security rules.
React Firebase Chat Demo
Important Links
Live Demo Source Code React Firebase Hooks Initial Setup Firebase Project Create a free Firebase project. Make sure to enable Google SignIn and and activate Cloud Firestore.</description>
    </item>
    
    <item>
      <title>Animated CSS Cards Tutorial</title>
      <link>https://fireship.io/lessons/css-cards-animated/</link>
      <pubDate>Thu, 10 Sep 2020 07:33:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-cards-animated/</guid>
      <description>The following lesson demonstrates how to build an animated card collection inspired by the 2020 homepage of css-tricks.com.
The original version on CSS tricks
The cloned card stack
Stacked Card Start by adding the following HTML markup.
HTML file_type_html index.html &amp;lt;section class=&amp;#34;card-list&amp;#34;&amp;gt; &amp;lt;article class=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;header class=&amp;#34;card-header&amp;#34;&amp;gt; &amp;lt;p&amp;gt;Sep 11th 2020&amp;lt;/p&amp;gt; &amp;lt;h2&amp;gt;Never forget&amp;lt;/h2&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;div class=&amp;#34;card-author&amp;#34;&amp;gt; &amp;lt;a class=&amp;#34;author-avatar&amp;#34; href=&amp;#34;#&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;avatar.png&amp;#34; /&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;svg class=&amp;#34;half-circle&amp;#34; viewBox=&amp;#34;0 0 106 57&amp;#34;&amp;gt; &amp;lt;path d=&amp;#34;M102 4c0 27.</description>
    </item>
    
    <item>
      <title>Seven Database Paradigms</title>
      <link>https://fireship.io/lessons/top-seven-database-paradigms/</link>
      <pubDate>Tue, 01 Sep 2020 16:09:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/top-seven-database-paradigms/</guid>
      <description>Choose the right database for the job 🔨
Database Paradigms Explained Visually Key-Value Popular Key-Value Databases: Redis, Memcached, Etcd
key value database diagram
Wide Column Popular Wide-Column Databases: Cassandra, Apache HBase
wide column database diagram
Document Oriented Popular Document Databases: MongoDB, Firestore, CouchDB
document database diagram
Relational Popular Relational Databases: MySQL, Postgres, SQL Server, CockroachDB
Graph Popular Graph Databases: Neo4j, DGraph, Janus Graph
Search Engine Popular Search Databases: ElasticSearch, Algolia, MeiliSearch</description>
    </item>
    
    <item>
      <title>Fulltext Search on Firebase with Meilisearch</title>
      <link>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</link>
      <pubDate>Fri, 28 Aug 2020 08:14:16 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</guid>
      <description>A common issue that developers face with NoSQL databases (and SQL to a lesser extent) is a lack of full-text search capabilities. If you want to build a performant typeahead search box or handle multi-property filtering on a collection, you’ll find it frustratingly difficult to implement in Firestore - it’s just not the right database for the job. There are many good solutions, like Algolia and ElasticSearch, but they can be expensive and/or complex to manage.</description>
    </item>
    
    <item>
      <title>Docker Basics Tutorial with Node.js</title>
      <link>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</link>
      <pubDate>Mon, 24 Aug 2020 08:08:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</guid>
      <description>Code Breakdown Dockerfile A Dockerfile is like DNA for building a Docker Image.
file_type_docker Dockerfile FROM node:12 WORKDIR /app COPY package*.json ./ RUN npm install COPY . . ENV PORT=8080 EXPOSE 8080 CMD [ &amp;#34;npm&amp;#34;, &amp;#34;start&amp;#34; ] Dockerignore A Dockerignore file is required so we don&amp;rsquo;t add the node_modules folder to the image.
file_type_docker .dockerignore node_modules Node.js App This is the code we went to run as the container&amp;rsquo;s process.</description>
    </item>
    
    <item>
      <title>Firebase Quickstart</title>
      <link>https://fireship.io/lessons/firebase-quickstart/</link>
      <pubDate>Sun, 26 Jul 2020 08:27:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-quickstart/</guid>
      <description>Firebase makes app development faster ⚡, cheaper 💵, and more enjoyable 😀 for developers. The idea behind a Backend-as-a-Service (BaaS) is to eliminate the need to write and maintain server-side code - things like user authentication, trusted API calls, security logic, database connections, traffic scaling, and the list goes on. These requirements take time, money, and add complexity to a project. The more resources you can invest in the frontend user experience, the more likely your app is to succeed.</description>
    </item>
    
    <item>
      <title>Firebase Emulator Advanced Usage Guide</title>
      <link>https://fireship.io/lessons/firebase-emulator-advanced/</link>
      <pubDate>Sun, 31 May 2020 19:11:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-emulator-advanced/</guid>
      <description>The Firebase emulator suite allows developers to run a mock Firebase environment locally. Last week, Firebase released a new feature called the Emulator UI to visualize and manage Firestore (and Realtime DB) from the browser. The following lesson contains a variety of advanced techniques for setting up a Firebase development environment.
🌠Did you know? The new @firebase Emulator UI makes Firestore available on the browser window...
With a little bit of JS, you can extend the UI with your own custom stuff, like buttons to populate fake data.</description>
    </item>
    
    <item>
      <title>Access Google APIs for Users with OAuth 2.0</title>
      <link>https://fireship.io/lessons/google-apis-node-tutorial/</link>
      <pubDate>Sat, 23 May 2020 00:33:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-apis-node-tutorial/</guid>
      <description>How do you make APIs calls to a Google service on behalf of a user? The following lesson demonstrates how to get permission from a user with OAuth 2.0 to make authenticated requests to Google APIs from a backend Node.js server like Firebase Cloud Functions.
Examples of common use cases might include:
Upload a file to a user&amp;rsquo;s Google Drive Make an appointment on a user&amp;rsquo;s Google Calendar Access a user&amp;rsquo;s infrastructure on Google Cloud Platform 💡 Note: This lesson covers server-side OAuth.</description>
    </item>
    
    <item>
      <title>Regex Cheat Sheet</title>
      <link>https://fireship.io/lessons/regex-cheat-sheet-js/</link>
      <pubDate>Mon, 18 May 2020 16:17:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/regex-cheat-sheet-js/</guid>
      <description>Regular Expressions are notoriously difficult to learn - they have a very compact syntax that ends up looking like gibberish. However, they can be extremely powerful when it comes to form validation, find and replace tasks, and/or searching through a body of text. The following cheatsheet provides common RegEx examples and techniques for the JavaScript developer.
🔥 There are several awesome tools that can help you debug RegEx in the browser - my personal favorite is RegExr.</description>
    </item>
    
    <item>
      <title>Multi-Level Dropdown Menu with React</title>
      <link>https://fireship.io/lessons/dropdown-menu-multi-level-react/</link>
      <pubDate>Thu, 16 Apr 2020 19:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/dropdown-menu-multi-level-react/</guid>
      <description>The following tutorial demonstrates how to build animated dropdown menu with React. It is inspired by Facebook&amp;rsquo;s March 2020 web UI update.
Facebook&amp;rsquo;s new UI in 2020
Initial Setup Start by creating a new app with CRA and install the React Transition Group package to handle animation.
command line npx create-react-app facebook cd facebook npm i react-transition-group npm start Top Navigation Build a simple flexbox navigation bar to give the dropdown some context.</description>
    </item>
    
    <item>
      <title>Google Secret Manager with Firebase</title>
      <link>https://fireship.io/lessons/secret-manager-with-firebase/</link>
      <pubDate>Wed, 15 Apr 2020 13:08:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secret-manager-with-firebase/</guid>
      <description>Secret Manager is a new service on Google Cloud that allows us to store and version sensitive data like private API keys and passwords, then access it from any cloud service. It provides encryption, audit logging, versioning, and IAM roles for secure fine-grained control over sensitive information.
A common use-case for a Firebase apps is the management of secret API keys in a Cloud Function. The following lesson will teach you how add secrets via the Google Cloud console, then read them from a Firebase Cloud Function with Node.</description>
    </item>
    
    <item>
      <title>Autosave Vue Forms with Firestore</title>
      <link>https://fireship.io/lessons/vue-autosaving-forms-with-firestore/</link>
      <pubDate>Tue, 07 Apr 2020 15:14:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/vue-autosaving-forms-with-firestore/</guid>
      <description>Modern applications that accept complex user inputs often provide an automatic save action that runs in the background, such as Google Docs and Microsoft Office:
Microsoft Office files are auto-saved
The following lesson builds a reactive Vue form that automatically syncs the user&amp;rsquo;s input to a backend database - Firestore. It keeps track of the state of the form, and when modified, waits for a short debounce before writing the changes to the backend database.</description>
    </item>
    
    <item>
      <title>Multifactor Auth with Firebase (2FA)</title>
      <link>https://fireship.io/lessons/two-factor-auth-firebase/</link>
      <pubDate>Sat, 04 Apr 2020 13:49:27 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/two-factor-auth-firebase/</guid>
      <description>How do you handle two-step verification (2FA) or multifactor authentication (MFA) in Firebase? Until recently, the answer was you can&amp;rsquo;t. Thankfully, in 2020 we can implement multifactor auth flows in Firebase with Google Cloud Identity Platform. The following tutorial demonstrates an optional multifactor auth flow that works like this&amp;hellip;
Sign up with email/password and require email verification. Opt-in to MFA and register phone number(s). Attempt login from a new device. Verify SMS text code verification.</description>
    </item>
    
    <item>
      <title>Web Development Setup Guide for Windows with Linux (WSL)</title>
      <link>https://fireship.io/lessons/windows-10-for-web-dev/</link>
      <pubDate>Fri, 03 Apr 2020 13:22:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/windows-10-for-web-dev/</guid>
      <description>Historically, Windows has not been been the preferred OS for most web developers, but things have changed over the past couple years. Microsoft recently launched Windows Subsystem for Linux or WSL (WSL2), allowing us to install REAL linux distros (like Ubuntu) on Windows 10. This means you can use Linux toolchains (bash, zsh, tmux) and apps to manage the file system and run windows apps.
Unlike a dual boot system, where two operating systems are installed on the same hard drive, WSL runs Linux in a compatibility layer that can run unmodified ELF64 binaries.</description>
    </item>
    
    <item>
      <title>How to Build a Theme-Switcher</title>
      <link>https://fireship.io/lessons/theme-toggler/</link>
      <pubDate>Tue, 24 Mar 2020 12:00:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/theme-toggler/</guid>
      <description>Almost every good dev website these days has the ability to switch between light/dark mode - but how do you toggle multiple themes and style variations? The following lesson demonstrates how to build a theme switcher, inspired by Alligator.io, that allows a user to switch between four different global styles - light, dark, light-solar, and dark-solar.
Theme Switcher Dropdown Menu The HTML markup should should have some type of clickable element.</description>
    </item>
    
    <item>
      <title>Five Useful Github Actions Examples</title>
      <link>https://fireship.io/lessons/five-useful-github-actions-examples/</link>
      <pubDate>Fri, 13 Mar 2020 09:26:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/five-useful-github-actions-examples/</guid>
      <description>Github Actions make it easy to roll out a wide variety of DevOps automation tasks. The following lesson provides five examples of CI/CD and automation using Github Actions.
Example 1: Continuous Integration Continuous Integration (CI) automates the process of testing and building your code before merging it. In practice, developers should commit or integrate their changes to the main shared repo once-per-day (or more).
Workflow file_type_light_yaml .github/workflows/workflow.yml name: Node Continuous Integration on: pull_request: branches: [ master ] jobs: test_pull_request: runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v1 with: node-version: 12 - run: npm ci - run: npm test - run: npm run build Example 2: Continuous Deployment Continuous Deployment (CD) automatically releases new production code to users.</description>
    </item>
    
    <item>
      <title>CSS Grid Layout Examples</title>
      <link>https://fireship.io/lessons/three-responsive-css-grid-layouts/</link>
      <pubDate>Sun, 08 Mar 2020 11:04:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/three-responsive-css-grid-layouts/</guid>
      <description>The following lesson contains three examples of CSS Grid layouts.
Bootstrap-Style 12 Column Grid Grid can significantly reduce the amount of code required to build responsive row/column layouts. Unlike a flex-based grid like Bootstrap, it does not require a bunch of classes in the markup to make the children responsive.
The grid below is an example of an implicit grid because we do not know the exact number of rows or columns in advance.</description>
    </item>
    
    <item>
      <title>Electron Screen Capture Tutorial</title>
      <link>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</link>
      <pubDate>Wed, 04 Mar 2020 06:56:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</guid>
      <description>Electron opens the world of desktops apps to the average JavaScript developer. It wraps Chromium with Node.js, providing a browser for building UIs and Node for low-level system operations.
The following project tutorial demonstrates how to build a simple screen recorder with Electron. The app can retrieve the available screens from the system, turn the screen into a video feed, then record and save the raw video file to the system.</description>
    </item>
    
    <item>
      <title>Responsive Animated Navbar with CSS</title>
      <link>https://fireship.io/lessons/css-responsive-icon-navbar/</link>
      <pubDate>Sat, 29 Feb 2020 15:04:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-responsive-icon-navbar/</guid>
      <description>The following lesson demonstrates how to build a responsive, animated icon navigation bar using nothing but plain CSS. This project combines a variety of modern CSS features like flexbox, media queries, transitions, and filters to build a unique experience with minimal code.
Step 1 - Initial Setup 🚨 The demo contains a bunch of dummy HTML not shown below. Copy or clone it from the full source code to build the demo locally.</description>
    </item>
    
    <item>
      <title>Top 7 Security Concepts for Web Developers</title>
      <link>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</link>
      <pubDate>Thu, 13 Feb 2020 09:37:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</guid>
      <description>Cloud providers and web application frameworks go to great lengths to protect you from writing insecure code. The Cloud provides secure defaults and monitoring for your infrastructure, while Angular and React automatically sanitize HTML to prevent the injection of malicious JavaScript. Despite these safeguards, no application is 100%, secure and clever new exploits will be discovered. The following lesson explains some of the most common hacking techniques and how to secure your app against them.</description>
    </item>
    
    <item>
      <title>Sign In with Apple on Firebase</title>
      <link>https://fireship.io/lessons/apple-signin-with-firebase-tutorial/</link>
      <pubDate>Sun, 09 Feb 2020 08:41:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/apple-signin-with-firebase-tutorial/</guid>
      <description>Sign in with Apple was announced in 2019 and allows users to authenticate into your Firebase app with an Apple ID. Users must have two-factor authentication (2FA) enabled on their Apple account AND be signed into iCloud.
The following lesson demonstrates how to configure Apple SignIn with the Firebase JavaScript SDK (web).
🚨 As of April 2020, all native iOS apps that offer social auth methods (Google, Facebook, etc.) MUST also include Apple Sign In as an option.</description>
    </item>
    
    <item>
      <title>Javascript 2020 Predictions</title>
      <link>https://fireship.io/lessons/javascript-2020-predictions/</link>
      <pubDate>Mon, 16 Dec 2019 07:27:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/javascript-2020-predictions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>What is Cloud Computing in 2020?</title>
      <link>https://fireship.io/lessons/cloud-computing-in-2020/</link>
      <pubDate>Tue, 10 Dec 2019 11:59:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-computing-in-2020/</guid>
      <description>Data Sources Gartner Forecasts Forbes Enterprise Computing Flexera Report 2019 </description>
    </item>
    
    <item>
      <title>How to Build a Slack App</title>
      <link>https://fireship.io/lessons/how-to-build-a-slack-bot/</link>
      <pubDate>Tue, 03 Dec 2019 14:22:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-build-a-slack-bot/</guid>
      <description>Slack Apps, or Bots, allow you to extend slack with interactive features that can improve your teams productivity. The following lesson is a step-by-step guide to building a Slack App using Firebase Cloud Functions as the backend server.
This lesson builds Slack App for the actual Fireship Slack. Join to see the CyberJeff bot in action.
Our Slack App will perform the following tasks.
Listen to events, such as a new user joining the #general channel.</description>
    </item>
    
    <item>
      <title>Build the Classic iPod UI in Flutter</title>
      <link>https://fireship.io/lessons/flutter-ipod/</link>
      <pubDate>Sun, 01 Dec 2019 09:12:43 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-ipod/</guid>
      <description>An awesome tweet was making the rounds last week that recreates the iPod Classic UI with SwiftUI. It features a click wheel that scrolls through a list of items when rotated and makes for an excellent Flutter UI challenge.
Turned my iPhone into an iPod Classic with Click Wheel and Cover Flow with #SwiftUI pic.twitter.com/zVk5YJj0rh
&amp;mdash; Elvin (@elvin_not_11) November 27, 2019 Creating an animated scrolling list with Flutter is a piece of cake, but calculating scroll direction/velocity from the pan events on the wheel is a bigger challenge.</description>
    </item>
    
    <item>
      <title>Firestore Rate Limiting</title>
      <link>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</link>
      <pubDate>Sat, 30 Nov 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</guid>
      <description>Rate limiting is the process of blocking access to cloud resources after a certain threshold has been reached. Firestore bills based on the quantity of reads and writes, but does not currently provide a way to block IPs or set explicit rate limits with Security Rules. So how do you prevent a DDoS attack or a disgruntled user from spamming the app with unnecessary records.
The following examples are based on an app that needs to&amp;hellip;</description>
    </item>
    
    <item>
      <title>Firestore Pagination Guide</title>
      <link>https://fireship.io/lessons/firestore-pagination-guide/</link>
      <pubDate>Tue, 26 Nov 2019 09:17:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-pagination-guide/</guid>
      <description>Pagination is the process of dividing data into discrete pages. In Firestore, it is achieved by ordering a collection by a field, limiting it to a consistent page size, then offsetting the query. The Firebase Web SDK v7.3.0 introduced a new limitToLast(n) method that makes the process much easier. The following lesson demonstrates how to paginate Firestore data in both a forward and backward direction and discusses advanced serverside techniques.</description>
    </item>
    
    <item>
      <title>Build a Binary Clock with Flutter</title>
      <link>https://fireship.io/lessons/build-a-binary-clock-flutter/</link>
      <pubDate>Thu, 21 Nov 2019 12:40:31 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-binary-clock-flutter/</guid>
      <description>The Flutter Clock Contest is currently running with a submission deadline of Jan 20th, 2020. The following lesson will teach you how to build a basic clock with Flutter.
Binary Clock Basics We are building the binary clock shown in the demo video below. Notice how the clock ticks once-per-second and updates the highlighted boxes in the UI. The actual time is shown in big plain digits at the bottom, with the binary value for each number under it.</description>
    </item>
    
    <item>
      <title>Deck.gl Google Maps Tutorial</title>
      <link>https://fireship.io/lessons/deckgl-google-maps-tutorial/</link>
      <pubDate>Tue, 29 Oct 2019 07:53:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/deckgl-google-maps-tutorial/</guid>
      <description>Have you ever tried to load thousands of datapoints into Google Maps? It probably didn&amp;rsquo;t go very well from a performance standpoint. Deck.gl is a library that solves this problem by running expensive computations on the GPU with WebGL. This means you can run realtime 3D visualizations on datasets with millions of geographic points.
In the following lesson, you will learn how to add high-performance data overlays to Google Maps based on a dataset of 140,000+ incidents of gun violence in the United States.</description>
    </item>
    
    <item>
      <title>Stripe Payment Intents Tutorial</title>
      <link>https://fireship.io/lessons/stripe-payment-intents-tutorial/</link>
      <pubDate>Tue, 22 Oct 2019 18:05:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-payment-intents-tutorial/</guid>
      <description>Stripe provides a huge API with everything you could ever want to build a complex payment system. Recent changes in the online payments landscape have resulted in significant changes to the API, most notably the Payment Intents API. The following lesson demonstrates two modern strategies for accepting one-time payments - (1) Checkout and (2) Stripe Elements with Payment Intents.
As of September 2019, many European banks now require their customers to validate payments using 3D secure standard or Strong Customer Authentication SCA.</description>
    </item>
    
    <item>
      <title>Top 100 Firebase Tips and Tricks</title>
      <link>https://fireship.io/lessons/firebase-tips-and-tricks/</link>
      <pubDate>Wed, 09 Oct 2019 20:31:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-tips-and-tricks/</guid>
      <description>The list below outlines the Firebase tips presented in the video.
Get Started Create a two Firebase Projects - one for development and another for live production data Link Google Analytics Limit permissions for employees, follow the Principle of Least Privilege Update contact info for GDPR Add a project and don&amp;rsquo;t worry about exposing your credentials in frontend code Upgrade to Blaze, then set a budget on GCP Generate detailed reports for billing Install the Firebase Tools CLI and GCloud.</description>
    </item>
    
    <item>
      <title>Graphql Basics Tutorial</title>
      <link>https://fireship.io/lessons/graphql-basics-tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 09:38:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/graphql-basics-tutorial/</guid>
      <description>GraphQL has been one of the fastest growing web technologies over the past few years. This lesson covers the basics of GraphQL and demonstrates how to build an Angular app that fetches data with Apollo via the public SpaceX API.
🙏 Special thanks to Arjun for producing the code for this demo! Head over to github for the Full Lesson and give it a ⭐.</description>
    </item>
    
    <item>
      <title>Firebase Analytics for the Web</title>
      <link>https://fireship.io/lessons/firebase-analytics-web-guide/</link>
      <pubDate>Thu, 03 Oct 2019 13:08:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-analytics-web-guide/</guid>
      <description>Firebase recently announced support for Analytics and Remote Config on the web. When combined, these services make it possible to customize the UI/UX of your app based on data collected from Google Analytics. The following lesson will show you how to collect Google Analytics events and user properties, then read aggregated data in your app to customize the experience for a specific audience.
Initial Setup Firebase Analytics was added to the JavaScript SDK in version 7.</description>
    </item>
    
    <item>
      <title>Advanced Firebase Auth with Custom Claims</title>
      <link>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</link>
      <pubDate>Mon, 23 Sep 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</guid>
      <description>Firebase allows developers to modify authentication ID tokens to provide fine-grained system access to authorized users. The follow lesson adds custom claims to the Firebase user record to build a role-based access control feature that is secured with Firestore rules.
Set Custom Claims from the Command Line It is not possible (currently) to add custom claims from the Firebase Console. This means we need to write some code with Firebase Admin.</description>
    </item>
    
    <item>
      <title>Algolia Fulltext Search Cloud Functions</title>
      <link>https://fireship.io/lessons/algolia-cloud-functions/</link>
      <pubDate>Sun, 25 Aug 2019 10:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/algolia-cloud-functions/</guid>
      <description>One of the most commonly encountered limitations of Cloud Firestore (and GCP) is full-text search. This functionality is essential if you need to query complex text patterns in a database or filter results by multiple dynamic properties. My favorite solution to this limitation is Algolia, which provides a powerful, developer-friendly, search &amp;amp; discovery API. In the following lesson you will learn how to sync your Firestore data to an Algolia index via Cloud Functions.</description>
    </item>
    
    <item>
      <title>Build a Chatbot With Dialogflow</title>
      <link>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</link>
      <pubDate>Mon, 12 Aug 2019 09:45:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</guid>
      <description>Chatbots make it possible for the average developer to deliver excellent (and affordable) customer service at scale - Building conversational experiences has never been easier thanks to the Dialogflow conversation platform.
Dialogflow is a free tool on Google Cloud for creating voice and text conversational interfaces. It uses Natural Language Processing NLP technology, allowing you to create experiences similar to Google Assistant or Amazon Alexa. In following lesson creates a chatbot from scratch in the three main steps:</description>
    </item>
    
    <item>
      <title>MySQL on Cloud Functions</title>
      <link>https://fireship.io/lessons/sql-firebase-typeorm/</link>
      <pubDate>Tue, 06 Aug 2019 12:31:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sql-firebase-typeorm/</guid>
      <description>Firebase&amp;rsquo;s NoSQL databases are excellent for flexibility and scale, but there are times when a traditional relational SQL database is a better tool for the job (or you may not have a choice with a legacy system). Does that mean you should ditch the Firebase platform altogether? Of course not! In fact, connecting a Cloud SQL instance to Firebase Cloud Functions is one of the easiest ways to hook up a database to a web or mobile app.</description>
    </item>
    
    <item>
      <title>Flutter File Uploads</title>
      <link>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</link>
      <pubDate>Fri, 26 Jul 2019 12:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</guid>
      <description>Camera apps are one of the most popular niches in the market, with the recent viral growth of FaceApp being a prime example. There are a variety of plugins for Flutter that make camera-based features easy to develop, and when combined with Firebase the results can be easily uploaded your backend cloud infrastructure. The following lesson demonstrates the following features:
Capture images from the device camera or image gallery. Crop, rotate, and resize an image file.</description>
    </item>
    
    <item>
      <title>Modern Web Scraping Guide</title>
      <link>https://fireship.io/lessons/web-scraping-guide/</link>
      <pubDate>Wed, 17 Jul 2019 13:01:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web-scraping-guide/</guid>
      <description>In a perfect world, every website provides free access to data with an easy-to-use API&amp;hellip; but the world is far from perfect. However, it is possible to use web scraping techniques to manually extract data from websites by brute force. The following lesson examines two different types of web scrapers and implements them with NodeJS and Firebase Cloud Functions.
Initial Setup Let&amp;rsquo;s start by initializing Firebase Cloud Functions with JavaScript.</description>
    </item>
    
    <item>
      <title>SendGrid Transactional Email Guide</title>
      <link>https://fireship.io/lessons/sendgrid-transactional-email-guide/</link>
      <pubDate>Fri, 05 Jul 2019 10:26:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sendgrid-transactional-email-guide/</guid>
      <description>Transactional email is the art of communicating with users in response to events or conditions, and is an important consideration for the overall user experience (UX) of an app. One of the most popular email APIs is SendGrid (recetly acquired by Twilio). It is flexible, provides a NodeJS SDK, and starts with free tier for small projects. The following lesson will teach you how to send email from your app based on user-driven events with Firebase Cloud Functions.</description>
    </item>
    
    <item>
      <title>In App Purchases in Flutter</title>
      <link>https://fireship.io/lessons/flutter-inapp-purchases/</link>
      <pubDate>Tue, 25 Jun 2019 06:14:51 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-inapp-purchases/</guid>
      <description>Flutter recently launched official support for In App Purchases (IAP) and provides a unified plugin for both iOS and Android. Native mobile apps that collect payments for digital goods on the Apple App Store and/or Google Play Store are typically required to use the In App Purchases API, which means services like Stripe and Paypal are out of the question (with the exception of payments for physically shipped goods). In reality, In App Purchases are far more lucrative for digital products, with the game Candy Crush generating $4MM in revenue per day in 2018.</description>
    </item>
    
    <item>
      <title>PayPal Checkout</title>
      <link>https://fireship.io/lessons/paypal-checkout-frontend/</link>
      <pubDate>Sun, 23 Jun 2019 06:44:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/paypal-checkout-frontend/</guid>
      <description>In February 2019, the PayPal Checkout API received a much needed facelift that brought massive improvements to the developer experience. The new v2 API has detailed documentation on par with Stripe and offers one of the smoothest paths to start accepting payments and/or subscriptions in a progressive web app. The following lesson will show you how to start accepting payments entirely from your frontend JavaScript code with PayPal Checkout with your choice of Angular, React, and Vue.</description>
    </item>
    
    <item>
      <title>FCM Push Notifications for Flutter</title>
      <link>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</link>
      <pubDate>Tue, 11 Jun 2019 06:37:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</guid>
      <description>When used correctly, push notifications can be an excellent way to drive user engagement and keep your app in focus on a consistent basis. When used incorrectly, they can be annoying and motivate users to simply uninstall your app and never look back. Fortunately, Firebase Cloud Messaging (FCM) provides a sophisticated set of tools to send notifications only to users who actually want them. The following lesson will teach you how to configure FCM in Flutter to broadcast both Topic-based, Device-based, and Segment-based push notifications.</description>
    </item>
    
    <item>
      <title>Collection Group Query with Firestore</title>
      <link>https://fireship.io/lessons/collection-group-query-firestore/</link>
      <pubDate>Mon, 20 May 2019 08:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/collection-group-query-firestore/</guid>
      <description>At Google I/O 2019, Firebase launched a new query type, Collection Group Queries, which can have a major impact on your data modeling decisions. It allows you to combine all subcollections that share the same name, then query them together. Prior to this feature release, it was common to model one-to-many relationships with root collections that contained a field (or foreign key if you will) pointing to the parent document. Root collections are still fine, but this new feature makes it far more practical to organize your data in a natural hierarchy.</description>
    </item>
    
    <item>
      <title>Flutter Provider with Firebase</title>
      <link>https://fireship.io/lessons/advanced-flutter-firebase/</link>
      <pubDate>Sat, 11 May 2019 13:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-flutter-firebase/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
    <item>
      <title>Firebase Performance Quickstart</title>
      <link>https://fireship.io/lessons/firebase-performance-quickstart/</link>
      <pubDate>Thu, 09 May 2019 15:45:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-performance-quickstart/</guid>
      <description>Firebase announced Performance Monitoring for the Web at Google I/O 2019 - a long-awaited feature for Progressive Web Apps. It provides a simple way to add robust performance analytics to your app with minimal effort, while also adding the ability to run custom traces in your code. In the following lesson, you will learn how to add this new tool to any web app and setup traces to find performance bottlenecks.</description>
    </item>
    
    <item>
      <title>Flutter Drag and Drop Basics</title>
      <link>https://fireship.io/lessons/flutter-drag-and-drop-basics/</link>
      <pubDate>Tue, 30 Apr 2019 11:45:14 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-drag-and-drop-basics/</guid>
      <description>The following lesson will teach you how to build a simple drag-and-drop UI with the Draggable and DragTarget widgets. The demo app is a kid&amp;rsquo;s game (ages 2 to 4) that requires the user to drag a fruit emoji 🍋 from the left column to the matching color on the right. If successfully dropped it will mark that item complete ✅ and the score will increase by one. The user can also reset the game at any time by pressing on the floating action button.</description>
    </item>
    
    <item>
      <title>Svelte Realtime Todo List with Firebase</title>
      <link>https://fireship.io/lessons/svelte-v3-overview-firebase/</link>
      <pubDate>Wed, 24 Apr 2019 07:01:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/svelte-v3-overview-firebase/</guid>
      <description>Svelte 3 was announced recently and it delivers a refreshing alternative to the big three component frameworks/libraries of React, Angular, and Vue. In fact, calling it a framework/library would not be very accurate, because Svelte is actually a compiler that turns your code into Vanilla JS, meaning it does not need to ship the entire framework in the JS bundle. Its focus on simplicity really stands out and makes for a very developer-friendly JavaScript experience.</description>
    </item>
    
    <item>
      <title>Dynamic Scheduled Background Jobs in Firebase</title>
      <link>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</link>
      <pubDate>Sat, 20 Apr 2019 07:44:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</guid>
      <description>Last week, Firebase announced a new scheduled cron trigger for Cloud Functions that makes it easy to run serverless code on a set time interval. This function type is special because it combines the powers of Cloud Scheduler and Pub/Sub to guarantee security that you don&amp;rsquo;t have with a regular HTTP-triggered function.
Scheduling a function on a static time interval is straight forward, but what if you want to build a dynamic task queue where users can schedule their own background jobs?</description>
    </item>
    
    <item>
      <title>Firebase Microservices With Cloud Run</title>
      <link>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</link>
      <pubDate>Tue, 09 Apr 2019 10:25:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</guid>
      <description>Yesterday Google Cloud released a game-changing new product called Cloud Run that allows you to run and scale stateless Docker containers in a serverless execution environment powered by Knative.
Benefits
Run backend microservices with any programming language and/or dependencies. Serverless pricing, only pay for what you use. Scale automatically. Prevent cloud vendor lock-in. Some of the things you might do with it&amp;hellip;
Deploy server-rendered SSR frontend apps to Firebase Hosting, like Angular Universal, Nuxt, or Next.</description>
    </item>
    
    <item>
      <title>Flutter Flare 2D Animation Basics</title>
      <link>https://fireship.io/lessons/animated-navigation-flutter-flare/</link>
      <pubDate>Tue, 02 Apr 2019 11:00:35 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/animated-navigation-flutter-flare/</guid>
      <description>Whenever I see an awesome UI element in a native app my first question is How do I make that in Flutter?. That&amp;rsquo;s exactly what I asked when I downloaded the Giphy Android app recently, which has runs a colorful and fun animation for each icon in the bottom navbar.
These animations are complex. Hypothetically, they could be created in Flutter natively with a custom painter, but that would be very challenging and painful.</description>
    </item>
    
    <item>
      <title>Use Coder to Run VS Code on Google Cloud</title>
      <link>https://fireship.io/lessons/vscode-cloud-coder-tensorflow/</link>
      <pubDate>Sun, 31 Mar 2019 05:49:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/vscode-cloud-coder-tensorflow/</guid>
      <description>Turning VS Code into a full IDE requires you to carefully blend your favorite extensions and packages for the type of development work you perform. It can take hours or even days to get your development environment fine-tuned for optimal productivity. But what happens upgrade to a new computer? Or need to share your IDE with somebody on the other side of the world? Or maybe you just need more compute resources&amp;hellip;</description>
    </item>
    
    <item>
      <title>Flutter Firestore Animated SlideShow</title>
      <link>https://fireship.io/lessons/flutter-slider-like-reflectly/</link>
      <pubDate>Wed, 20 Mar 2019 10:18:59 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-slider-like-reflectly/</guid>
      <description>One of the best examples of a well-designed UI in Flutter is Reflectly - an AI-powered journal app for iOS and Android. The following lesson will show you how to build an animated slideshow carousel inspired by the work of Reflectly. In addition, we will wire it up to Firestore to make it filterable and able to scale to an infinite number of pages.
PageView Widget Intro The most import widget in this lesson is the PageView, which makes it possible to easily build sliding pages.</description>
    </item>
    
    <item>
      <title>BigQuery ML Quickstart</title>
      <link>https://fireship.io/lessons/bigquery-ml-quickstart/</link>
      <pubDate>Wed, 13 Mar 2019 18:23:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/bigquery-ml-quickstart/</guid>
      <description>BigQuery is a serverless Data Warehouse that makes it easy to process and query massive amounts of data. It supports standard SQL queries in a web-based UI, via the command line, or with a variety of client libraries. In addition, it recently landed support for integrated machine learning, allowing you to build predictive models without data science skills.
What can you do with Big Query?
Stream data to business intelligence tools like Data Studio, Tableau, etc.</description>
    </item>
    
    <item>
      <title>Flutter State Management Guide</title>
      <link>https://fireship.io/lessons/flutter-state-management-guide/</link>
      <pubDate>Fri, 08 Mar 2019 15:19:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-state-management-guide/</guid>
      <description>State management is a hot-button topic that brings out strong opinions in developers, and in extreme cases results in Twitter fights. In my experience, people tend to over-engineer features that would otherwise be straight-forward because they assume a full-blown state management library is necessary. In some cases, they just add complexity, but in others, they can be extremely valuable. My recommendation is to analyze these strategies closely and choose an approach that feels right for your app&amp;rsquo;s requirements and your team&amp;rsquo;s style.</description>
    </item>
    
    <item>
      <title>Stripe Elements and Checkout with Angular</title>
      <link>https://fireship.io/lessons/stripe-elements-angular/</link>
      <pubDate>Mon, 04 Mar 2019 08:48:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-elements-angular/</guid>
      <description>💰 Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Stripe provides several JavaScript libraries - Stripe Elements &amp;amp; Checkout - that makes it easy to collect and validate payment sources like credit cards, bank accounts, and more. The following lesson will show you how to integrate Stripe&amp;rsquo;s clientside JS packages into an Angular application.
Step 0. Prerequisites This lesson only covers the frontend code.</description>
    </item>
    
    <item>
      <title>Flutter Animated Radial Menu</title>
      <link>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</link>
      <pubDate>Sun, 24 Feb 2019 09:14:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</guid>
      <description>Building a flashy animated radial menu in Flutter can be done with ease thanks to the Transform widget and staggered animations. The following lesson will teach you how to compose flutter animations into a cool rotating circular widget, which can easily maintain 60FPS on modern smartphones.
Step 1 - Initial Setup We will define two custom widgets for this demo.
The parent RadialMenu is a StatefulWidget responsible for defining an AnimationController that sets a duration for the animation.</description>
    </item>
    
    <item>
      <title>Trusted Web Activity - PWA to Play Store Guide</title>
      <link>https://fireship.io/lessons/pwa-to-play-store/</link>
      <pubDate>Wed, 20 Feb 2019 10:27:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-to-play-store/</guid>
      <description>Web developers already have a variety of interesting options for using JavaScript to write native mobile apps with tools like React Native, Cordova/Ionic, NativeScript, just to name a few. I&amp;rsquo;ve spent many hours brainstorming with clients on this topic and recently summed up my thoughts about Hybrid App development, but there&amp;rsquo;s a brand new strategy to add to the list&amp;hellip; Trusted Web Activities (TWA). The following guide will show you how to covert any progressive web app to an Android App on the Google Play Store.</description>
    </item>
    
    <item>
      <title>Upload Multiple Files to Firebase Storage with Angular</title>
      <link>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</link>
      <pubDate>Mon, 18 Feb 2019 13:45:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</guid>
      <description>Firebase makes it easy to upload a huge payload of raw files a cloud storage bucket. The following lesson will teach you how to upload files to Firebase Storage with Angular, including several advanced concepts about how to&amp;hellip;
Handle multiple simultaneous concurrent file uploads. Save the resulting download URL to Firestore. Display a progress bar and provide UI controls to pause, cancel, and resume uploads. This post first appeared as Episode 82 on AngularFirebase.</description>
    </item>
    
    <item>
      <title>Flutter Realtime Geolocation Firebase</title>
      <link>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</link>
      <pubDate>Wed, 13 Feb 2019 06:22:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</guid>
      <description>Looking to build a realtime geolocation app like Lyft, Postmates, or Waze? It is easier than you might think when you combine the power of Flutter, Google Maps, and Firebase. The following lesson will show you how use Google Maps in Flutter, then listen to a realtime feed of geolocation data in Firestore queried by its distance from a centerpoint - made possible by the GeoFlutterFire package.
Special thanks to Darshan Gowda for creating the GeoFlutterFire library and providing the example code for this lesson.</description>
    </item>
    
    <item>
      <title>Working with Firestore Arrays</title>
      <link>https://fireship.io/lessons/firestore-array-queries-guide/</link>
      <pubDate>Tue, 12 Feb 2019 14:46:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-array-queries-guide/</guid>
      <description>Have you ever wanted to make a query to Firestore for all documents with an array containing a certain value? Array queries are possible as of Firebase JS SDK v5.3.0. In addition, the SDK also added support for the atomic addition and removal of elements on an array field.
Firestore Arrays Queries Firebase introduced an array-contains operator that can be used with where to query array fields. It will return all documents that contain a the provided value in the array.</description>
    </item>
    
    <item>
      <title>Angular Router Animations Guide</title>
      <link>https://fireship.io/lessons/angular-router-animations/</link>
      <pubDate>Sun, 10 Feb 2019 07:42:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-router-animations/</guid>
      <description>Smooth animated router transitions will impress your users and set your app apart from the crowd. In the following lesson, you will learn how to build complex router transition animations in Angular.
Here&amp;rsquo;s a summary of the animations that we will build from scratch.
fader basic fade in slider slide in from left or right transformer translate, scale, and rotate stepper complex keyframed animation sequences Router Animations Setup Let&amp;rsquo;s start by taking care of the initial Angular Router animations boilerplate.</description>
    </item>
    
    <item>
      <title>TypeScript Decorators by Example</title>
      <link>https://fireship.io/lessons/ts-decorators-by-example/</link>
      <pubDate>Sun, 03 Feb 2019 09:39:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ts-decorators-by-example/</guid>
      <description>One of coolest, yet least approachable features in TypeScript is the Decorator. We see Decorators implemented by the Angular Framework for classes like @Component, properties like @ViewChild, and methods like @HostListener, but have you ever considered building your own from scratch? They seem magical 🍄 in practice, but they are just JavaScript functions that allow us to annotate our code or hook into its behavior - this is known as Metaprogramming.</description>
    </item>
    
    <item>
      <title>Flutter Widget Positioning - A Guide for the CSS Developer</title>
      <link>https://fireship.io/lessons/flutter-widget-positioning-guide/</link>
      <pubDate>Tue, 29 Jan 2019 07:10:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-widget-positioning-guide/</guid>
      <description>The addition of Flexbox to CSS revolutionized the way we position elements on the web. It makes the alignment of elements on a 2D plane automatic and well, flexible. Fortunately, Flutter uses the same principles for aligning widgets with Flex, Column, and Row. In addition, it supports absolute and fixed positioning with Stack.
The following lesson will teach you how to position containers and build layouts in Flutter with direct comparisons to CSS Flexbox.</description>
    </item>
    
    <item>
      <title>Realtime Presence with Angular &#43; Firebase</title>
      <link>https://fireship.io/lessons/realtime-presence-angular-firebase/</link>
      <pubDate>Sun, 27 Jan 2019 14:04:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-presence-angular-firebase/</guid>
      <description>Social media and chat apps (think Slack, Facebook Messenger, etc) often have presence detection systems that can indicate if your friends are online, offline, or away. Traditionally, features like this have been challenging because you need manage state between the client &amp;amp; server, but the Firebase RealtimeDB makes it easy. The following lesson will show you how to build a realtime user presence system with Angular and Firebase.
The browser on the left shows the actual user activity, while the browser on the right is just a neutral observer of the presence changes</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>Flutter for JavaScript Developers</title>
      <link>https://fireship.io/lessons/flutter-for-js-developers/</link>
      <pubDate>Sun, 20 Jan 2019 12:28:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-for-js-developers/</guid>
      <description>So you&amp;rsquo;re a web developer working with JavaScript and curious about Flutter? That was me about one-year ago, and at the time, learning an uncommon language like Dart seemed ridiculous because there are existing hybrid app frameworks in JS. Then I tried it&amp;hellip; To my surprise, I was able to write productive code right out of the gate. The following lesson will compare Dart/Flutter to JS/ReactNative.
Source: FlutterDev subreddit
Throughout this lesson, you will see the 👉 emoji.</description>
    </item>
    
    <item>
      <title>Continuous Integration and Deployment with Google Cloud Build</title>
      <link>https://fireship.io/lessons/ci-cd-with-google-cloud-build/</link>
      <pubDate>Thu, 17 Jan 2019 04:17:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ci-cd-with-google-cloud-build/</guid>
      <description>Continuous Integration and Delivery, aka CI/CD, aka DevOps is the process of automating build, test, and deploy tasks between code changes to your software. The practice can yield a wide range of benefits, but most importantly it keeps your development code looking nearly identical to your production code. The adoption of devops has been a macrotrend in tech for the last few years and presents opportunites for both large teams and independent entrepreneurs.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Google SignIn &#43; Firestore</title>
      <link>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</link>
      <pubDate>Mon, 14 Jan 2019 07:43:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</guid>
      <description>The following lesson will show you how to implement Google SignIn with Flutter and Firebase, then update a custom user profile in Firestore. We will demonstrate several key concepts related to building reactive UIs with realtime streaming data, including
Global Streams and Observables with RxDart StatefulWidget StreamBuilder Step 0: Prerequisites Install FlutterFire Step 1: Build Out the UI First, let&amp;rsquo;s start with a basic UI. Notice we have placeholders for LoginButton() and UserProfile() - these will be created later in the lesson.</description>
    </item>
    
    <item>
      <title>Google OAuth with @angular/fire</title>
      <link>https://fireship.io/lessons/angularfire-google-oauth/</link>
      <pubDate>Sat, 29 Dec 2018 06:51:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angularfire-google-oauth/</guid>
      <description>A solid user authentication system is the bedrock of most web applications. In fact, when starting a new project I genernally focus on user auth first because so many other features depend the user&amp;rsquo;s auth state. The following lesson will show you how to build an OAuth authentication feature using the Google sign-in method. In addition, we will save custom user data to the Firestore database, making it possible to customize a user&amp;rsquo;s profile and/or query all users.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming with Typescript</title>
      <link>https://fireship.io/lessons/object-oriented-programming-with-typescript/</link>
      <pubDate>Mon, 10 Dec 2018 15:34:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/object-oriented-programming-with-typescript/</guid>
      <description>OOP is usually defined by its two core concepts: Polymorphism and Inheritance. Although both concepts are related, they are not the same.
In this article, we’ll take a simple approach to Inheritance, as it’s the most representative of the two.
But instead of getting bored with theory and definition, let’s take a look at a real life example, that illustrates perfectly the advantages of Inheritance.
Like all apps, our example web app needs, at some point, to persist some data to a database.</description>
    </item>
    
    <item>
      <title>Testing Firestore Security Rules With the Emulator</title>
      <link>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</link>
      <pubDate>Wed, 31 Oct 2018 18:20:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</guid>
      <description>🔥 Deep dive with the Firestore Security Rules Master Course.
The most exciting announcement (in my opinion) at Firebase Summit 2018 was the local emulator for Firestore and RTDB, making it possible to test security rules locally or on a CI server. If you&amp;rsquo;re brand new to Firebase security, make sure to watch the Firestore Security Rules Guide.
Project Setup The following lesson creates an isolated testing environment solely for testing rules logic.</description>
    </item>
    
    <item>
      <title>Infinite Virtual Scroll with the Angular CDK</title>
      <link>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</link>
      <pubDate>Sun, 21 Oct 2018 18:16:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</guid>
      <description>The release of Angular v7 gives us access to a new virtual scroll behavior in the Material Component Development Kit (CDK). It provides tools for looping over a lists that only render elements when they are visible in the viewport, preventing lag an janky-ness in the browser. As an added bonus, it exposes a reliable API for building an infinite scroll where new batches of data are retrieved automatically when the user scrolls to the bottom of the list.</description>
    </item>
    
    <item>
      <title>Group Chat with Firestore</title>
      <link>https://fireship.io/lessons/build-group-chat-with-firestore/</link>
      <pubDate>Sun, 14 Oct 2018 18:11:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-group-chat-with-firestore/</guid>
      <description>One of the most compelling reasons to choose Firebase as your backend is to meet the demands of complex realtime features, like group chat. Managing state between multiple clients in realtime is a major undertaking, but with Firebase it becomes almost trivial. The following lesson will teach you how to build a simple group chat app with Cloud Firestore.
This lesson is accompanied by a real demo! Give Firestore Mega Chat a whirl.</description>
    </item>
    
    <item>
      <title>ML Engine Tutorial with Python</title>
      <link>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</link>
      <pubDate>Mon, 01 Oct 2018 18:03:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</guid>
      <description>Building a predictive model is only half the battle when it comes to machine learning - you also need a way for clientside apps to consume it and add value to the user experience. Today we&amp;rsquo;re going to wire up a collection of Google Cloud services to train and deploy a Python-based ML model to the cloud. The following lesson is designed for product-minded developers who want to get an idea of the end-to-end ML process in the cloud.</description>
    </item>
    
    <item>
      <title>Using the Google Calendar API</title>
      <link>https://fireship.io/lessons/google-calendar-api-with-firebase/</link>
      <pubDate>Mon, 24 Sep 2018 17:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-calendar-api-with-firebase/</guid>
      <description>I use Google Calendar almost every day and really appreciate apps that can coordinate important events for me automatically. Today, we&amp;rsquo;ll learn how to integrate Google&amp;rsquo;s JavaScript API client with Firebase to make authenticated requests to the Calendar API on the behalf of a user. This article was inspired by the real-world requirements of a Broadway Life, a tour company in NYC and needs to perform full CRUD operations on their clients&amp;rsquo; calendar.</description>
    </item>
    
    <item>
      <title>How to Share Code between JavaScript Apps</title>
      <link>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</link>
      <pubDate>Tue, 04 Sep 2018 17:48:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</guid>
      <description>The right project structure for your app depends primarily on (1) its complexity, and (2) the size of your team. In this lesson, I will show you how to use NPM packages to share code in a big JavaScript project that contains multiple apps.
Monorepos versus Multiple Repos There are two high-level strategies for handling source control in a large complex web application - monorepo and multiple repos. Some developers have very strong preferences for one or the other, but it mostly just boils down to a series of tradeoffs.</description>
    </item>
    
    <item>
      <title>Ionic Routing and Navigation Guide</title>
      <link>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</link>
      <pubDate>Tue, 04 Sep 2018 17:43:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</guid>
      <description>The single most important change from Ionic v3 to v4 is how routing and navigation is handled. In the past, Ionic used its own push-pop NavController, but has since decieded to use the Angular Router directly. This is a very smart move in my opinion because Angular&amp;rsquo;s router is just so powerful - but it does have a bit of a learning curve. In the following lesson, you will learn the fundamental concepts required to be successful with routing and navigation in Ionic 4.</description>
    </item>
    
    <item>
      <title>Deploy Multiple Sites to Firebase Hosting</title>
      <link>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</link>
      <pubDate>Wed, 29 Aug 2018 17:35:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</guid>
      <description>Firebase hosting recently announced support for multiple hosting targets within a single project. I am thrilled to see this feature because it is such a common requirement for real world apps. For example, you might have two separate apps - one for customers, one for admin employees - both of which share the same database and functions. In the past, we would have to get clever with deployment by either sharing the same URL or juggling multiple projects.</description>
    </item>
    
    <item>
      <title>Custom Rxjs Operators by Example</title>
      <link>https://fireship.io/lessons/custom-rxjs-operators-by-example/</link>
      <pubDate>Sun, 26 Aug 2018 17:28:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-rxjs-operators-by-example/</guid>
      <description>Understanding how to build custom RxJS operators will provide a huge boost to your knowledge of reactive programming and Observables. Not to mention, they have a wide variety of practical use cases and provide excellent code reuse. The following lesson will show you how to build a handful of custom pipeable operators from scratch.
What is an RxJS Operator? An operator is just a pure function that takes the source Observable as it&amp;rsquo;s input and returns an Observable as its output, usually modified in some way.</description>
    </item>
    
    <item>
      <title>Join Collections in Firestore</title>
      <link>https://fireship.io/lessons/firestore-joins-similar-to-sql/</link>
      <pubDate>Thu, 23 Aug 2018 17:30:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-joins-similar-to-sql/</guid>
      <description>How do I perform a SQL JOIN in Firestore? - it&amp;rsquo;s a difficult question almost all developers will come across. The simple answer for ALL NoSQL databases is that it&amp;rsquo;s just not possible in an apples-to-apples way. We can&amp;rsquo;t perform this operation server-side, however, we can get clever with custom RxJS operators to solve similar problems - plus gain the added benefit of maintaining realtime listeners on all data.
Our operators require AngularFire and will add some RxJS magic to its existing Observables to tackle the challenge of joining Firestore documents and collections together easily in Firestore.</description>
    </item>
    
    <item>
      <title>Introduction to Rxfire Rxjs for Firebase</title>
      <link>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</link>
      <pubDate>Wed, 22 Aug 2018 15:22:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</guid>
      <description>Maintaining async callback-based code is one of the most challenging tasks a developer will face. Over the past few years, RxJS has become the leading tool for reactive programming in JavaScript, so it only makes sense that Firebase would leverage it to make realtime streams more developer-friendly. In the following lesson, you will take an early look at a new officially-supported library called RxFire.
Principles Not a replacement for AngularFire2 in Angular projects.</description>
    </item>
    
    <item>
      <title>Ionic Intro Slider for New Users</title>
      <link>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</link>
      <pubDate>Sun, 19 Aug 2018 15:16:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</guid>
      <description>A useful intro slider is a sign of a highly polished mobile app. A quick tutorial for using your app provides an excellent user experience and can reduce bounce rates for new users.
In the following lesson, you will learn how to use the slider component in Ionic 4 to build a multi-step introduction that educates users how to use your app.
Ionic slides as an app tutorial for new users</description>
    </item>
    
    <item>
      <title>Ionic CSS Variables Dynamic Theme Generator</title>
      <link>https://fireship.io/lessons/css-variables-in-ionic-4/</link>
      <pubDate>Tue, 14 Aug 2018 15:10:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/css-variables-in-ionic-4/</guid>
      <description>One of the major changes to theming in Ionic 4 is the use of CSS variables, which are simply CSS values that can be reused across multiple elements or components. Unlike variables in Sass or LESS that need to be compiled, they can be changed and interpreted by the browser on the fly. This is an extremely powerful feature for web components that use the Shadow DOM, like Ionic 4.</description>
    </item>
    
    <item>
      <title>Image Thumbnail Resizer Cloud Function</title>
      <link>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</link>
      <pubDate>Thu, 09 Aug 2018 15:06:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</guid>
      <description>The single most common Cloud Function use-case for a storage bucket is to resize images to thumbnails in the background. I&amp;rsquo;ve built quite a few of these functions and have developed some techniques to make the process more developer-friendly and performant. The following lesson demonstrates how to resize a Cloud Storage upload to a set of thumbnails using Cloud Functions v2.x.
Thumbnails resized by a Firebase Cloud Function
Initial Setup Want to master the fundamentals of serverless?</description>
    </item>
    
    <item>
      <title>Metered Stripe Subscription Billing</title>
      <link>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</link>
      <pubDate>Sat, 14 Jul 2018 14:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</guid>
      <description>💰 Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Today we will something very ambitious - our own Software-as-a-Service (SaaS) product that bills users based on metered usage. The app is a hypothetical project management tool with a pay-as-you-go billing system based on the volume of usage (just like the Blaze plan in Firebase). A user can create multiple projects, each at a cost of $1.</description>
    </item>
    
    <item>
      <title>Realtime GeoQueries with Firestore</title>
      <link>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</link>
      <pubDate>Tue, 10 Jul 2018 05:59:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</guid>
      <description>The ability to query by geographic coordinates in Firestore is a highly requested feature because many successful apps - like Uber, Pokemon Go, Instagram, etc - use realtime maps as part of the core user experience. Today you will learn how to build a realtime Google map using Firestore as the data source.
Fingers-crossed: It&#39;s possible that Firestore will have native support for Geolcation queries in the future, but there is no public timeline for this feature that I&#39;m aware of</description>
    </item>
    
    <item>
      <title>Auto-save Reactive Form with Firestore</title>
      <link>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</link>
      <pubDate>Mon, 28 May 2018 14:17:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</guid>
      <description>Forms are one of the most critical, yet most cumbersome aspects of app development. They require a ton of HTML markup and require complex validation rules for a good user experience. Almost all forms must be synced to a backend database, leaving us faced a state management conundrum that is not always easy to solve. In this lesson, my goal is to provide you with a reliable solution for syncing your frontend forms to any backend database.</description>
    </item>
    
    <item>
      <title>Test Firebase Cloud Functions with Jest</title>
      <link>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</link>
      <pubDate>Wed, 23 May 2018 14:25:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</guid>
      <description>Firebase Cloud Functions makes building a serverless backend easy and fun, but the proper way to write unit tests in this environment is not exactly clear. In this episode, I will show you how to setup a testing environment for your functions and use Jest to implement unit tests.
Jest is my preferred testing framework for Cloud Functions, but the official docs use Mocha, Sinon, and Chai. Either approach works.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Basics Guide</title>
      <link>https://fireship.io/lessons/basics-reactive-forms-in-angular/</link>
      <pubDate>Mon, 21 May 2018 14:03:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/basics-reactive-forms-in-angular/</guid>
      <description>As part of the Angular Basics Series, we will be taking a comprehensive look at Reactive Forms from the ground up. The official documentation is a very long read, so this guide is designed to help you master the basics by focusing on the bare essential concepts you must know.
Reactive Forms for PROs Advanced Auto-saving Firestore Form Email/Password Auth with Reactive Forms 1. Reactive Forms Fundamentals At this point, it is assumed that you have an existing Angular project started with the CLI v6+.</description>
    </item>
    
    <item>
      <title>Build an Angular Library With NgPackagr</title>
      <link>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</link>
      <pubDate>Wed, 02 May 2018 13:55:36 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</guid>
      <description>In this lesson, I will show you how to build an Angular Library from scratch using NgPackagr. My main motivation for this article is that Google Analytics recently changed their main API to gtag.js, but solid Angular libraries were lacking, so I decided to build one from scratch. NgPackagr made the bundling process very easy.
Angular packages are standardized by the Angular Package Format, but generating this output manually is difficult.</description>
    </item>
    
    <item>
      <title>Angular Elements Guide</title>
      <link>https://fireship.io/lessons/angular-elements-quick-start-guide/</link>
      <pubDate>Sun, 29 Apr 2018 13:43:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-elements-quick-start-guide/</guid>
      <description>It is exciting to finally see the adoption of web components going mainstream. There are many tools available for building them, but none can match the power and stability of Angular Elements. The following lesson will provide a handful of useful techniques aimed at building complex production-ready custom elements.
In addition to this post, check out these resources:
Manfred Steyer&amp;rsquo;s Angular Elements Series Sam Julian&amp;rsquo;s Getting Started with Angular Elements Nrwl&amp;rsquo;s Five Reasons to Use Angular Elements Angular Elements QuickStart Rendering without Zone.</description>
    </item>
    
    <item>
      <title>NGXS Quick Start</title>
      <link>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</link>
      <pubDate>Fri, 06 Apr 2018 13:32:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</guid>
      <description>In this lesson we will get up and running with NGXS - a redux-style state management system for Angular. My goal in this lesson is to get you familiar with the core concepts that underpin this library and make some balanced comparisons to NgRx.
This article is a work in progress. Let me know what you think about NGXS in the comments. NgRx vs NGXS The big question on everybody&amp;rsquo;s mind is how does NGXS compare to NgRx?</description>
    </item>
    
    <item>
      <title>TensorFlow.js Quick Start Tutorial</title>
      <link>https://fireship.io/lessons/tensorflow-js-quick-start/</link>
      <pubDate>Sat, 31 Mar 2018 13:25:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/tensorflow-js-quick-start/</guid>
      <description>Google launched TensorFlow.js at TensorFlow Dev Summit 2018, which opens the door to building machine learning (ML) models in the browser. This means web developers can do things like&amp;hellip;
Build privacy-friendly AI features. Data never leaves the client, so you can build deep learning models without ever seeing the actual data. Use pre-trained Python ML models in your app. There are tons of successful Python-based models that you can load into the browser and start running predictions with minimal code.</description>
    </item>
    
    <item>
      <title>CSV to Firestore</title>
      <link>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</link>
      <pubDate>Sun, 25 Mar 2018 17:34:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</guid>
      <description>If you want to migrate your existing database to Firestore, you might be wondering&amp;hellip; How do I import JSON or CSV to Firestore?. In this lesson, I will provide you with a reliable pipeline for reading raw data and parsing it to a writable format for Firestore.
Everybody has different data modeling needs, so I will teach you how to quickly roll out your own NodeJS CSV-to-Firestore command line import tool.</description>
    </item>
    
    <item>
      <title>Passwordless Signup With Firebase on the Web</title>
      <link>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</link>
      <pubDate>Tue, 20 Mar 2018 17:25:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</guid>
      <description>Passwordless auth - or email-link signup - is a cool new user authentication option in the Firebase SDK that was released in v4.12.0 on March 20th, 2018. Rather than force a user to remember a password, we simply send them an email with a link that creates the JSON Web Token when they redirect back to the site. As a user of apps, I see this method quickly replacing traditional passwords and personally find it much more user-friendly.</description>
    </item>
    
    <item>
      <title>The Ultimate Beginners Guide to Firebase</title>
      <link>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</link>
      <pubDate>Sun, 25 Feb 2018 16:13:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</guid>
      <description>Today we&amp;rsquo;re going back to the basics in Firebase by building a basic web app from scratch. Even though this is beginner level, I think it&amp;rsquo;s very useful to write code with Firebase using nothing but plain JS, especially if you&amp;rsquo;re used to developing with a framework library like AngularFire, ReactFire, or Vuefire. In addition, I want give you my Why Firebase? opinion and explain why it&amp;rsquo;s my goto cloud provider.</description>
    </item>
    
    <item>
      <title>Typeahead Autocomplete with Firestore</title>
      <link>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</link>
      <pubDate>Tue, 20 Feb 2018 14:40:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</guid>
      <description>In this lesson, we will build a basic typeahead or autocomplete system using nothing but Firestore. It relies on an object/map data structure that exposes some of the more advanced query patterns available to us. The database contains a collection of movie documents, and our goal is to build a search form that will auto-populate results based on the movie&amp;rsquo;s title.
Typeahead demo using only Firestore
Method 1: Offset with the Magic uf8ff Character A few months ago I created a RealtimeDB Autocomplete lesson that uses &#39;\uf8ff&#39;, which is a very high Unicode point.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Async Validation</title>
      <link>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</link>
      <pubDate>Sat, 10 Feb 2018 15:40:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</guid>
      <description>Reactive form validation can be a complex and difficult feature to implement, especially if you need to validate fields asynchronously. Angular ships with a few built-in validators, but they can only take you so far&amp;hellip;
Today, we are building a custom async validator that can verify username uniqueness in Firebase Firestore. My goal is to show you async validator for your reactive forms that you can apply to virtually any backend data source.</description>
    </item>
    
    <item>
      <title>Advanced Data Modeling with Firestore by Example</title>
      <link>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</link>
      <pubDate>Mon, 05 Feb 2018 15:31:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</guid>
      <description>In the previous lesson, we learned the fundamentals of relational data modeling with Firestore. Today I want to push further and look at several more practical examples. In addition to data modeling, we will look at techniques like duplication, aggregation, composite keys, bucketing, and more.
Keep in mind, Firestore is still in beta. Firebase engineers hinted at some really cool features on the roadmap (geo queries, query by array of ids) - I&#39;ll be sure to keep you posted :)</description>
    </item>
    
    <item>
      <title>Firestore NoSQL Relational Data Modeling</title>
      <link>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</link>
      <pubDate>Mon, 05 Feb 2018 15:20:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</guid>
      <description>Looking for advanced data modeling concepts and examples? Take the Firestore Data Modeling Course.
Data modeling in a NoSQL environment is tricky - especially if you come from a RDBMS background (MySQL, Postgres, etc) because you will need to unlearn many of the core principles already solidified in your brain. Firestore uses a document-oriented NoSQL model, similar to MongoDB and CouchDB, which leads to fundamentally different data structuring decisions.
The goal of this lesson is to examine data modeling principles in Firestore with comparisons to SQL.</description>
    </item>
    
    <item>
      <title>Extract Text from Images</title>
      <link>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</link>
      <pubDate>Fri, 02 Feb 2018 15:08:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>Google Cloud Vision with Ionic - Not Hotdog App</title>
      <link>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</link>
      <pubDate>Wed, 24 Jan 2018 15:00:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</guid>
      <description>In this lesson, we&amp;rsquo;re going to combine Google&amp;rsquo;s Google&amp;rsquo;s Cloud Vision API with Ionic and Firebase to create a native mobile app that can automatically label and tag images. But most importantly, it can determine if an image is a hotdog or not - just like the SeeFood app that made Jin Yang very rich.
Just a few years ago, this technology would have been unreachable by the average developer. You would need to train your own deep neural network on tens-of-thousands of images with massive amounts of computing power.</description>
    </item>
    
    <item>
      <title>Mobile Touch Animation with HammerJS</title>
      <link>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</link>
      <pubDate>Thu, 28 Dec 2017 14:17:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</guid>
      <description>If your app targets users on mobile devices (80% of apps do), then you should carefully consider the impact of touch gestures, i.e. swipe, tap, pinch, etc. In this lesson, I will show you how to listen to touch gestures with HammerJS, then apply cool animations to them with Angular.
In addition, we will learn how to customize the configuration of HammerJS and build our own custom events beyond the basic ones provided.</description>
    </item>
    
    <item>
      <title>Material Data Tables With Firestore</title>
      <link>https://fireship.io/lessons/material-data-tables-with-firestore/</link>
      <pubDate>Tue, 12 Dec 2017 05:49:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/material-data-tables-with-firestore/</guid>
      <description>In this lesson, I will show you how to build an Angular Material data datable that is sortable and filterable, while maintaining a realtime connection with Firestore. A dialog modal will be used share data between material components and update documents in Firestore.
This tutorial also makes suggestions for performance optimization when dealing with hundreds rows in the view. The end result is a table that&amp;hellip;
Uses Firebase/Firestore as the data source.</description>
    </item>
    
    <item>
      <title>Role Based Authorization With Firestore</title>
      <link>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</link>
      <pubDate>Thu, 07 Dec 2017 05:39:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</guid>
      <description>Learn more about data modeling in Firestore in the full course.
In this lesson, I will show you how to assign roles to users with the Firestore NoSQL database, then secure them on both the frontend and backend. This feature is known as role-based access control and is commonly used in forums, social media, etc - Stack Overflow Privileges is an excellent specimen of this feature in the wild (minus the ranking system).</description>
    </item>
    
    <item>
      <title>PWA Performance Optimization Tips</title>
      <link>https://fireship.io/lessons/pwa-performance-optimization-angular/</link>
      <pubDate>Sat, 25 Nov 2017 12:27:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-performance-optimization-angular/</guid>
      <description>The following lesson contains a handful of tips and ideas aimed at optimizing the Lighthouse PWA performance score. Any good optimization starts with a solid analysis, so I will also provide you with some advanced tools for analyzing the performance for your progressive web app.
High Performance PWAs with Angular PWA performance is largely dependent on the way you design your app. In this demo, I am following the PRPL pattern from Polymer as closely as possible.</description>
    </item>
    
    <item>
      <title>CSV Exports from Firestore</title>
      <link>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</link>
      <pubDate>Tue, 14 Nov 2017 12:13:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</guid>
      <description>A common business requirement for a professional app is to export data as comma separated values, or CSV format. Data formatted this way can be used by spreadsheet software like Microsoft Excel and Google Docs, but it can also be used as input to many popular machine learning libraries. It this lesson, I will show you how to export a Firestore collection in CSV format using Firebase Cloud Functions and a Storage Bucket.</description>
    </item>
    
    <item>
      <title>Multi-step Reactive Form for Email-Password Signup</title>
      <link>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</link>
      <pubDate>Sun, 12 Nov 2017 12:05:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</guid>
      <description>Firebase password auth can be configured with a few lines of code, but what happens if you need additional custom user data before authorizing activity in your app? In this lesson, my goal is to show you several important concepts.
Email/Password Auth Reactive Forms in Angular Security with custom Firebase user data What are we Building? This lesson is based off of the [Firstarter PWA starter app](https://firestarter-96e46.firebaseapp.com/), which is organized into NgModules.</description>
    </item>
    
    <item>
      <title>Middleware for Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</link>
      <pubDate>Wed, 08 Nov 2017 11:57:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</guid>
      <description>In Angular SEO Part 1, I introduced the awesomeness of Headless Chrome and Rendertron. The only thing missing is the middleware that can determine if incoming traffic is a bot or a regular user. Rendertron has officially supported Express middleware or you can create your own from scratch using Firebase Cloud Functions. As you will see, it&amp;rsquo;s not all that difficult.
This method works really well with Firebase and here&amp;rsquo;s why&amp;hellip;</description>
    </item>
    
    <item>
      <title>Angular SEO with Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</link>
      <pubDate>Mon, 06 Nov 2017 11:43:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</guid>
      <description>⚠️ As of 2020, SEO and SSR in Angular is much-improved. Consider Angular Universal as your first option before this approach.
The single most common question I receive is How do I make Angular SEO friendly. Usually my answer is Well, it&amp;rsquo;s complicated&amp;hellip; no more. Today I bring you a simple solution to this very important problem.
I am going to show you a novel SEO strategy to make an Angular5 (or any Progressive Web App for that matter) visible to search engine crawlers and social media link preview bots.</description>
    </item>
    
    <item>
      <title>Cloud Functions Data Aggregation</title>
      <link>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</link>
      <pubDate>Sun, 29 Oct 2017 11:27:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</guid>
      <description>The following lesson demonstrates how to make Firestore queries faster and more cost-effective by aggregating data from a subcollection to its parent. Aggregation is simply the process of totaling up a bunch of documents and calculating combined or cumulative information about them.
A Firebase Cloud Function configured with a Firestore database trigger makes it possible to perform this task automatically whenever a document changes. This demo simulates the relationship between blog posts and a subcollection of comments.</description>
    </item>
    
    <item>
      <title>Star Ratings System With Firestore</title>
      <link>https://fireship.io/lessons/star-ratings-system-with-firestore/</link>
      <pubDate>Tue, 17 Oct 2017 11:17:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/star-ratings-system-with-firestore/</guid>
      <description>In this lesson, we will build a five-star rating system from scratch with Angular and Firebase.
Knowing how to implement star reviews in Angular is an important skill for a developer because the same concepts are used for likes, hearts, votes, and many other common UX features.
Firestore Data Structure How do we model star-ratings in a NoSQL database like firestore? In the SQL world, this is known as a many-to-many-through` relationship where Users have many Movies through Reviews AND Movies have many Users through Reviews</description>
    </item>
    
    <item>
      <title>Http With Angular Quick Start</title>
      <link>https://fireship.io/lessons/http-with-angular-quick-start/</link>
      <pubDate>Wed, 11 Oct 2017 10:56:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/http-with-angular-quick-start/</guid>
      <description>In this lesson, we are going to use the Angular HTTP Client to make API calls to an API endpoint to retrieve data. My goal is to teach you the fundamental concepts needed to start using one of the thousands of RESTful APIs in the world.
This lesson uses the newer `HttpClientModule` introduced in Angular 4.3, not to be confused with the old standalone HttpModule.
To simulate requests to a real API we are using JSONPlaceholder.</description>
    </item>
    
    <item>
      <title>Infinite Scroll Firestore Angular</title>
      <link>https://fireship.io/lessons/infinite-scroll-firestore-angular/</link>
      <pubDate>Wed, 11 Oct 2017 05:26:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-scroll-firestore-angular/</guid>
      <description>A few months ago, I showed you how to create a basic infinite scroll feature using Realtime Database. Today, we will create a more sophisticated and flexible pagination service with Firestore to facilitate infinite scroll.
As an added bonus, the feature will be able to scroll upwards, which is useful when scrolling back in time through a text feed - think Facebook Messenger or Slack.
Get the [Firestore Pagination source code](https://github.</description>
    </item>
    
    <item>
      <title>Build a Weather App with Angular</title>
      <link>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</link>
      <pubDate>Mon, 09 Oct 2017 11:07:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</guid>
      <description>In this lesson, you will learn how to retrieve weather data from an API and use it in a frontend Angular app. A secure backend built with Firebase Cloud Functions will make the HTTP request to ensure sensitive data is not exposed in Angular.
The end result looks like this, but you will have access to whole bunch of weather data to completely customize the user experience.
Weather forecasting app demo</description>
    </item>
    
    <item>
      <title>Secure Firebase Cloud Functions for Authenticated Users</title>
      <link>https://fireship.io/lessons/secure-firebase-cloud-functions/</link>
      <pubDate>Wed, 27 Sep 2017 07:08:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secure-firebase-cloud-functions/</guid>
      <description>Learn more in the Cloud Functions Master Course.
In this lesson, I will show you how to run Firebase Cloud Functions ONLY when users are authenticated with a valid user ID.
Endpoint security is critical - especially if using a paid 3rd party API like SendGrid or Twilio. There are certain situations where only want a function to run if the user is currently authenticated. For example, you may have a function that sends transactional email to a user via SendGrid.</description>
    </item>
    
    <item>
      <title>Desktop Apps with Electron and Angular</title>
      <link>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</link>
      <pubDate>Thu, 21 Sep 2017 06:56:25 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</guid>
      <description>In this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.
This lesson covers the following topics:
Configure Electron 1.7 with Angular. Build a simple timer app in Angular. Package the app for install on Windows 10, macOS, and Linux Ubuntu.</description>
    </item>
    
    <item>
      <title>Angular NgRx Starter Guide</title>
      <link>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</link>
      <pubDate>Sun, 27 Aug 2017 06:25:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</guid>
      <description>The Redux JavaScript library was made famous by React and Elm, but its design patterns can also be applied in Angular. The general idea is that all application data is kept in a single JavaScript object on the client, giving you a predictable tree of state changes (we&amp;rsquo;ll get into this later). In this lesson, we are going to build a simple NgRx Angular app from scratch, that will eventually become this NgRx-Fire demo app.</description>
    </item>
    
    <item>
      <title>Push Notifications on the Web</title>
      <link>https://fireship.io/lessons/push-messages-with-firestore/</link>
      <pubDate>Tue, 01 Aug 2017 05:14:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/push-messages-with-firestore/</guid>
      <description>A few months ago, I released a video covering Firebase Cloud Messaging (FCM) with the Realtime Database. Today, I am going to update this code with the following improvements:
Save FCM tokens in Firestore. Send Firebase push messages to multiple devices simultaneously. Angular 5 firebase cloud messaging demo in angular
Setting Up Firebase Cloud Messaging in Angular There are several steps you must take in Angular to get started with cloud messaging.</description>
    </item>
    
    <item>
      <title>Build Realtime Maps with Mapbox GL</title>
      <link>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</link>
      <pubDate>Fri, 28 Jul 2017 04:59:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</guid>
      <description>In this lesson, I am going to cover the basics of building realtime map features with Angular4, Firebase, and MapBox. Here’s a highlight of what is covered in the code below. How to obtain a user’s current location How to connect Firebase data with Mapbox How to format GeoJSON data. How to quickly customize map styles. realtime interaction between two maps
Initial Setup Start by signing up for a free Mapbox account, then installing mapbox-gl in your Angular project.</description>
    </item>
    
    <item>
      <title>Angular Animations Examples</title>
      <link>https://fireship.io/lessons/angular-animations-examples/</link>
      <pubDate>Mon, 24 Jul 2017 04:50:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-animations-examples/</guid>
      <description>Animation is often the X-factor that sets remarkable apps apart from average apps. In this lesson, I provide five basic animation examples based on Angular 4.3+. This article covers the animation techniques I find most useful when building Angular apps, but check out this excellent post on new Angular 4.2 animation features for a more comprehensive look at the latest features.
All animations can be boiled down into two simple steps:</description>
    </item>
    
    <item>
      <title>Firebase Phone Authentication</title>
      <link>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</link>
      <pubDate>Wed, 19 Jul 2017 04:34:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</guid>
      <description>Signing up users with a phone number adds certain degree of trust or confidence to an app. In this lesson, we are going to use the new phone authentication paradigm from Firebase in our Angular 4 app. At this time, phone auth is not supported in AngularFire, so we will use the firebase JavaScript SDK directly. Phone auth can also be used to link accounts, providing an effective solution for two-factor authentication.</description>
    </item>
    
    <item>
      <title>Facebook-Inspired Reactions From Scratch</title>
      <link>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</link>
      <pubDate>Wed, 05 Jul 2017 16:00:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build a Facebook-inspired reaction component. It works by mapping each reaction type to an integer then saves it with an associated userId. This is similar to the reddit voting system lesson, with some added complexity to manage the various reaction types. Importing the Graphics First, let’s add some graphics to the assets folder.</description>
    </item>
    
    <item>
      <title>Angular Toast Message Notifications From Scratch</title>
      <link>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</link>
      <pubDate>Mon, 03 Jul 2017 15:50:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build toast notifications from scratch with Angular 4. There are a couple of good Angular toast packages that solve this problem, but it’s not very hard to do from scratch. This implementation provides a feed of 5 messages/notifications, which the user can dismiss by clicking. A service will manage the notifications, so they can be observed or updated from any component.</description>
    </item>
    
    <item>
      <title>Twitter Inspired Follow System with Firebase</title>
      <link>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</link>
      <pubDate>Tue, 27 Jun 2017 15:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
The idea of user following and unfollowing has been around since the rise of Twitter, but add this feature into an app is not as easy as you might think. It is an inherently relational problem, so making it work with a NoSQL database requires some tradeoffs. In this lesson, we are going to build twitter-inspired follow and unfollow feature using on Firebase and Angular 4.</description>
    </item>
    
    <item>
      <title>Text Translator With Firebase Cloud Functions Onwrite and Angular</title>
      <link>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</link>
      <pubDate>Sun, 25 Jun 2017 15:17:21 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
In this lesson, we are going to use Firebase Cloud Functions to run code in the background when new data is created in a specific part of the database, using the onWrite event handler. This will allow us to abstract CPU or memory intensive tasks outside of the frontend Angular app.</description>
    </item>
    
    <item>
      <title>Custom Usernames With Firebase Authentication and Angular</title>
      <link>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</link>
      <pubDate>Sat, 24 Jun 2017 15:27:32 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app and the custom Firebase Usernames tutorial.
Firebase authentication is super convenient, but you can’t easily assign custom usernames out of the box. In this lesson, we are going to give users custom usernames and asynchronously validate their availability during the signup process. On every keyup, the username will be checked for duplicates, so we can display a helpful message to the user.</description>
    </item>
    
    <item>
      <title>Reddit Style Upvoting in Angular 4 and Firebase</title>
      <link>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</link>
      <pubDate>Fri, 23 Jun 2017 15:09:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
Upvoting and downvoting is an excellent ay handle community-driven content curation. Reddit is the most famous example of this feature, but it is common throughout the interwebs on places like StackOverflow, Kaggle, and others. In this lesson, we will use Angular 4 and Firebase to implement upvoting with ease.</description>
    </item>
    
    <item>
      <title>Sharing Data between Angular Components - Four Methods</title>
      <link>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</link>
      <pubDate>Thu, 20 Apr 2017 14:13:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</guid>
      <description>Learning Angular? Check out the full Angular 9 Course
Data sharing is an essential concept to understand before diving into your first Angular project. In this lesson, I provide four different methods for sharing data between Angular components.
The Parent-Child-Sibling structure of our Angular app.
Parent to Child: Sharing Data via Input This is probably the most common and straightforward method of sharing data. It works by using the @Input() decorator to allow data to be passed via the template.</description>
    </item>
    
    <item>
      <title>Reactive Crud App With Angular and Firebase Tutorial</title>
      <link>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</link>
      <pubDate>Mon, 10 Apr 2017 13:06:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
We’re going to be building a basic list of items that you do CRUD to - create, read, update, delete. The feature itself is nothing special, it’s really just a skeleton that demonstrates how to do the most common operations with Angular and Firebase. The realtime database from Firebase uses NoSQL, so think of CRUD in the following terms.</description>
    </item>
    
  </channel>
</rss>
