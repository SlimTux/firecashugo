<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud functions on Fireship</title>
    <link>https://fireship.io/tags/cloud-functions/</link>
    <description>Recent content in Cloud functions on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Feb 2022 09:09:07 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/cloud-functions/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Twitter Bot Tutorial</title>
      <link>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</link>
      <pubDate>Thu, 03 Feb 2022 09:09:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</guid>
      <description>Full tutorial under development&amp;hellip;</description>
    </item>
    
    <item>
      <title>Accept Crypto Payments with Coinbase Commerce</title>
      <link>https://fireship.io/lessons/crypto-payments-web-firebase/</link>
      <pubDate>Mon, 29 Mar 2021 11:13:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/crypto-payments-web-firebase/</guid>
      <description>Accepting crypto payments, like Bitcoin and Ethereum, in your app opens the door to more customers in a very fast growing niche. Coinbase Commerce is like the Stripe Payments API for crypto. It provides a simple API where you can create charges, invoices, etc. But unlike credit cards, which are processed by a central authority, crypto payments are distributed to a global network of miners where they are confirmed on the blockchain.</description>
    </item>
    
    <item>
      <title>Fulltext Search on Firebase with Meilisearch</title>
      <link>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</link>
      <pubDate>Fri, 28 Aug 2020 08:14:16 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/meilisearch-firebase-google-cloud/</guid>
      <description>A common issue that developers face with NoSQL databases (and SQL to a lesser extent) is a lack of full-text search capabilities. If you want to build a performant typeahead search box or handle multi-property filtering on a collection, you’ll find it frustratingly difficult to implement in Firestore - it’s just not the right database for the job. There are many good solutions, like Algolia and ElasticSearch, but they can be expensive and/or complex to manage.</description>
    </item>
    
    <item>
      <title>Access Google APIs for Users with OAuth 2.0</title>
      <link>https://fireship.io/lessons/google-apis-node-tutorial/</link>
      <pubDate>Sat, 23 May 2020 00:33:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-apis-node-tutorial/</guid>
      <description>How do you make APIs calls to a Google service on behalf of a user? The following lesson demonstrates how to get permission from a user with OAuth 2.0 to make authenticated requests to Google APIs from a backend Node.js server like Firebase Cloud Functions.
Examples of common use cases might include:
Upload a file to a user&amp;rsquo;s Google Drive Make an appointment on a user&amp;rsquo;s Google Calendar Access a user&amp;rsquo;s infrastructure on Google Cloud Platform 💡 Note: This lesson covers server-side OAuth.</description>
    </item>
    
    <item>
      <title>Google Secret Manager with Firebase</title>
      <link>https://fireship.io/lessons/secret-manager-with-firebase/</link>
      <pubDate>Wed, 15 Apr 2020 13:08:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secret-manager-with-firebase/</guid>
      <description>Secret Manager is a new service on Google Cloud that allows us to store and version sensitive data like private API keys and passwords, then access it from any cloud service. It provides encryption, audit logging, versioning, and IAM roles for secure fine-grained control over sensitive information.
A common use-case for a Firebase apps is the management of secret API keys in a Cloud Function. The following lesson will teach you how add secrets via the Google Cloud console, then read them from a Firebase Cloud Function with Node.</description>
    </item>
    
    <item>
      <title>How to Build a Slack App</title>
      <link>https://fireship.io/lessons/how-to-build-a-slack-bot/</link>
      <pubDate>Tue, 03 Dec 2019 14:22:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-build-a-slack-bot/</guid>
      <description>Slack Apps, or Bots, allow you to extend slack with interactive features that can improve your teams productivity. The following lesson is a step-by-step guide to building a Slack App using Firebase Cloud Functions as the backend server.
This lesson builds Slack App for the actual Fireship Slack. Join to see the CyberJeff bot in action.
Our Slack App will perform the following tasks.
Listen to events, such as a new user joining the #general channel.</description>
    </item>
    
    <item>
      <title>Stripe Payment Intents Tutorial</title>
      <link>https://fireship.io/lessons/stripe-payment-intents-tutorial/</link>
      <pubDate>Tue, 22 Oct 2019 18:05:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-payment-intents-tutorial/</guid>
      <description>Stripe provides a huge API with everything you could ever want to build a complex payment system. Recent changes in the online payments landscape have resulted in significant changes to the API, most notably the Payment Intents API. The following lesson demonstrates two modern strategies for accepting one-time payments - (1) Checkout and (2) Stripe Elements with Payment Intents.
As of September 2019, many European banks now require their customers to validate payments using 3D secure standard or Strong Customer Authentication SCA.</description>
    </item>
    
    <item>
      <title>Algolia Fulltext Search Cloud Functions</title>
      <link>https://fireship.io/lessons/algolia-cloud-functions/</link>
      <pubDate>Sun, 25 Aug 2019 10:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/algolia-cloud-functions/</guid>
      <description>One of the most commonly encountered limitations of Cloud Firestore (and GCP) is full-text search. This functionality is essential if you need to query complex text patterns in a database or filter results by multiple dynamic properties. My favorite solution to this limitation is Algolia, which provides a powerful, developer-friendly, search &amp;amp; discovery API. In the following lesson you will learn how to sync your Firestore data to an Algolia index via Cloud Functions.</description>
    </item>
    
    <item>
      <title>Cloud Functions Master Course</title>
      <link>https://fireship.io/courses/cloud-functions/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/</guid>
      <description>This course takes a hands-on approach to Firebase Cloud Functions where we build seven different microservices, each demonstrating a fundamental concept of the platform. Here&amp;rsquo;s a quick summary of the topics you will learn.
Serverless Computing Basics HTTP and ExpressJS Event-driven Background Functions Firestore Functions Storage Buckets and the Functions Filesystem Working with Google APIs Callable Functions and Authentication Working with 3rd party APIs like Twilio to send SMS Text messages By the end of this course you will have the foundation necessary to build virtually any Back-End feature into your Firebase app.</description>
    </item>
    
    <item>
      <title>Setup Nest on Cloud Functions</title>
      <link>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</link>
      <pubDate>Mon, 12 Aug 2019 10:26:16 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</guid>
      <description>The following snippet demonstrates two different techniques for setting up NestJS on Firebase Cloud Functions.
Option A - Point a Function to Nest The first setup modifies the functions configuration to use the Nest /dist output, as opposed to the default functions directory. This option is ideal if you have an existing Nest app.
Step 1 - Create Nest App command line nest generate app server Step 2 - Add Functions Add functions, then delete the automatically generated directory.</description>
    </item>
    
    <item>
      <title>Build a Chatbot With Dialogflow</title>
      <link>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</link>
      <pubDate>Mon, 12 Aug 2019 09:45:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</guid>
      <description>Chatbots make it possible for the average developer to deliver excellent (and affordable) customer service at scale - Building conversational experiences has never been easier thanks to the Dialogflow conversation platform.
Dialogflow is a free tool on Google Cloud for creating voice and text conversational interfaces. It uses Natural Language Processing NLP technology, allowing you to create experiences similar to Google Assistant or Amazon Alexa. In following lesson creates a chatbot from scratch in the three main steps:</description>
    </item>
    
    <item>
      <title>MySQL on Cloud Functions</title>
      <link>https://fireship.io/lessons/sql-firebase-typeorm/</link>
      <pubDate>Tue, 06 Aug 2019 12:31:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sql-firebase-typeorm/</guid>
      <description>Firebase&amp;rsquo;s NoSQL databases are excellent for flexibility and scale, but there are times when a traditional relational SQL database is a better tool for the job (or you may not have a choice with a legacy system). Does that mean you should ditch the Firebase platform altogether? Of course not! In fact, connecting a Cloud SQL instance to Firebase Cloud Functions is one of the easiest ways to hook up a database to a web or mobile app.</description>
    </item>
    
    <item>
      <title>Modern Web Scraping Guide</title>
      <link>https://fireship.io/lessons/web-scraping-guide/</link>
      <pubDate>Wed, 17 Jul 2019 13:01:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web-scraping-guide/</guid>
      <description>In a perfect world, every website provides free access to data with an easy-to-use API&amp;hellip; but the world is far from perfect. However, it is possible to use web scraping techniques to manually extract data from websites by brute force. The following lesson examines two different types of web scrapers and implements them with NodeJS and Firebase Cloud Functions.
Initial Setup Let&amp;rsquo;s start by initializing Firebase Cloud Functions with JavaScript.</description>
    </item>
    
    <item>
      <title>SendGrid Transactional Email Guide</title>
      <link>https://fireship.io/lessons/sendgrid-transactional-email-guide/</link>
      <pubDate>Fri, 05 Jul 2019 10:26:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sendgrid-transactional-email-guide/</guid>
      <description>Transactional email is the art of communicating with users in response to events or conditions, and is an important consideration for the overall user experience (UX) of an app. One of the most popular email APIs is SendGrid (recetly acquired by Twilio). It is flexible, provides a NodeJS SDK, and starts with free tier for small projects. The following lesson will teach you how to send email from your app based on user-driven events with Firebase Cloud Functions.</description>
    </item>
    
    <item>
      <title>FCM Push Notifications for Flutter</title>
      <link>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</link>
      <pubDate>Tue, 11 Jun 2019 06:37:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</guid>
      <description>When used correctly, push notifications can be an excellent way to drive user engagement and keep your app in focus on a consistent basis. When used incorrectly, they can be annoying and motivate users to simply uninstall your app and never look back. Fortunately, Firebase Cloud Messaging (FCM) provides a sophisticated set of tools to send notifications only to users who actually want them. The following lesson will teach you how to configure FCM in Flutter to broadcast both Topic-based, Device-based, and Segment-based push notifications.</description>
    </item>
    
    <item>
      <title>Dynamic Scheduled Background Jobs in Firebase</title>
      <link>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</link>
      <pubDate>Sat, 20 Apr 2019 07:44:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</guid>
      <description>Last week, Firebase announced a new scheduled cron trigger for Cloud Functions that makes it easy to run serverless code on a set time interval. This function type is special because it combines the powers of Cloud Scheduler and Pub/Sub to guarantee security that you don&amp;rsquo;t have with a regular HTTP-triggered function.
Scheduling a function on a static time interval is straight forward, but what if you want to build a dynamic task queue where users can schedule their own background jobs?</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>ML Engine Tutorial with Python</title>
      <link>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</link>
      <pubDate>Mon, 01 Oct 2018 18:03:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/serverless-machine-learning-with-python-and-firebase-cloud-functions/</guid>
      <description>Building a predictive model is only half the battle when it comes to machine learning - you also need a way for clientside apps to consume it and add value to the user experience. Today we&amp;rsquo;re going to wire up a collection of Google Cloud services to train and deploy a Python-based ML model to the cloud. The following lesson is designed for product-minded developers who want to get an idea of the end-to-end ML process in the cloud.</description>
    </item>
    
    <item>
      <title>Image Thumbnail Resizer Cloud Function</title>
      <link>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</link>
      <pubDate>Thu, 09 Aug 2018 15:06:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</guid>
      <description>The single most common Cloud Function use-case for a storage bucket is to resize images to thumbnails in the background. I&amp;rsquo;ve built quite a few of these functions and have developed some techniques to make the process more developer-friendly and performant. The following lesson demonstrates how to resize a Cloud Storage upload to a set of thumbnails using Cloud Functions v2.x.
Thumbnails resized by a Firebase Cloud Function
Initial Setup Want to master the fundamentals of serverless?</description>
    </item>
    
    <item>
      <title>Metered Stripe Subscription Billing</title>
      <link>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</link>
      <pubDate>Sat, 14 Jul 2018 14:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/saas-metered-subscriptions-with-stripe-billing-and-firebase/</guid>
      <description>💰 Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Today we will something very ambitious - our own Software-as-a-Service (SaaS) product that bills users based on metered usage. The app is a hypothetical project management tool with a pay-as-you-go billing system based on the volume of usage (just like the Blaze plan in Firebase). A user can create multiple projects, each at a cost of $1.</description>
    </item>
    
    <item>
      <title>Test Firebase Cloud Functions with Jest</title>
      <link>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</link>
      <pubDate>Wed, 23 May 2018 14:25:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</guid>
      <description>Firebase Cloud Functions makes building a serverless backend easy and fun, but the proper way to write unit tests in this environment is not exactly clear. In this episode, I will show you how to setup a testing environment for your functions and use Jest to implement unit tests.
Jest is my preferred testing framework for Cloud Functions, but the official docs use Mocha, Sinon, and Chai. Either approach works.</description>
    </item>
    
    <item>
      <title>Extract Text from Images</title>
      <link>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</link>
      <pubDate>Fri, 02 Feb 2018 15:08:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>CSV Exports from Firestore</title>
      <link>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</link>
      <pubDate>Tue, 14 Nov 2017 12:13:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</guid>
      <description>A common business requirement for a professional app is to export data as comma separated values, or CSV format. Data formatted this way can be used by spreadsheet software like Microsoft Excel and Google Docs, but it can also be used as input to many popular machine learning libraries. It this lesson, I will show you how to export a Firestore collection in CSV format using Firebase Cloud Functions and a Storage Bucket.</description>
    </item>
    
    <item>
      <title>Middleware for Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</link>
      <pubDate>Wed, 08 Nov 2017 11:57:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</guid>
      <description>In Angular SEO Part 1, I introduced the awesomeness of Headless Chrome and Rendertron. The only thing missing is the middleware that can determine if incoming traffic is a bot or a regular user. Rendertron has officially supported Express middleware or you can create your own from scratch using Firebase Cloud Functions. As you will see, it&amp;rsquo;s not all that difficult.
This method works really well with Firebase and here&amp;rsquo;s why&amp;hellip;</description>
    </item>
    
    <item>
      <title>Cloud Functions Data Aggregation</title>
      <link>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</link>
      <pubDate>Sun, 29 Oct 2017 11:27:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</guid>
      <description>The following lesson demonstrates how to make Firestore queries faster and more cost-effective by aggregating data from a subcollection to its parent. Aggregation is simply the process of totaling up a bunch of documents and calculating combined or cumulative information about them.
A Firebase Cloud Function configured with a Firestore database trigger makes it possible to perform this task automatically whenever a document changes. This demo simulates the relationship between blog posts and a subcollection of comments.</description>
    </item>
    
    <item>
      <title>Text Translator With Firebase Cloud Functions Onwrite and Angular</title>
      <link>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</link>
      <pubDate>Sun, 25 Jun 2017 15:17:21 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</guid>
      <description>⚠️ This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
In this lesson, we are going to use Firebase Cloud Functions to run code in the background when new data is created in a specific part of the database, using the onWrite event handler. This will allow us to abstract CPU or memory intensive tasks outside of the frontend Angular app.</description>
    </item>
    
  </channel>
</rss>
