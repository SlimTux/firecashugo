<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>advanced on Fireship</title>
    <link>https://fireship.io/tags/advanced/</link>
    <description>Recent content in advanced on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 May 2019 13:59:08 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter Provider with Firebase</title>
      <link>https://fireship.io/lessons/advanced-flutter-firebase/</link>
      <pubDate>Sat, 11 May 2019 13:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-flutter-firebase/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
  </channel>
</rss>
