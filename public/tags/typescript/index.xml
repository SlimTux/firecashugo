<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Fireship</title>
    <link>https://fireship.io/tags/typescript/</link>
    <description>Recent content in TypeScript on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2022 14:42:50 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Deno Quickstart</title>
      <link>https://fireship.io/courses/javascript/deno-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/deno-basics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Setup Node with TypeScript</title>
      <link>https://fireship.io/lessons/typescript-nodejs-setup/</link>
      <pubDate>Sat, 26 Nov 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-nodejs-setup/</guid>
      <description>The following lesson demonstrates how to setup a Node.js (v18)project with TypeScript when using ES Modules. TS version 4.7 introduced a new NodeNext compliler option that can translate ES Modules to CommonJS modules. It simplifies the setup process for Node.js projects, but there are important caveats to be aware of.
More about ES Modules in TS from the TypeScript docs.
Setup Package.json Module Type npm init -y npm install -D typescript @types/node Update the package.</description>
    </item>
    
    <item>
      <title>10 Design Patterns in TypeScript</title>
      <link>https://fireship.io/lessons/typescript-design-patterns/</link>
      <pubDate>Sun, 13 Mar 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-design-patterns/</guid>
      <description>Design patterns is a highly influential book published in 1994 by four computer scientists called the Gang of Four. It was originally aimed at C++ developers, but has since become a book for anyone interested in object-oriented software design.
In the following lesson, we will look at 10 different patterns from this book with simplified modern examples in TypeScript. For additional patterns and examples, check out Refactoring Guru.
Creational Creational patterns are related to the creation of new objects.</description>
    </item>
    
    <item>
      <title>Graphql Basics Tutorial</title>
      <link>https://fireship.io/lessons/graphql-basics-tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 09:38:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/graphql-basics-tutorial/</guid>
      <description>GraphQL has been one of the fastest growing web technologies over the past few years. This lesson covers the basics of GraphQL and demonstrates how to build an Angular app that fetches data with Apollo via the public SpaceX API.
üôè Special thanks to Arjun for producing the code for this demo! Head over to github for the Full Lesson and give it a ‚≠ê.</description>
    </item>
    
    <item>
      <title>Setup Nest on Cloud Functions</title>
      <link>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</link>
      <pubDate>Mon, 12 Aug 2019 10:26:16 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</guid>
      <description>The following snippet demonstrates two different techniques for setting up NestJS on Firebase Cloud Functions.
Option A - Point a Function to Nest The first setup modifies the functions configuration to use the Nest /dist output, as opposed to the default functions directory. This option is ideal if you have an existing Nest app.
Step 1 - Create Nest App command line nest generate app server Step 2 - Add Functions Add functions, then delete the automatically generated directory.</description>
    </item>
    
    <item>
      <title>MySQL on Cloud Functions</title>
      <link>https://fireship.io/lessons/sql-firebase-typeorm/</link>
      <pubDate>Tue, 06 Aug 2019 12:31:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sql-firebase-typeorm/</guid>
      <description>Firebase&amp;rsquo;s NoSQL databases are excellent for flexibility and scale, but there are times when a traditional relational SQL database is a better tool for the job (or you may not have a choice with a legacy system). Does that mean you should ditch the Firebase platform altogether? Of course not! In fact, connecting a Cloud SQL instance to Firebase Cloud Functions is one of the easiest ways to hook up a database to a web or mobile app.</description>
    </item>
    
    <item>
      <title>TypeScript Decorators by Example</title>
      <link>https://fireship.io/lessons/ts-decorators-by-example/</link>
      <pubDate>Sun, 03 Feb 2019 09:39:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ts-decorators-by-example/</guid>
      <description>One of coolest, yet least approachable features in TypeScript is the Decorator. We see Decorators implemented by the Angular Framework for classes like @Component, properties like @ViewChild, and methods like @HostListener, but have you ever considered building your own from scratch? They seem magical üçÑ in practice, but they are just JavaScript functions that allow us to annotate our code or hook into its behavior - this is known as Metaprogramming.</description>
    </item>
    
    <item>
      <title>Flutter for JavaScript Developers</title>
      <link>https://fireship.io/lessons/flutter-for-js-developers/</link>
      <pubDate>Sun, 20 Jan 2019 12:28:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-for-js-developers/</guid>
      <description>So you&amp;rsquo;re a web developer working with JavaScript and curious about Flutter? That was me about one-year ago, and at the time, learning an uncommon language like Dart seemed ridiculous because there are existing hybrid app frameworks in JS. Then I tried it&amp;hellip; To my surprise, I was able to write productive code right out of the gate. The following lesson will compare Dart/Flutter to JS/ReactNative.
Source: FlutterDev subreddit
Throughout this lesson, you will see the üëâ emoji.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming with Typescript</title>
      <link>https://fireship.io/lessons/object-oriented-programming-with-typescript/</link>
      <pubDate>Mon, 10 Dec 2018 15:34:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/object-oriented-programming-with-typescript/</guid>
      <description>OOP is usually defined by its two core concepts: Polymorphism and Inheritance. Although both concepts are related, they are not the same.
In this article, we‚Äôll take a simple approach to Inheritance, as it‚Äôs the most representative of the two.
But instead of getting bored with theory and definition, let‚Äôs take a look at a real life example, that illustrates perfectly the advantages of Inheritance.
Like all apps, our example web app needs, at some point, to persist some data to a database.</description>
    </item>
    
    <item>
      <title>How to Share Code between JavaScript Apps</title>
      <link>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</link>
      <pubDate>Tue, 04 Sep 2018 17:48:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</guid>
      <description>The right project structure for your app depends primarily on (1) its complexity, and (2) the size of your team. In this lesson, I will show you how to use NPM packages to share code in a big JavaScript project that contains multiple apps.
Monorepos versus Multiple Repos There are two high-level strategies for handling source control in a large complex web application - monorepo and multiple repos. Some developers have very strong preferences for one or the other, but it mostly just boils down to a series of tradeoffs.</description>
    </item>
    
    <item>
      <title>Test Firebase Cloud Functions with Jest</title>
      <link>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</link>
      <pubDate>Wed, 23 May 2018 14:25:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</guid>
      <description>Firebase Cloud Functions makes building a serverless backend easy and fun, but the proper way to write unit tests in this environment is not exactly clear. In this episode, I will show you how to setup a testing environment for your functions and use Jest to implement unit tests.
Jest is my preferred testing framework for Cloud Functions, but the official docs use Mocha, Sinon, and Chai. Either approach works.</description>
    </item>
    
    <item>
      <title>Typeahead Autocomplete with Firestore</title>
      <link>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</link>
      <pubDate>Tue, 20 Feb 2018 14:40:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</guid>
      <description>In this lesson, we will build a basic typeahead or autocomplete system using nothing but Firestore. It relies on an object/map data structure that exposes some of the more advanced query patterns available to us. The database contains a collection of movie documents, and our goal is to build a search form that will auto-populate results based on the movie&amp;rsquo;s title.
Typeahead demo using only Firestore
Method 1: Offset with the Magic uf8ff Character A few months ago I created a RealtimeDB Autocomplete lesson that uses &#39;\uf8ff&#39;, which is a very high Unicode point.</description>
    </item>
    
  </channel>
</rss>
