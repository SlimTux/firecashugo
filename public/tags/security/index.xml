<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Fireship</title>
    <link>https://fireship.io/tags/security/</link>
    <description>Recent content in security on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Dec 2020 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firebase Security Course</title>
      <link>https://fireship.io/courses/firebase-security/</link>
      <pubDate>Wed, 02 Dec 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/</guid>
      <description>Firebase Security - The Full Course will teach you how to write, organize, and test Firestore security rules. The goal is to prepare developers for the safe and secure launch of a Firebase project.
üõ°Ô∏è What will I Learn? Firestore security fundamentals. How to audit a Firebase app for security vulnerabilities. Common use-cases including role-based auth, access-control lists, and more. Advanced techniques and code optimization tips Unit testing and debugging reports ü§î Is this Course Right for Me?</description>
    </item>
    
    <item>
      <title>Authenticate a Firebase User on the Server</title>
      <link>https://fireship.io/snippets/express-middleware-auth-token-firebase/</link>
      <pubDate>Fri, 22 May 2020 05:56:37 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/express-middleware-auth-token-firebase/</guid>
      <description>The following snippet demonstrates how to setup server-side authentication in Firebase on any node server using Express.js.
Note. If using Firebase Cloud Functions, you can use Callable Functions to automatically handle this type of authentication.
Client-side: Include the ID Token Your client-side code must attach the ID token to the authorization header when making a request to the server. The example below uses the browser&amp;rsquo;s built in fetch API.
file_type_js frontend-app.</description>
    </item>
    
    <item>
      <title>Top 7 Security Concepts for Web Developers</title>
      <link>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</link>
      <pubDate>Thu, 13 Feb 2020 09:37:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/7-security-concepts-hacks-web-developers/</guid>
      <description>Cloud providers and web application frameworks go to great lengths to protect you from writing insecure code. The Cloud provides secure defaults and monitoring for your infrastructure, while Angular and React automatically sanitize HTML to prevent the injection of malicious JavaScript. Despite these safeguards, no application is 100%, secure and clever new exploits will be discovered. The following lesson explains some of the most common hacking techniques and how to secure your app against them.</description>
    </item>
    
    <item>
      <title>Firestore Rate Limiting</title>
      <link>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</link>
      <pubDate>Sat, 30 Nov 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</guid>
      <description>Rate limiting is the process of blocking access to cloud resources after a certain threshold has been reached. Firestore bills based on the quantity of reads and writes, but does not currently provide a way to block IPs or set explicit rate limits with Security Rules. So how do you prevent a DDoS attack or a disgruntled user from spamming the app with unnecessary records.
The following examples are based on an app that needs to&amp;hellip;</description>
    </item>
    
    <item>
      <title>Testing Firestore Security Rules With the Emulator</title>
      <link>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</link>
      <pubDate>Wed, 31 Oct 2018 18:20:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</guid>
      <description>üî• Deep dive with the Firestore Security Rules Master Course.
The most exciting announcement (in my opinion) at Firebase Summit 2018 was the local emulator for Firestore and RTDB, making it possible to test security rules locally or on a CI server. If you&amp;rsquo;re brand new to Firebase security, make sure to watch the Firestore Security Rules Guide.
Project Setup The following lesson creates an isolated testing environment solely for testing rules logic.</description>
    </item>
    
    <item>
      <title>Secure Firebase Cloud Functions for Authenticated Users</title>
      <link>https://fireship.io/lessons/secure-firebase-cloud-functions/</link>
      <pubDate>Wed, 27 Sep 2017 07:08:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secure-firebase-cloud-functions/</guid>
      <description>Learn more in the Cloud Functions Master Course.
In this lesson, I will show you how to run Firebase Cloud Functions ONLY when users are authenticated with a valid user ID.
Endpoint security is critical - especially if using a paid 3rd party API like SendGrid or Twilio. There are certain situations where only want a function to run if the user is currently authenticated. For example, you may have a function that sends transactional email to a user via SendGrid.</description>
    </item>
    
  </channel>
</rss>
