<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rxdart on Fireship</title>
    <link>https://fireship.io/tags/rxdart/</link>
    <description>Recent content in rxdart on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Mar 2019 15:19:53 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/rxdart/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter State Management Guide</title>
      <link>https://fireship.io/lessons/flutter-state-management-guide/</link>
      <pubDate>Fri, 08 Mar 2019 15:19:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-state-management-guide/</guid>
      <description>State management is a hot-button topic that brings out strong opinions in developers, and in extreme cases results in Twitter fights. In my experience, people tend to over-engineer features that would otherwise be straight-forward because they assume a full-blown state management library is necessary. In some cases, they just add complexity, but in others, they can be extremely valuable. My recommendation is to analyze these strategies closely and choose an approach that feels right for your app&amp;rsquo;s requirements and your team&amp;rsquo;s style.</description>
    </item>
    
  </channel>
</rss>
