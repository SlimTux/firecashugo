<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Firebase on Fireship</title>
    <link>https://fireship.io/tags/firebase/</link>
    <description>Recent content in Firebase on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2022 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/tags/firebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Next.js Firebase Full Course</title>
      <link>https://fireship.io/courses/react-next-firebase/</link>
      <pubDate>Sun, 11 Sep 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/</guid>
      <description>Next.js Firebase - The Full Course takes you from zero to a production-ready hybrid-rendered webapp. Learn how to build a high-performance React app that features realtime data from Firebase and multiple server-side rendering paradigms with Next.js
ü¶Ñ What will I build? You will build a full-stack Social Blogging Platform inspired by sites like üåà DEV.to and Medium. Authors can create content under a custom username, then publish publicly with SEO-friendly rendering, while readers can heart or like posts in realtime.</description>
    </item>
    
    <item>
      <title>Flutter Firebase</title>
      <link>https://fireship.io/courses/flutter-firebase/</link>
      <pubDate>Fri, 15 Jul 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/</guid>
      <description>Flutter Firebase - The Full Course will take you from zero to a complex production-ready iOS or Android app using real-world cloud infrastructure.
‚ö° What will I build? Updated Sep 15th, 2022 Flutter v3.1
This is a project-based course that will teach you how to build a multiple choice quiz app, inspired by apps like Duolingo and QuizUp. The app implements user authentication (Sign in with Google or Apple), tracks quiz progress in Firestore, uses dynamic animations, and shares data between screens.</description>
    </item>
    
    <item>
      <title>Realtime SSR with Nuxt3 and Firebase</title>
      <link>https://fireship.io/lessons/nuxt-3-firebase/</link>
      <pubDate>Thu, 28 Apr 2022 12:14:10 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/nuxt-3-firebase/</guid>
      <description>Nuxt3 hit release candidate recently with a variety of awesome new features. But you might be wondering&amp;hellip; how do I use Nuxt3 with Firebase? There is no documented best practice as of today, so I put together a demo that is capable of server-side rendering (SSR) via Firestore, followed by hydration to secure realtime data on the client. This gives a website the benefits SEO-friendly HTML, without sacrificing the power the realtime data updates after the initial page load.</description>
    </item>
    
    <item>
      <title>React - The full course</title>
      <link>https://fireship.io/courses/react/</link>
      <pubDate>Tue, 22 Feb 2022 11:11:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react/</guid>
      <description>React - The Full Course is unlike any other React course on the Internet. It provides a fast-paced introduction to essential concepts, then puts them into practice by building multiple fun and challenging full-stack apps from scratch.
What will I learn? üë®‚Äçüé§ Everything you need to be productive with React ‚ö° Breakdown of key concepts in 100 Seconds üìö Design patterns and best practices üé£ Component composition and custom hooks üöÄ Lazy loading with Suspense üì± How to build Progressive Web Apps (PWAs) üé® Animation with Framer Motion üêï Advanced data fetching with SWR and React Query ‚öõÔ∏è Complex dynamic forms with React Final Form üî• Manage realtime data with Firestore üì∞ SSR with Next.</description>
    </item>
    
    <item>
      <title>Twitter Bot Tutorial</title>
      <link>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</link>
      <pubDate>Thu, 03 Feb 2022 09:09:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-bot-oauth2-tutorial/</guid>
      <description>Full tutorial under development&amp;hellip;</description>
    </item>
    
    <item>
      <title>Riverpod with Firebase</title>
      <link>https://fireship.io/lessons/firebase-riverpod-flutter/</link>
      <pubDate>Sat, 27 Nov 2021 13:45:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-riverpod-flutter/</guid>
      <description>Riverpod is a reactive state-management library for Flutter that can simplify the way global data is shared throughout your application. It is especially useful with Firebase because it allows to you easily join Streams together, like a Firestore document with a Firebase Auth user.
The following tutorial demonstrates how to use Riverpod to manage Firebase Auth state and relational realtime data in Firestore.
Learning Objectives
Riverpod Basics w/ Firebase Listen to the current user&amp;rsquo;s auth state Join realtime Firestore data based on current user&amp;rsquo;s UID Setup This tutorial assumes you have already installed Firebase into your app.</description>
    </item>
    
    <item>
      <title>React Native Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/react-native-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 13:18:57 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-native-firebase-chat-demo/</guid>
      <description>React Native is one of the most productive ways to build a cross-platform mobile app, especially for developers with a background in JavaScript. It has provides excellent support for Firebase with the React Native Firebase package
In the following lesson, we will build a basic chat app with React Native and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/flutter-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-chat-demo/</guid>
      <description>Flutter makes it possible to build high-performance cross-platform apps with sound type safety thanks to the Dart programming language. It provides excellent support for Firebase with official plugins maintained by Google.
In the following lesson, we will build a basic chat app with Flutter and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>Realtime Charts with D3</title>
      <link>https://fireship.io/lessons/realtime-charts-d3-firebase/</link>
      <pubDate>Mon, 20 Sep 2021 10:31:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-charts-d3-firebase/</guid>
      <description>D3.js, or Data Driven Documents, is a powerful tool for building charts with JavaScript, CSS, and SVG. It&amp;rsquo;s a library that takes data as an input outputs dynamic, interactive, and beautiful visualizations. In this tutorial, we&amp;rsquo;ll build an animated realtime chart that changes its appearance when a new data point is added to Firestore.
Example of the realtime chart you will build in this tutorial
Project Setup Install D3 &amp;amp; Firebase Create a new project with Vite, then install D3 and Firebase.</description>
    </item>
    
    <item>
      <title>Firebase v9 Migration</title>
      <link>https://fireship.io/lessons/firebase-v9-migration/</link>
      <pubDate>Thu, 02 Sep 2021 12:10:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-v9-migration/</guid>
      <description>The Firebase team recently released a new web SDK that utilizes tree-shaking in order to lower JavaScript bundle sizes when used with module bundlers like Webpack and Rollup. At a high level, it works by only importing the functions/classes/code that we actually NEED, versus importing entire modules like auth, firestore, and so on. The Fireship site was able to reduce its JavaScript bundle size by ~35% ü§Ø by upgrading to the new version.</description>
    </item>
    
    <item>
      <title>WebRTC Video Chat on Firebase</title>
      <link>https://fireship.io/lessons/webrtc-firebase-video-chat/</link>
      <pubDate>Tue, 02 Mar 2021 15:10:46 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/webrtc-firebase-video-chat/</guid>
      <description>WebRTC facilities realtime audio/video communication on the web using a peer-to-peer protocol, allowing you to build apps like Zoom, Skype, etc.
The following lesson builds a 1-to-1 video chat, where each peer streams directly to the other peer - there is no need for a middle-man server to handle video content. However, a 3rd party server is required for signaling that stores shared data for stream negotiation. Firestore is an excellent choice for WebRTC because it is easy to listen to updates to the database in realtime.</description>
    </item>
    
    <item>
      <title>Invite-Only Firebase Phone Auth</title>
      <link>https://fireship.io/lessons/invite-only-firebase-phone-auth/</link>
      <pubDate>Wed, 24 Feb 2021 15:42:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/invite-only-firebase-phone-auth/</guid>
      <description>The meteoric rise of Clubhouse from a mostly unknown app to 10M weekly users demonstrates the power of #FOMO - fear of missing out. No, you can&amp;rsquo;t just download the app and start having fun. It uses an invite-only authentication system that requires a current user to invite you to the club with your phone number. Once you&amp;rsquo;re in, you&amp;rsquo;re granted two invites to send to your friends, creating a pyramid of organic user growth.</description>
    </item>
    
    <item>
      <title>Custom Usernames in Firebase</title>
      <link>https://fireship.io/lessons/custom-usernames-firebase/</link>
      <pubDate>Sat, 23 Jan 2021 11:51:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-firebase/</guid>
      <description>Firebase assigns each user a unique ID upon signing up, but many apps require users to choose their own custom unique username, which is not an out-of-box feature in Firebase. Think of apps like Twitter or Medium, where each user‚Äôs profile can be visited on a user like example.com/{username}. The following lesson demonstrates how to securely create and validate custom usernames for Firebase users by combining Cloud Firestore.
Demo of custom usernames in Firebase</description>
    </item>
    
    <item>
      <title>Firebase Security Course</title>
      <link>https://fireship.io/courses/firebase-security/</link>
      <pubDate>Wed, 02 Dec 2020 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/firebase-security/</guid>
      <description>Firebase Security - The Full Course will teach you how to write, organize, and test Firestore security rules. The goal is to prepare developers for the safe and secure launch of a Firebase project.
üõ°Ô∏è What will I Learn? Firestore security fundamentals. How to audit a Firebase app for security vulnerabilities. Common use-cases including role-based auth, access-control lists, and more. Advanced techniques and code optimization tips Unit testing and debugging reports ü§î Is this Course Right for Me?</description>
    </item>
    
    <item>
      <title>React Firebase Chat App</title>
      <link>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</link>
      <pubDate>Fri, 25 Sep 2020 07:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/react-firebase-chat-app-tutorial/</guid>
      <description>The following tutorial demonstrates how to build a simple group chat app with React and Firebase. The goal of this lesson is to showcase important beginner concepts when working with the ‚öõÔ∏èüî• React Firebase stack, including user authentication, firestore, and security rules.
React Firebase Chat Demo
Important Links
Live Demo Source Code React Firebase Hooks Initial Setup Firebase Project Create a free Firebase project. Make sure to enable Google SignIn and and activate Cloud Firestore.</description>
    </item>
    
    <item>
      <title>Firebase Quickstart</title>
      <link>https://fireship.io/lessons/firebase-quickstart/</link>
      <pubDate>Sun, 26 Jul 2020 08:27:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-quickstart/</guid>
      <description>Firebase makes app development faster ‚ö°, cheaper üíµ, and more enjoyable üòÄ for developers. The idea behind a Backend-as-a-Service (BaaS) is to eliminate the need to write and maintain server-side code - things like user authentication, trusted API calls, security logic, database connections, traffic scaling, and the list goes on. These requirements take time, money, and add complexity to a project. The more resources you can invest in the frontend user experience, the more likely your app is to succeed.</description>
    </item>
    
    <item>
      <title>Firebase Emulator Advanced Usage Guide</title>
      <link>https://fireship.io/lessons/firebase-emulator-advanced/</link>
      <pubDate>Sun, 31 May 2020 19:11:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-emulator-advanced/</guid>
      <description>The Firebase emulator suite allows developers to run a mock Firebase environment locally. Last week, Firebase released a new feature called the Emulator UI to visualize and manage Firestore (and Realtime DB) from the browser. The following lesson contains a variety of advanced techniques for setting up a Firebase development environment.
üå†Did you know? The new @firebase Emulator UI makes Firestore available on the browser window...
With a little bit of JS, you can extend the UI with your own custom stuff, like buttons to populate fake data.</description>
    </item>
    
    <item>
      <title>Access Google APIs for Users with OAuth 2.0</title>
      <link>https://fireship.io/lessons/google-apis-node-tutorial/</link>
      <pubDate>Sat, 23 May 2020 00:33:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-apis-node-tutorial/</guid>
      <description>How do you make APIs calls to a Google service on behalf of a user? The following lesson demonstrates how to get permission from a user with OAuth 2.0 to make authenticated requests to Google APIs from a backend Node.js server like Firebase Cloud Functions.
Examples of common use cases might include:
Upload a file to a user&amp;rsquo;s Google Drive Make an appointment on a user&amp;rsquo;s Google Calendar Access a user&amp;rsquo;s infrastructure on Google Cloud Platform üí° Note: This lesson covers server-side OAuth.</description>
    </item>
    
    <item>
      <title>Google Secret Manager with Firebase</title>
      <link>https://fireship.io/lessons/secret-manager-with-firebase/</link>
      <pubDate>Wed, 15 Apr 2020 13:08:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secret-manager-with-firebase/</guid>
      <description>Secret Manager is a new service on Google Cloud that allows us to store and version sensitive data like private API keys and passwords, then access it from any cloud service. It provides encryption, audit logging, versioning, and IAM roles for secure fine-grained control over sensitive information.
A common use-case for a Firebase apps is the management of secret API keys in a Cloud Function. The following lesson will teach you how add secrets via the Google Cloud console, then read them from a Firebase Cloud Function with Node.</description>
    </item>
    
    <item>
      <title>Multifactor Auth with Firebase (2FA)</title>
      <link>https://fireship.io/lessons/two-factor-auth-firebase/</link>
      <pubDate>Sat, 04 Apr 2020 13:49:27 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/two-factor-auth-firebase/</guid>
      <description>How do you handle two-step verification (2FA) or multifactor authentication (MFA) in Firebase? Until recently, the answer was you can&amp;rsquo;t. Thankfully, in 2020 we can implement multifactor auth flows in Firebase with Google Cloud Identity Platform. The following tutorial demonstrates an optional multifactor auth flow that works like this&amp;hellip;
Sign up with email/password and require email verification. Opt-in to MFA and register phone number(s). Attempt login from a new device. Verify SMS text code verification.</description>
    </item>
    
    <item>
      <title>Automatic Backups for Firestore via Github Actions</title>
      <link>https://fireship.io/snippets/firestore-automated-backups/</link>
      <pubDate>Thu, 12 Mar 2020 17:20:51 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-automated-backups/</guid>
      <description>As of today, Firestore does not support automatic backups, but it DOES support exports via the gcloud CLI or REST API. Although not technically a backup in database jargon, an automatic export is valuable to have for disaster recovery because it can be re-imported to replace lost data.
The following snippet exports all Firestore data automatically every day at midnight using a scheduled Github Action.
Generate a Service Key on GCP We need a service account to grant Github Actions permission to run the export command via the Google Cloud CLI.</description>
    </item>
    
    <item>
      <title>Delete a Firestore Collection</title>
      <link>https://fireship.io/snippets/delete-firestore-collection/</link>
      <pubDate>Tue, 11 Feb 2020 14:29:28 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/delete-firestore-collection/</guid>
      <description>Deleting an entire collection from Firestore should be handled on a backend server. Collections can grow infinitely large, so deleting a millions of documents can be an excessively large workload to put on a clientside web or mobile app.
Option A - Use the CLI or Console You can manually delete a collection or subcollection from the Firebase Console OR by using the CLI.
command line firebase firestore:delete path-to-delete Option B - Use a Cloud Function It is possible to interact with Firebase Tools from a Cloud Function.</description>
    </item>
    
    <item>
      <title>Firestore Rate Limiting</title>
      <link>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</link>
      <pubDate>Sat, 30 Nov 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-rate-limit-writes-firestore/</guid>
      <description>Rate limiting is the process of blocking access to cloud resources after a certain threshold has been reached. Firestore bills based on the quantity of reads and writes, but does not currently provide a way to block IPs or set explicit rate limits with Security Rules. So how do you prevent a DDoS attack or a disgruntled user from spamming the app with unnecessary records.
The following examples are based on an app that needs to&amp;hellip;</description>
    </item>
    
    <item>
      <title>Firestore Pagination Guide</title>
      <link>https://fireship.io/lessons/firestore-pagination-guide/</link>
      <pubDate>Tue, 26 Nov 2019 09:17:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-pagination-guide/</guid>
      <description>Pagination is the process of dividing data into discrete pages. In Firestore, it is achieved by ordering a collection by a field, limiting it to a consistent page size, then offsetting the query. The Firebase Web SDK v7.3.0 introduced a new limitToLast(n) method that makes the process much easier. The following lesson demonstrates how to paginate Firestore data in both a forward and backward direction and discusses advanced serverside techniques.</description>
    </item>
    
    <item>
      <title>Firestore Order by Document ID or Field</title>
      <link>https://fireship.io/snippets/firestore-increment-document-id-value/</link>
      <pubDate>Mon, 18 Nov 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-document-id-value/</guid>
      <description>The follow snippet contains strategies for ordering a collections sequentially. For example, you may want a field that increases by 1 after each new document is created. Cloud Firestore does not provide automatic ordering on the auto-generated docIDs, so we need be clever to solve this problem .
Auto-ordering Techniques Timestamp Approach The easiest way to order by creation time is to use a server timestamp. This tells Firestore to add a date to the document based on Google Cloud&amp;rsquo;s backend time, so you&amp;rsquo;re not relying on the client&amp;rsquo;s clock (which is likely to be inaccurate).</description>
    </item>
    
    <item>
      <title>Top 100 Firebase Tips and Tricks</title>
      <link>https://fireship.io/lessons/firebase-tips-and-tricks/</link>
      <pubDate>Wed, 09 Oct 2019 20:31:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-tips-and-tricks/</guid>
      <description>The list below outlines the Firebase tips presented in the video.
Get Started Create a two Firebase Projects - one for development and another for live production data Link Google Analytics Limit permissions for employees, follow the Principle of Least Privilege Update contact info for GDPR Add a project and don&amp;rsquo;t worry about exposing your credentials in frontend code Upgrade to Blaze, then set a budget on GCP Generate detailed reports for billing Install the Firebase Tools CLI and GCloud.</description>
    </item>
    
    <item>
      <title>Firebase Analytics for the Web</title>
      <link>https://fireship.io/lessons/firebase-analytics-web-guide/</link>
      <pubDate>Thu, 03 Oct 2019 13:08:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-analytics-web-guide/</guid>
      <description>Firebase recently announced support for Analytics and Remote Config on the web. When combined, these services make it possible to customize the UI/UX of your app based on data collected from Google Analytics. The following lesson will show you how to collect Google Analytics events and user properties, then read aggregated data in your app to customize the experience for a specific audience.
Initial Setup Firebase Analytics was added to the JavaScript SDK in version 7.</description>
    </item>
    
    <item>
      <title>Advanced Firebase Auth with Custom Claims</title>
      <link>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</link>
      <pubDate>Mon, 23 Sep 2019 08:11:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-custom-claims-role-based-auth/</guid>
      <description>Firebase allows developers to modify authentication ID tokens to provide fine-grained system access to authorized users. The follow lesson adds custom claims to the Firebase user record to build a role-based access control feature that is secured with Firestore rules.
Set Custom Claims from the Command Line It is not possible (currently) to add custom claims from the Firebase Console. This means we need to write some code with Firebase Admin.</description>
    </item>
    
    <item>
      <title>Cloud Functions Master Course</title>
      <link>https://fireship.io/courses/cloud-functions/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/cloud-functions/</guid>
      <description>This course takes a hands-on approach to Firebase Cloud Functions where we build seven different microservices, each demonstrating a fundamental concept of the platform. Here&amp;rsquo;s a quick summary of the topics you will learn.
Serverless Computing Basics HTTP and ExpressJS Event-driven Background Functions Firestore Functions Storage Buckets and the Functions Filesystem Working with Google APIs Callable Functions and Authentication Working with 3rd party APIs like Twilio to send SMS Text messages By the end of this course you will have the foundation necessary to build virtually any Back-End feature into your Firebase app.</description>
    </item>
    
    <item>
      <title>Ionic 4 Firebase Master Course</title>
      <link>https://fireship.io/courses/ionic/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/</guid>
      <description>The Ionic4 Master Course will teach you the fundamentals of full-stack cross-platform app development, using the combined powers of Angular &amp;amp; Firebase.
üóø What will I build? This is a project-based course that starts from zero and works up to an authenticated realtime todo list with push notifications. While that may not sound super exciting, it provides an ideal foundation to showcase the UI features offered by Ionic and connent them to live cloud infrastructure.</description>
    </item>
    
    <item>
      <title>The Angular Firebase Project Course</title>
      <link>https://fireship.io/courses/angular/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/</guid>
      <description>üç± What will I build? The Angular Firebase PWA Course will teach you how to build a complex progressive web app with Angular 12 (ivy), Material Design, and Firebase. It starts from absolute basics and eventually culminates with the deployment of a server-rendered PWA on Google Cloud Run.
You will build a full-stack Kanban (ÁúãÊùø) storyboard app inspired by Trello. Authenticated users can create, sort, update, and delete boards with all interaction persisted in Firestore.</description>
    </item>
    
    <item>
      <title>MySQL on Cloud Functions</title>
      <link>https://fireship.io/lessons/sql-firebase-typeorm/</link>
      <pubDate>Tue, 06 Aug 2019 12:31:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sql-firebase-typeorm/</guid>
      <description>Firebase&amp;rsquo;s NoSQL databases are excellent for flexibility and scale, but there are times when a traditional relational SQL database is a better tool for the job (or you may not have a choice with a legacy system). Does that mean you should ditch the Firebase platform altogether? Of course not! In fact, connecting a Cloud SQL instance to Firebase Cloud Functions is one of the easiest ways to hook up a database to a web or mobile app.</description>
    </item>
    
    <item>
      <title>Flutter File Uploads</title>
      <link>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</link>
      <pubDate>Fri, 26 Jul 2019 12:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</guid>
      <description>Camera apps are one of the most popular niches in the market, with the recent viral growth of FaceApp being a prime example. There are a variety of plugins for Flutter that make camera-based features easy to develop, and when combined with Firebase the results can be easily uploaded your backend cloud infrastructure. The following lesson demonstrates the following features:
Capture images from the device camera or image gallery. Crop, rotate, and resize an image file.</description>
    </item>
    
    <item>
      <title>Modern Web Scraping Guide</title>
      <link>https://fireship.io/lessons/web-scraping-guide/</link>
      <pubDate>Wed, 17 Jul 2019 13:01:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web-scraping-guide/</guid>
      <description>In a perfect world, every website provides free access to data with an easy-to-use API&amp;hellip; but the world is far from perfect. However, it is possible to use web scraping techniques to manually extract data from websites by brute force. The following lesson examines two different types of web scrapers and implements them with NodeJS and Firebase Cloud Functions.
Initial Setup Let&amp;rsquo;s start by initializing Firebase Cloud Functions with JavaScript.</description>
    </item>
    
    <item>
      <title>SendGrid Transactional Email Guide</title>
      <link>https://fireship.io/lessons/sendgrid-transactional-email-guide/</link>
      <pubDate>Fri, 05 Jul 2019 10:26:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sendgrid-transactional-email-guide/</guid>
      <description>Transactional email is the art of communicating with users in response to events or conditions, and is an important consideration for the overall user experience (UX) of an app. One of the most popular email APIs is SendGrid (recetly acquired by Twilio). It is flexible, provides a NodeJS SDK, and starts with free tier for small projects. The following lesson will teach you how to send email from your app based on user-driven events with Firebase Cloud Functions.</description>
    </item>
    
    <item>
      <title>FCM Push Notifications for Flutter</title>
      <link>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</link>
      <pubDate>Tue, 11 Jun 2019 06:37:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</guid>
      <description>When used correctly, push notifications can be an excellent way to drive user engagement and keep your app in focus on a consistent basis. When used incorrectly, they can be annoying and motivate users to simply uninstall your app and never look back. Fortunately, Firebase Cloud Messaging (FCM) provides a sophisticated set of tools to send notifications only to users who actually want them. The following lesson will teach you how to configure FCM in Flutter to broadcast both Topic-based, Device-based, and Segment-based push notifications.</description>
    </item>
    
    <item>
      <title>Collection Group Query with Firestore</title>
      <link>https://fireship.io/lessons/collection-group-query-firestore/</link>
      <pubDate>Mon, 20 May 2019 08:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/collection-group-query-firestore/</guid>
      <description>At Google I/O 2019, Firebase launched a new query type, Collection Group Queries, which can have a major impact on your data modeling decisions. It allows you to combine all subcollections that share the same name, then query them together. Prior to this feature release, it was common to model one-to-many relationships with root collections that contained a field (or foreign key if you will) pointing to the parent document. Root collections are still fine, but this new feature makes it far more practical to organize your data in a natural hierarchy.</description>
    </item>
    
    <item>
      <title>Flutter Provider with Firebase</title>
      <link>https://fireship.io/lessons/advanced-flutter-firebase/</link>
      <pubDate>Sat, 11 May 2019 13:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-flutter-firebase/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
    <item>
      <title>Firebase Performance Quickstart</title>
      <link>https://fireship.io/lessons/firebase-performance-quickstart/</link>
      <pubDate>Thu, 09 May 2019 15:45:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-performance-quickstart/</guid>
      <description>Firebase announced Performance Monitoring for the Web at Google I/O 2019 - a long-awaited feature for Progressive Web Apps. It provides a simple way to add robust performance analytics to your app with minimal effort, while also adding the ability to run custom traces in your code. In the following lesson, you will learn how to add this new tool to any web app and setup traces to find performance bottlenecks.</description>
    </item>
    
    <item>
      <title>Svelte Realtime Todo List with Firebase</title>
      <link>https://fireship.io/lessons/svelte-v3-overview-firebase/</link>
      <pubDate>Wed, 24 Apr 2019 07:01:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/svelte-v3-overview-firebase/</guid>
      <description>Svelte 3 was announced recently and it delivers a refreshing alternative to the big three component frameworks/libraries of React, Angular, and Vue. In fact, calling it a framework/library would not be very accurate, because Svelte is actually a compiler that turns your code into Vanilla JS, meaning it does not need to ship the entire framework in the JS bundle. Its focus on simplicity really stands out and makes for a very developer-friendly JavaScript experience.</description>
    </item>
    
    <item>
      <title>Dynamic Scheduled Background Jobs in Firebase</title>
      <link>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</link>
      <pubDate>Sat, 20 Apr 2019 07:44:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/cloud-functions-scheduled-time-trigger/</guid>
      <description>Last week, Firebase announced a new scheduled cron trigger for Cloud Functions that makes it easy to run serverless code on a set time interval. This function type is special because it combines the powers of Cloud Scheduler and Pub/Sub to guarantee security that you don&amp;rsquo;t have with a regular HTTP-triggered function.
Scheduling a function on a static time interval is straight forward, but what if you want to build a dynamic task queue where users can schedule their own background jobs?</description>
    </item>
    
    <item>
      <title>Firebase Microservices With Cloud Run</title>
      <link>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</link>
      <pubDate>Tue, 09 Apr 2019 10:25:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-microservices-with-cloud-run/</guid>
      <description>Yesterday Google Cloud released a game-changing new product called Cloud Run that allows you to run and scale stateless Docker containers in a serverless execution environment powered by Knative.
Benefits
Run backend microservices with any programming language and/or dependencies. Serverless pricing, only pay for what you use. Scale automatically. Prevent cloud vendor lock-in. Some of the things you might do with it&amp;hellip;
Deploy server-rendered SSR frontend apps to Firebase Hosting, like Angular Universal, Nuxt, or Next.</description>
    </item>
    
    <item>
      <title>How to Use Firestore Increment</title>
      <link>https://fireship.io/snippets/firestore-increment-tips/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-tips/</guid>
      <description>One of the common challenges faced when working with Firestore is maintaining an accurate count of a value on a document (or multiple documents). One cannot simply update a counter and expect it to be accurate because many clients might be competing to update the same value simultaneously. The solution to this problem has traditionally been to deploy a Cloud Function that runs the update in a transaction to guarantee an atomic update.</description>
    </item>
    
    <item>
      <title>Flutter Firestore Animated SlideShow</title>
      <link>https://fireship.io/lessons/flutter-slider-like-reflectly/</link>
      <pubDate>Wed, 20 Mar 2019 10:18:59 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-slider-like-reflectly/</guid>
      <description>One of the best examples of a well-designed UI in Flutter is Reflectly - an AI-powered journal app for iOS and Android. The following lesson will show you how to build an animated slideshow carousel inspired by the work of Reflectly. In addition, we will wire it up to Firestore to make it filterable and able to scale to an infinite number of pages.
PageView Widget Intro The most import widget in this lesson is the PageView, which makes it possible to easily build sliding pages.</description>
    </item>
    
    <item>
      <title>Stripe Elements and Checkout with Angular</title>
      <link>https://fireship.io/lessons/stripe-elements-angular/</link>
      <pubDate>Mon, 04 Mar 2019 08:48:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-elements-angular/</guid>
      <description>üí∞ Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Stripe provides several JavaScript libraries - Stripe Elements &amp;amp; Checkout - that makes it easy to collect and validate payment sources like credit cards, bank accounts, and more. The following lesson will show you how to integrate Stripe&amp;rsquo;s clientside JS packages into an Angular application.
Step 0. Prerequisites This lesson only covers the frontend code.</description>
    </item>
    
    <item>
      <title>GitHub Action deploying Angular App to Firebase Hosting</title>
      <link>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</link>
      <pubDate>Tue, 19 Feb 2019 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</guid>
      <description>This snippet helps you to setup GitHub Actions in your Angular project to build and deploy your app to Firebase on git push.
Step 1. Actions In your repository click on Actions.
Step 2. New Workflow To create your first workflow click on Set up a workflow yourself
Your first GitHub action looks like this:
main.yml name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Run a one-line script run: echo Hello, world!</description>
    </item>
    
    <item>
      <title>Upload Multiple Files to Firebase Storage with Angular</title>
      <link>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</link>
      <pubDate>Mon, 18 Feb 2019 13:45:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</guid>
      <description>Firebase makes it easy to upload a huge payload of raw files a cloud storage bucket. The following lesson will teach you how to upload files to Firebase Storage with Angular, including several advanced concepts about how to&amp;hellip;
Handle multiple simultaneous concurrent file uploads. Save the resulting download URL to Firestore. Display a progress bar and provide UI controls to pause, cancel, and resume uploads. This post first appeared as Episode 82 on AngularFirebase.</description>
    </item>
    
    <item>
      <title>Flutter Realtime Geolocation Firebase</title>
      <link>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</link>
      <pubDate>Wed, 13 Feb 2019 06:22:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</guid>
      <description>Looking to build a realtime geolocation app like Lyft, Postmates, or Waze? It is easier than you might think when you combine the power of Flutter, Google Maps, and Firebase. The following lesson will show you how use Google Maps in Flutter, then listen to a realtime feed of geolocation data in Firestore queried by its distance from a centerpoint - made possible by the GeoFlutterFire package.
Special thanks to Darshan Gowda for creating the GeoFlutterFire library and providing the example code for this lesson.</description>
    </item>
    
    <item>
      <title>Working with Firestore Arrays</title>
      <link>https://fireship.io/lessons/firestore-array-queries-guide/</link>
      <pubDate>Tue, 12 Feb 2019 14:46:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-array-queries-guide/</guid>
      <description>Have you ever wanted to make a query to Firestore for all documents with an array containing a certain value? Array queries are possible as of Firebase JS SDK v5.3.0. In addition, the SDK also added support for the atomic addition and removal of elements on an array field.
Firestore Arrays Queries Firebase introduced an array-contains operator that can be used with where to query array fields. It will return all documents that contain a the provided value in the array.</description>
    </item>
    
    <item>
      <title>Realtime Presence with Angular &#43; Firebase</title>
      <link>https://fireship.io/lessons/realtime-presence-angular-firebase/</link>
      <pubDate>Sun, 27 Jan 2019 14:04:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-presence-angular-firebase/</guid>
      <description>Social media and chat apps (think Slack, Facebook Messenger, etc) often have presence detection systems that can indicate if your friends are online, offline, or away. Traditionally, features like this have been challenging because you need manage state between the client &amp;amp; server, but the Firebase RealtimeDB makes it easy. The following lesson will show you how to build a realtime user presence system with Angular and Firebase.
The browser on the left shows the actual user activity, while the browser on the right is just a neutral observer of the presence changes</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Google SignIn &#43; Firestore</title>
      <link>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</link>
      <pubDate>Mon, 14 Jan 2019 07:43:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</guid>
      <description>The following lesson will show you how to implement Google SignIn with Flutter and Firebase, then update a custom user profile in Firestore. We will demonstrate several key concepts related to building reactive UIs with realtime streaming data, including
Global Streams and Observables with RxDart StatefulWidget StreamBuilder Step 0: Prerequisites Install FlutterFire Step 1: Build Out the UI First, let&amp;rsquo;s start with a basic UI. Notice we have placeholders for LoginButton() and UserProfile() - these will be created later in the lesson.</description>
    </item>
    
    <item>
      <title>Firestore Security Rules Cookbook</title>
      <link>https://fireship.io/snippets/firestore-rules-recipes/</link>
      <pubDate>Wed, 02 Jan 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-rules-recipes/</guid>
      <description>The purpose of this reference is to demonstrate common Firestore security rules patterns. Many of the rules below are extracted into functions to maximize code reuse.
Basic Recipes Let&amp;rsquo;s start with some common Firestore security use cases needed by almost every app.
At runtime, Firebase rules look for the first valid allow == true rule and NOT vice-versa. This is very important to keep in mind, as you might think you secured a path, only for it to be allowed somewhere else.</description>
    </item>
    
    <item>
      <title>Google OAuth with @angular/fire</title>
      <link>https://fireship.io/lessons/angularfire-google-oauth/</link>
      <pubDate>Sat, 29 Dec 2018 06:51:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angularfire-google-oauth/</guid>
      <description>A solid user authentication system is the bedrock of most web applications. In fact, when starting a new project I genernally focus on user auth first because so many other features depend the user&amp;rsquo;s auth state. The following lesson will show you how to build an OAuth authentication feature using the Google sign-in method. In addition, we will save custom user data to the Firestore database, making it possible to customize a user&amp;rsquo;s profile and/or query all users.</description>
    </item>
    
    <item>
      <title>Group Chat with Firestore</title>
      <link>https://fireship.io/lessons/build-group-chat-with-firestore/</link>
      <pubDate>Sun, 14 Oct 2018 18:11:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-group-chat-with-firestore/</guid>
      <description>One of the most compelling reasons to choose Firebase as your backend is to meet the demands of complex realtime features, like group chat. Managing state between multiple clients in realtime is a major undertaking, but with Firebase it becomes almost trivial. The following lesson will teach you how to build a simple group chat app with Cloud Firestore.
This lesson is accompanied by a real demo! Give Firestore Mega Chat a whirl.</description>
    </item>
    
    <item>
      <title>Using the Google Calendar API</title>
      <link>https://fireship.io/lessons/google-calendar-api-with-firebase/</link>
      <pubDate>Mon, 24 Sep 2018 17:55:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-calendar-api-with-firebase/</guid>
      <description>I use Google Calendar almost every day and really appreciate apps that can coordinate important events for me automatically. Today, we&amp;rsquo;ll learn how to integrate Google&amp;rsquo;s JavaScript API client with Firebase to make authenticated requests to the Calendar API on the behalf of a user. This article was inspired by the real-world requirements of a Broadway Life, a tour company in NYC and needs to perform full CRUD operations on their clients&amp;rsquo; calendar.</description>
    </item>
    
    <item>
      <title>Deploy Multiple Sites to Firebase Hosting</title>
      <link>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</link>
      <pubDate>Wed, 29 Aug 2018 17:35:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/deploy-multiple-sites-to-firebase-hosting/</guid>
      <description>Firebase hosting recently announced support for multiple hosting targets within a single project. I am thrilled to see this feature because it is such a common requirement for real world apps. For example, you might have two separate apps - one for customers, one for admin employees - both of which share the same database and functions. In the past, we would have to get clever with deployment by either sharing the same URL or juggling multiple projects.</description>
    </item>
    
    <item>
      <title>Join Collections in Firestore</title>
      <link>https://fireship.io/lessons/firestore-joins-similar-to-sql/</link>
      <pubDate>Thu, 23 Aug 2018 17:30:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-joins-similar-to-sql/</guid>
      <description>How do I perform a SQL JOIN in Firestore? - it&amp;rsquo;s a difficult question almost all developers will come across. The simple answer for ALL NoSQL databases is that it&amp;rsquo;s just not possible in an apples-to-apples way. We can&amp;rsquo;t perform this operation server-side, however, we can get clever with custom RxJS operators to solve similar problems - plus gain the added benefit of maintaining realtime listeners on all data.
Our operators require AngularFire and will add some RxJS magic to its existing Observables to tackle the challenge of joining Firestore documents and collections together easily in Firestore.</description>
    </item>
    
    <item>
      <title>Introduction to Rxfire Rxjs for Firebase</title>
      <link>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</link>
      <pubDate>Wed, 22 Aug 2018 15:22:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/introduction-to-rxfire-rxjs-for-firebase/</guid>
      <description>Maintaining async callback-based code is one of the most challenging tasks a developer will face. Over the past few years, RxJS has become the leading tool for reactive programming in JavaScript, so it only makes sense that Firebase would leverage it to make realtime streams more developer-friendly. In the following lesson, you will take an early look at a new officially-supported library called RxFire.
Principles Not a replacement for AngularFire2 in Angular projects.</description>
    </item>
    
    <item>
      <title>Realtime GeoQueries with Firestore</title>
      <link>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</link>
      <pubDate>Tue, 10 Jul 2018 05:59:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/geolocation-query-in-firestore-realtime/</guid>
      <description>The ability to query by geographic coordinates in Firestore is a highly requested feature because many successful apps - like Uber, Pokemon Go, Instagram, etc - use realtime maps as part of the core user experience. Today you will learn how to build a realtime Google map using Firestore as the data source.
Fingers-crossed: It&#39;s possible that Firestore will have native support for Geolcation queries in the future, but there is no public timeline for this feature that I&#39;m aware of</description>
    </item>
    
    <item>
      <title>CSV to Firestore</title>
      <link>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</link>
      <pubDate>Sun, 25 Mar 2018 17:34:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</guid>
      <description>If you want to migrate your existing database to Firestore, you might be wondering&amp;hellip; How do I import JSON or CSV to Firestore?. In this lesson, I will provide you with a reliable pipeline for reading raw data and parsing it to a writable format for Firestore.
Everybody has different data modeling needs, so I will teach you how to quickly roll out your own NodeJS CSV-to-Firestore command line import tool.</description>
    </item>
    
    <item>
      <title>Passwordless Signup With Firebase on the Web</title>
      <link>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</link>
      <pubDate>Tue, 20 Mar 2018 17:25:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/using-passwordless-signup-with-firebase-on-the-web/</guid>
      <description>Passwordless auth - or email-link signup - is a cool new user authentication option in the Firebase SDK that was released in v4.12.0 on March 20th, 2018. Rather than force a user to remember a password, we simply send them an email with a link that creates the JSON Web Token when they redirect back to the site. As a user of apps, I see this method quickly replacing traditional passwords and personally find it much more user-friendly.</description>
    </item>
    
    <item>
      <title>The Ultimate Beginners Guide to Firebase</title>
      <link>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</link>
      <pubDate>Sun, 25 Feb 2018 16:13:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/the-ultimate-beginners-guide-to-firebase/</guid>
      <description>Today we&amp;rsquo;re going back to the basics in Firebase by building a basic web app from scratch. Even though this is beginner level, I think it&amp;rsquo;s very useful to write code with Firebase using nothing but plain JS, especially if you&amp;rsquo;re used to developing with a framework library like AngularFire, ReactFire, or Vuefire. In addition, I want give you my Why Firebase? opinion and explain why it&amp;rsquo;s my goto cloud provider.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Async Validation</title>
      <link>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</link>
      <pubDate>Sat, 10 Feb 2018 15:40:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</guid>
      <description>Reactive form validation can be a complex and difficult feature to implement, especially if you need to validate fields asynchronously. Angular ships with a few built-in validators, but they can only take you so far&amp;hellip;
Today, we are building a custom async validator that can verify username uniqueness in Firebase Firestore. My goal is to show you async validator for your reactive forms that you can apply to virtually any backend data source.</description>
    </item>
    
    <item>
      <title>Advanced Data Modeling with Firestore by Example</title>
      <link>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</link>
      <pubDate>Mon, 05 Feb 2018 15:31:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-firestore-nosql-data-structure-examples/</guid>
      <description>In the previous lesson, we learned the fundamentals of relational data modeling with Firestore. Today I want to push further and look at several more practical examples. In addition to data modeling, we will look at techniques like duplication, aggregation, composite keys, bucketing, and more.
Keep in mind, Firestore is still in beta. Firebase engineers hinted at some really cool features on the roadmap (geo queries, query by array of ids) - I&#39;ll be sure to keep you posted :)</description>
    </item>
    
    <item>
      <title>Firestore NoSQL Relational Data Modeling</title>
      <link>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</link>
      <pubDate>Mon, 05 Feb 2018 15:20:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-nosql-data-modeling-by-example/</guid>
      <description>Looking for advanced data modeling concepts and examples? Take the Firestore Data Modeling Course.
Data modeling in a NoSQL environment is tricky - especially if you come from a RDBMS background (MySQL, Postgres, etc) because you will need to unlearn many of the core principles already solidified in your brain. Firestore uses a document-oriented NoSQL model, similar to MongoDB and CouchDB, which leads to fundamentally different data structuring decisions.
The goal of this lesson is to examine data modeling principles in Firestore with comparisons to SQL.</description>
    </item>
    
    <item>
      <title>Google Cloud Vision with Ionic - Not Hotdog App</title>
      <link>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</link>
      <pubDate>Wed, 24 Jan 2018 15:00:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-cloud-vision-with-ionic-and-firebase/</guid>
      <description>In this lesson, we&amp;rsquo;re going to combine Google&amp;rsquo;s Google&amp;rsquo;s Cloud Vision API with Ionic and Firebase to create a native mobile app that can automatically label and tag images. But most importantly, it can determine if an image is a hotdog or not - just like the SeeFood app that made Jin Yang very rich.
Just a few years ago, this technology would have been unreachable by the average developer. You would need to train your own deep neural network on tens-of-thousands of images with massive amounts of computing power.</description>
    </item>
    
    <item>
      <title>Material Data Tables With Firestore</title>
      <link>https://fireship.io/lessons/material-data-tables-with-firestore/</link>
      <pubDate>Tue, 12 Dec 2017 05:49:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/material-data-tables-with-firestore/</guid>
      <description>In this lesson, I will show you how to build an Angular Material data datable that is sortable and filterable, while maintaining a realtime connection with Firestore. A dialog modal will be used share data between material components and update documents in Firestore.
This tutorial also makes suggestions for performance optimization when dealing with hundreds rows in the view. The end result is a table that&amp;hellip;
Uses Firebase/Firestore as the data source.</description>
    </item>
    
    <item>
      <title>Role Based Authorization With Firestore</title>
      <link>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</link>
      <pubDate>Thu, 07 Dec 2017 05:39:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</guid>
      <description>Learn more about data modeling in Firestore in the full course.
In this lesson, I will show you how to assign roles to users with the Firestore NoSQL database, then secure them on both the frontend and backend. This feature is known as role-based access control and is commonly used in forums, social media, etc - Stack Overflow Privileges is an excellent specimen of this feature in the wild (minus the ranking system).</description>
    </item>
    
    <item>
      <title>Multi-step Reactive Form for Email-Password Signup</title>
      <link>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</link>
      <pubDate>Sun, 12 Nov 2017 12:05:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</guid>
      <description>Firebase password auth can be configured with a few lines of code, but what happens if you need additional custom user data before authorizing activity in your app? In this lesson, my goal is to show you several important concepts.
Email/Password Auth Reactive Forms in Angular Security with custom Firebase user data What are we Building? This lesson is based off of the [Firstarter PWA starter app](https://firestarter-96e46.firebaseapp.com/), which is organized into NgModules.</description>
    </item>
    
    <item>
      <title>Cloud Functions Data Aggregation</title>
      <link>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</link>
      <pubDate>Sun, 29 Oct 2017 11:27:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firestore-cloud-functions-data-aggregation/</guid>
      <description>The following lesson demonstrates how to make Firestore queries faster and more cost-effective by aggregating data from a subcollection to its parent. Aggregation is simply the process of totaling up a bunch of documents and calculating combined or cumulative information about them.
A Firebase Cloud Function configured with a Firestore database trigger makes it possible to perform this task automatically whenever a document changes. This demo simulates the relationship between blog posts and a subcollection of comments.</description>
    </item>
    
    <item>
      <title>Star Ratings System With Firestore</title>
      <link>https://fireship.io/lessons/star-ratings-system-with-firestore/</link>
      <pubDate>Tue, 17 Oct 2017 11:17:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/star-ratings-system-with-firestore/</guid>
      <description>In this lesson, we will build a five-star rating system from scratch with Angular and Firebase.
Knowing how to implement star reviews in Angular is an important skill for a developer because the same concepts are used for likes, hearts, votes, and many other common UX features.
Firestore Data Structure How do we model star-ratings in a NoSQL database like firestore? In the SQL world, this is known as a many-to-many-through` relationship where Users have many Movies through Reviews AND Movies have many Users through Reviews</description>
    </item>
    
    <item>
      <title>Infinite Scroll Firestore Angular</title>
      <link>https://fireship.io/lessons/infinite-scroll-firestore-angular/</link>
      <pubDate>Wed, 11 Oct 2017 05:26:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-scroll-firestore-angular/</guid>
      <description>A few months ago, I showed you how to create a basic infinite scroll feature using Realtime Database. Today, we will create a more sophisticated and flexible pagination service with Firestore to facilitate infinite scroll.
As an added bonus, the feature will be able to scroll upwards, which is useful when scrolling back in time through a text feed - think Facebook Messenger or Slack.
Get the [Firestore Pagination source code](https://github.</description>
    </item>
    
    <item>
      <title>Secure Firebase Cloud Functions for Authenticated Users</title>
      <link>https://fireship.io/lessons/secure-firebase-cloud-functions/</link>
      <pubDate>Wed, 27 Sep 2017 07:08:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/secure-firebase-cloud-functions/</guid>
      <description>Learn more in the Cloud Functions Master Course.
In this lesson, I will show you how to run Firebase Cloud Functions ONLY when users are authenticated with a valid user ID.
Endpoint security is critical - especially if using a paid 3rd party API like SendGrid or Twilio. There are certain situations where only want a function to run if the user is currently authenticated. For example, you may have a function that sends transactional email to a user via SendGrid.</description>
    </item>
    
    <item>
      <title>Push Notifications on the Web</title>
      <link>https://fireship.io/lessons/push-messages-with-firestore/</link>
      <pubDate>Tue, 01 Aug 2017 05:14:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/push-messages-with-firestore/</guid>
      <description>A few months ago, I released a video covering Firebase Cloud Messaging (FCM) with the Realtime Database. Today, I am going to update this code with the following improvements:
Save FCM tokens in Firestore. Send Firebase push messages to multiple devices simultaneously. Angular 5 firebase cloud messaging demo in angular
Setting Up Firebase Cloud Messaging in Angular There are several steps you must take in Angular to get started with cloud messaging.</description>
    </item>
    
    <item>
      <title>Build Realtime Maps with Mapbox GL</title>
      <link>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</link>
      <pubDate>Fri, 28 Jul 2017 04:59:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</guid>
      <description>In this lesson, I am going to cover the basics of building realtime map features with Angular4, Firebase, and MapBox. Here‚Äôs a highlight of what is covered in the code below. How to obtain a user‚Äôs current location How to connect Firebase data with Mapbox How to format GeoJSON data. How to quickly customize map styles. realtime interaction between two maps
Initial Setup Start by signing up for a free Mapbox account, then installing mapbox-gl in your Angular project.</description>
    </item>
    
    <item>
      <title>Firebase Phone Authentication</title>
      <link>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</link>
      <pubDate>Wed, 19 Jul 2017 04:34:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</guid>
      <description>Signing up users with a phone number adds certain degree of trust or confidence to an app. In this lesson, we are going to use the new phone authentication paradigm from Firebase in our Angular 4 app. At this time, phone auth is not supported in AngularFire, so we will use the firebase JavaScript SDK directly. Phone auth can also be used to link accounts, providing an effective solution for two-factor authentication.</description>
    </item>
    
    <item>
      <title>Facebook-Inspired Reactions From Scratch</title>
      <link>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</link>
      <pubDate>Wed, 05 Jul 2017 16:00:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build a Facebook-inspired reaction component. It works by mapping each reaction type to an integer then saves it with an associated userId. This is similar to the reddit voting system lesson, with some added complexity to manage the various reaction types. Importing the Graphics First, let‚Äôs add some graphics to the assets folder.</description>
    </item>
    
    <item>
      <title>Angular Toast Message Notifications From Scratch</title>
      <link>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</link>
      <pubDate>Mon, 03 Jul 2017 15:50:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build toast notifications from scratch with Angular 4. There are a couple of good Angular toast packages that solve this problem, but it‚Äôs not very hard to do from scratch. This implementation provides a feed of 5 messages/notifications, which the user can dismiss by clicking. A service will manage the notifications, so they can be observed or updated from any component.</description>
    </item>
    
    <item>
      <title>Twitter Inspired Follow System with Firebase</title>
      <link>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</link>
      <pubDate>Tue, 27 Jun 2017 15:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
The idea of user following and unfollowing has been around since the rise of Twitter, but add this feature into an app is not as easy as you might think. It is an inherently relational problem, so making it work with a NoSQL database requires some tradeoffs. In this lesson, we are going to build twitter-inspired follow and unfollow feature using on Firebase and Angular 4.</description>
    </item>
    
    <item>
      <title>Custom Usernames With Firebase Authentication and Angular</title>
      <link>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</link>
      <pubDate>Sat, 24 Jun 2017 15:27:32 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app and the custom Firebase Usernames tutorial.
Firebase authentication is super convenient, but you can‚Äôt easily assign custom usernames out of the box. In this lesson, we are going to give users custom usernames and asynchronously validate their availability during the signup process. On every keyup, the username will be checked for duplicates, so we can display a helpful message to the user.</description>
    </item>
    
    <item>
      <title>Reddit Style Upvoting in Angular 4 and Firebase</title>
      <link>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</link>
      <pubDate>Fri, 23 Jun 2017 15:09:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
Upvoting and downvoting is an excellent ay handle community-driven content curation. Reddit is the most famous example of this feature, but it is common throughout the interwebs on places like StackOverflow, Kaggle, and others. In this lesson, we will use Angular 4 and Firebase to implement upvoting with ease.</description>
    </item>
    
    <item>
      <title>Reactive Crud App With Angular and Firebase Tutorial</title>
      <link>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</link>
      <pubDate>Mon, 10 Apr 2017 13:06:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
We‚Äôre going to be building a basic list of items that you do CRUD to - create, read, update, delete. The feature itself is nothing special, it‚Äôs really just a skeleton that demonstrates how to do the most common operations with Angular and Firebase. The realtime database from Firebase uses NoSQL, so think of CRUD in the following terms.</description>
    </item>
    
    <item>
      <title>Firestore Data Modeling</title>
      <link>https://fireship.io/courses/firestore-data-modeling/</link>
      <pubDate>Thu, 16 May 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/firestore-data-modeling/</guid>
      <description>The Firestore Data Modeling Course provides a foundation for modeling data relationships in NoSQL, while optimizing queries for performance, cost, and complexity. Determining the the optimal data model in Cloud Firestore is not an easy task because you need to anticipate your app&amp;rsquo;s UI/UX requirements in advance. Failure to consider the tradeoffs between various data models could lead to poor app performance and/or unnecessary cloud computing expenses. The goal of this course is to teach you the concepts necessary to make good decisions related to data modeling that minimize costs and maximize read performance.</description>
    </item>
    
  </channel>
</rss>
