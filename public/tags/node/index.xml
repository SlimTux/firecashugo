<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node on Fireship</title>
    <link>https://fireship.io/tags/node/</link>
    <description>Recent content in Node on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Nov 2022 14:42:50 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/node/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Node.js Quickstart</title>
      <link>https://fireship.io/courses/javascript/node-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/node-basics/</guid>
      <description>Step 1 - What is Node? Node is a runtime that allows you to run JavaScript on the server. Learn more in the how JavaScript works section of this course.
Step 2 - Install Node Follow these instructions to install NodeJS. This course uses Node version 12, nvm install 12.
Step 3 - Hello world Create a JavaScript file.
file_type_js index.js console.log(&amp;#39;hello world&amp;#39;) Run it with node.
command line node .</description>
    </item>
    
    <item>
      <title>Deno Quickstart</title>
      <link>https://fireship.io/courses/javascript/deno-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/deno-basics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Setup Node with TypeScript</title>
      <link>https://fireship.io/lessons/typescript-nodejs-setup/</link>
      <pubDate>Sat, 26 Nov 2022 14:42:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typescript-nodejs-setup/</guid>
      <description>The following lesson demonstrates how to setup a Node.js (v18)project with TypeScript when using ES Modules. TS version 4.7 introduced a new NodeNext compliler option that can translate ES Modules to CommonJS modules. It simplifies the setup process for Node.js projects, but there are important caveats to be aware of.
More about ES Modules in TS from the TypeScript docs.
Setup Package.json Module Type npm init -y npm install -D typescript @types/node Update the package.</description>
    </item>
    
    <item>
      <title>Modern JavaScript Full Course</title>
      <link>https://fireship.io/courses/js/</link>
      <pubDate>Fri, 11 Nov 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/js/</guid>
      <description>The JavaScript Course teaches you how to build modern applications with vanilla JavaScript - no React, no TypeScript, no Frameworks - just plain old JavaScript.
ü¶Ñ What will I learn? This course is focusd on the basics of JavaScript - the world&amp;rsquo;s most commonly used programming language. Here&amp;rsquo;s what you&amp;rsquo;ll get out of it&amp;hellip;
üë∂ The Basics of JavaScript üë®‚Äçüé§ Advanced concepts broken down in a quick no-BS format üì∞ Prepare for JS interviews by coding algorithms üß™ Test Driven Development with Vitest ‚öîÔ∏è Debugging and Error Handling üé® Build a text-to-image API with Node.</description>
    </item>
    
    <item>
      <title>Cryptography Concepts for Node.js Developers</title>
      <link>https://fireship.io/lessons/node-crypto-examples/</link>
      <pubDate>Thu, 28 Oct 2021 13:29:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/node-crypto-examples/</guid>
      <description>The mysterious discipline of cryptography is the backbone of the internet. Without it, there would be no secrets and no privacy in the digital world. As a developer, you don‚Äôt need to understand the math that goes into cryptography, but it‚Äôs absolutely essential to know key concepts like hashes, salt, keypairs, encryption, and signing.
The following tutorial explains essential cryptography concepts and implements them with the builtin Node.js crypto module.</description>
    </item>
    
    <item>
      <title>API Monetization with Stripe Metered Billing</title>
      <link>https://fireship.io/lessons/api-monetization-stripe/</link>
      <pubDate>Sun, 24 Oct 2021 10:12:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/api-monetization-stripe/</guid>
      <description>Building a monetized API for a SaaS product might seem like a daunting task, but it&amp;rsquo;s actually relatively simple when you bring in tools like Stripe&amp;rsquo;s Metered Billing feature. There are 4 main steps in the process:
Create an API Subscribe a customer to a recurring subscription in Stripe Create custom API keys to authenticate requests to the API Report API usage to Stripe The following lesson demonstrates the backend flow for building API with Express.</description>
    </item>
    
    <item>
      <title>Docker Basics Tutorial with Node.js</title>
      <link>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</link>
      <pubDate>Mon, 24 Aug 2020 08:08:56 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/docker-basics-tutorial-nodejs/</guid>
      <description>Code Breakdown Dockerfile A Dockerfile is like DNA for building a Docker Image.
file_type_docker Dockerfile FROM node:12 WORKDIR /app COPY package*.json ./ RUN npm install COPY . . ENV PORT=8080 EXPOSE 8080 CMD [ &amp;#34;npm&amp;#34;, &amp;#34;start&amp;#34; ] Dockerignore A Dockerignore file is required so we don&amp;rsquo;t add the node_modules folder to the image.
file_type_docker .dockerignore node_modules Node.js App This is the code we went to run as the container&amp;rsquo;s process.</description>
    </item>
    
    <item>
      <title>Access Google APIs for Users with OAuth 2.0</title>
      <link>https://fireship.io/lessons/google-apis-node-tutorial/</link>
      <pubDate>Sat, 23 May 2020 00:33:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/google-apis-node-tutorial/</guid>
      <description>How do you make APIs calls to a Google service on behalf of a user? The following lesson demonstrates how to get permission from a user with OAuth 2.0 to make authenticated requests to Google APIs from a backend Node.js server like Firebase Cloud Functions.
Examples of common use cases might include:
Upload a file to a user&amp;rsquo;s Google Drive Make an appointment on a user&amp;rsquo;s Google Calendar Access a user&amp;rsquo;s infrastructure on Google Cloud Platform üí° Note: This lesson covers server-side OAuth.</description>
    </item>
    
    <item>
      <title>Authenticate a Firebase User on the Server</title>
      <link>https://fireship.io/snippets/express-middleware-auth-token-firebase/</link>
      <pubDate>Fri, 22 May 2020 05:56:37 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/express-middleware-auth-token-firebase/</guid>
      <description>The following snippet demonstrates how to setup server-side authentication in Firebase on any node server using Express.js.
Note. If using Firebase Cloud Functions, you can use Callable Functions to automatically handle this type of authentication.
Client-side: Include the ID Token Your client-side code must attach the ID token to the authorization header when making a request to the server. The example below uses the browser&amp;rsquo;s built in fetch API.
file_type_js frontend-app.</description>
    </item>
    
    <item>
      <title>Web Development Setup Guide for Windows with Linux (WSL)</title>
      <link>https://fireship.io/lessons/windows-10-for-web-dev/</link>
      <pubDate>Fri, 03 Apr 2020 13:22:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/windows-10-for-web-dev/</guid>
      <description>Historically, Windows has not been been the preferred OS for most web developers, but things have changed over the past couple years. Microsoft recently launched Windows Subsystem for Linux or WSL (WSL2), allowing us to install REAL linux distros (like Ubuntu) on Windows 10. This means you can use Linux toolchains (bash, zsh, tmux) and apps to manage the file system and run windows apps.
Unlike a dual boot system, where two operating systems are installed on the same hard drive, WSL runs Linux in a compatibility layer that can run unmodified ELF64 binaries.</description>
    </item>
    
    <item>
      <title>Electron Screen Capture Tutorial</title>
      <link>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</link>
      <pubDate>Wed, 04 Mar 2020 06:56:47 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/electron-screen-recorder-project-tutorial/</guid>
      <description>Electron opens the world of desktops apps to the average JavaScript developer. It wraps Chromium with Node.js, providing a browser for building UIs and Node for low-level system operations.
The following project tutorial demonstrates how to build a simple screen recorder with Electron. The app can retrieve the available screens from the system, turn the screen into a video feed, then record and save the raw video file to the system.</description>
    </item>
    
    <item>
      <title>How to Build a Slack App</title>
      <link>https://fireship.io/lessons/how-to-build-a-slack-bot/</link>
      <pubDate>Tue, 03 Dec 2019 14:22:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-build-a-slack-bot/</guid>
      <description>Slack Apps, or Bots, allow you to extend slack with interactive features that can improve your teams productivity. The following lesson is a step-by-step guide to building a Slack App using Firebase Cloud Functions as the backend server.
This lesson builds Slack App for the actual Fireship Slack. Join to see the CyberJeff bot in action.
Our Slack App will perform the following tasks.
Listen to events, such as a new user joining the #general channel.</description>
    </item>
    
    <item>
      <title>Stripe Payment Intents Tutorial</title>
      <link>https://fireship.io/lessons/stripe-payment-intents-tutorial/</link>
      <pubDate>Tue, 22 Oct 2019 18:05:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-payment-intents-tutorial/</guid>
      <description>Stripe provides a huge API with everything you could ever want to build a complex payment system. Recent changes in the online payments landscape have resulted in significant changes to the API, most notably the Payment Intents API. The following lesson demonstrates two modern strategies for accepting one-time payments - (1) Checkout and (2) Stripe Elements with Payment Intents.
As of September 2019, many European banks now require their customers to validate payments using 3D secure standard or Strong Customer Authentication SCA.</description>
    </item>
    
    <item>
      <title>Algolia Fulltext Search Cloud Functions</title>
      <link>https://fireship.io/lessons/algolia-cloud-functions/</link>
      <pubDate>Sun, 25 Aug 2019 10:43:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/algolia-cloud-functions/</guid>
      <description>One of the most commonly encountered limitations of Cloud Firestore (and GCP) is full-text search. This functionality is essential if you need to query complex text patterns in a database or filter results by multiple dynamic properties. My favorite solution to this limitation is Algolia, which provides a powerful, developer-friendly, search &amp;amp; discovery API. In the following lesson you will learn how to sync your Firestore data to an Algolia index via Cloud Functions.</description>
    </item>
    
    <item>
      <title>Build a Chatbot With Dialogflow</title>
      <link>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</link>
      <pubDate>Mon, 12 Aug 2019 09:45:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</guid>
      <description>Chatbots make it possible for the average developer to deliver excellent (and affordable) customer service at scale - Building conversational experiences has never been easier thanks to the Dialogflow conversation platform.
Dialogflow is a free tool on Google Cloud for creating voice and text conversational interfaces. It uses Natural Language Processing NLP technology, allowing you to create experiences similar to Google Assistant or Amazon Alexa. In following lesson creates a chatbot from scratch in the three main steps:</description>
    </item>
    
    <item>
      <title>Modern Web Scraping Guide</title>
      <link>https://fireship.io/lessons/web-scraping-guide/</link>
      <pubDate>Wed, 17 Jul 2019 13:01:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/web-scraping-guide/</guid>
      <description>In a perfect world, every website provides free access to data with an easy-to-use API&amp;hellip; but the world is far from perfect. However, it is possible to use web scraping techniques to manually extract data from websites by brute force. The following lesson examines two different types of web scrapers and implements them with NodeJS and Firebase Cloud Functions.
Initial Setup Let&amp;rsquo;s start by initializing Firebase Cloud Functions with JavaScript.</description>
    </item>
    
    <item>
      <title>SendGrid Transactional Email Guide</title>
      <link>https://fireship.io/lessons/sendgrid-transactional-email-guide/</link>
      <pubDate>Fri, 05 Jul 2019 10:26:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sendgrid-transactional-email-guide/</guid>
      <description>Transactional email is the art of communicating with users in response to events or conditions, and is an important consideration for the overall user experience (UX) of an app. One of the most popular email APIs is SendGrid (recetly acquired by Twilio). It is flexible, provides a NodeJS SDK, and starts with free tier for small projects. The following lesson will teach you how to send email from your app based on user-driven events with Firebase Cloud Functions.</description>
    </item>
    
    <item>
      <title>Cron Example Schedules</title>
      <link>https://fireship.io/snippets/crontab-crash-course/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/crontab-crash-course/</guid>
      <description>Cron is a long-running process used on Linux servers that ticks at specific times based on the crontab pattern (with a minimum of 1 minute of granularity). It is used to setup cronjobs, which are background tasks that get executed at a specific time or interval. Also, Firebase now has a time-triggered Cloud Function that can be set with crontab. The following guide will teach you how to schedule cronjobs in this format.</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>How to Share Code between JavaScript Apps</title>
      <link>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</link>
      <pubDate>Tue, 04 Sep 2018 17:48:24 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/how-to-structure-a-large-web-app-project/</guid>
      <description>The right project structure for your app depends primarily on (1) its complexity, and (2) the size of your team. In this lesson, I will show you how to use NPM packages to share code in a big JavaScript project that contains multiple apps.
Monorepos versus Multiple Repos There are two high-level strategies for handling source control in a large complex web application - monorepo and multiple repos. Some developers have very strong preferences for one or the other, but it mostly just boils down to a series of tradeoffs.</description>
    </item>
    
    <item>
      <title>Image Thumbnail Resizer Cloud Function</title>
      <link>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</link>
      <pubDate>Thu, 09 Aug 2018 15:06:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/image-thumbnail-resizer-cloud-function/</guid>
      <description>The single most common Cloud Function use-case for a storage bucket is to resize images to thumbnails in the background. I&amp;rsquo;ve built quite a few of these functions and have developed some techniques to make the process more developer-friendly and performant. The following lesson demonstrates how to resize a Cloud Storage upload to a set of thumbnails using Cloud Functions v2.x.
Thumbnails resized by a Firebase Cloud Function
Initial Setup Want to master the fundamentals of serverless?</description>
    </item>
    
    <item>
      <title>CSV to Firestore</title>
      <link>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</link>
      <pubDate>Sun, 25 Mar 2018 17:34:22 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/import-csv-json-or-excel-to-firestore/</guid>
      <description>If you want to migrate your existing database to Firestore, you might be wondering&amp;hellip; How do I import JSON or CSV to Firestore?. In this lesson, I will provide you with a reliable pipeline for reading raw data and parsing it to a writable format for Firestore.
Everybody has different data modeling needs, so I will teach you how to quickly roll out your own NodeJS CSV-to-Firestore command line import tool.</description>
    </item>
    
    <item>
      <title>Extract Text from Images</title>
      <link>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</link>
      <pubDate>Fri, 02 Feb 2018 15:08:13 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-cloud-vision-ocr-text-extraction/</guid>
      <description>The following lesson uses the Cloud Vision API on Google Cloud to extract text from raw images. This is a highly sought-after feature in business applications that still work with non-digitized text documents.
The Cloud Vision Node.js documentation is a good reference to keep by your side.
Getting Started You actually don&amp;rsquo;t need a frontend app to experiment with this technology - just a Firebase storage bucket. I recommend creating a dedicated bucket for the invocation of cloud functions.</description>
    </item>
    
    <item>
      <title>CSV Exports from Firestore</title>
      <link>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</link>
      <pubDate>Tue, 14 Nov 2017 12:13:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/csv-exports-from-firestore-database-with-cloud-functions/</guid>
      <description>A common business requirement for a professional app is to export data as comma separated values, or CSV format. Data formatted this way can be used by spreadsheet software like Microsoft Excel and Google Docs, but it can also be used as input to many popular machine learning libraries. It this lesson, I will show you how to export a Firestore collection in CSV format using Firebase Cloud Functions and a Storage Bucket.</description>
    </item>
    
    <item>
      <title>Build a Weather App with Angular</title>
      <link>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</link>
      <pubDate>Mon, 09 Oct 2017 11:07:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</guid>
      <description>In this lesson, you will learn how to retrieve weather data from an API and use it in a frontend Angular app. A secure backend built with Firebase Cloud Functions will make the HTTP request to ensure sensitive data is not exposed in Angular.
The end result looks like this, but you will have access to whole bunch of weather data to completely customize the user experience.
Weather forecasting app demo</description>
    </item>
    
    <item>
      <title>Text Translator With Firebase Cloud Functions Onwrite and Angular</title>
      <link>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</link>
      <pubDate>Sun, 25 Jun 2017 15:17:21 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/text-translator-with-firebase-cloud-functions-onwrite-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
In this lesson, we are going to use Firebase Cloud Functions to run code in the background when new data is created in a specific part of the database, using the onWrite event handler. This will allow us to abstract CPU or memory intensive tasks outside of the frontend Angular app.</description>
    </item>
    
  </channel>
</rss>
