<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on Fireship</title>
    <link>https://fireship.io/tags/flutter/</link>
    <description>Recent content in Flutter on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Jul 2022 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Flutter Firebase</title>
      <link>https://fireship.io/courses/flutter-firebase/</link>
      <pubDate>Fri, 15 Jul 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase/</guid>
      <description>Flutter Firebase - The Full Course will take you from zero to a complex production-ready iOS or Android app using real-world cloud infrastructure.
‚ö° What will I build? Updated Sep 15th, 2022 Flutter v3.1
This is a project-based course that will teach you how to build a multiple choice quiz app, inspired by apps like Duolingo and QuizUp. The app implements user authentication (Sign in with Google or Apple), tracks quiz progress in Firestore, uses dynamic animations, and shares data between screens.</description>
    </item>
    
    <item>
      <title>Dart 101</title>
      <link>https://fireship.io/courses/dart/</link>
      <pubDate>Tue, 05 Jul 2022 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/dart/</guid>
      <description>Dart - The Full Course is designed to teach you the fundamentals of the Dart language to prepare you for a successful journey into Flutter.
ü¶Ñ What will I learn? This course provides a tour of Dart and teaches essential concepts for Flutter developers. Here&amp;rsquo;s what you&amp;rsquo;ll get out of it&amp;hellip;
üë®‚Äçüé§ Become confident with the Dart language üê¶ Get Prepared for Flutter ü¶∫ Master null-safety ü¶æ Learn how to use the Dart CLI üïπÔ∏è Practice OOP and Functional Programming Concepts üåä Asynchronous programming with Futures &amp;amp; Streams ü§î Is this Course Right for Me?</description>
    </item>
    
    <item>
      <title>Riverpod with Firebase</title>
      <link>https://fireship.io/lessons/firebase-riverpod-flutter/</link>
      <pubDate>Sat, 27 Nov 2021 13:45:48 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-riverpod-flutter/</guid>
      <description>Riverpod is a reactive state-management library for Flutter that can simplify the way global data is shared throughout your application. It is especially useful with Firebase because it allows to you easily join Streams together, like a Firestore document with a Firebase Auth user.
The following tutorial demonstrates how to use Riverpod to manage Firebase Auth state and relational realtime data in Firestore.
Learning Objectives
Riverpod Basics w/ Firebase Listen to the current user&amp;rsquo;s auth state Join realtime Firestore data based on current user&amp;rsquo;s UID Setup This tutorial assumes you have already installed Firebase into your app.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Chat Demo</title>
      <link>https://fireship.io/lessons/flutter-firebase-chat-demo/</link>
      <pubDate>Thu, 30 Sep 2021 12:19:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-chat-demo/</guid>
      <description>Flutter makes it possible to build high-performance cross-platform apps with sound type safety thanks to the Dart programming language. It provides excellent support for Firebase with official plugins maintained by Google.
In the following lesson, we will build a basic chat app with Flutter and Firebase. It allows a user to sign in with Google and then access a group chat room. The user can read a realtime feed of recent chat messages via Firestore and post new messages into the chat.</description>
    </item>
    
    <item>
      <title>How to use JS with Flutter Web</title>
      <link>https://fireship.io/snippets/using-js-with-flutter-web/</link>
      <pubDate>Sun, 19 Apr 2020 08:00:17 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/using-js-with-flutter-web/</guid>
      <description>Flutter Web opens the door to building progressive web apps (PWAs) entirely in Dart. However, your Dart code will likely need to interop with JavaScript at some point to access browser APIs and/or your own custom JS apps. The following snippet demonstrates how access JS from a Flutter web app.
Using JavaScript in Dart &amp;amp; Flutter Dart.js is a built-in library that can interop with JavaScript.
Add a Script Create a JS file in the web directory and add some functions to it.</description>
    </item>
    
    <item>
      <title>Handle Radial Pan Events in Flutter</title>
      <link>https://fireship.io/snippets/circular-drag-flutter/</link>
      <pubDate>Mon, 02 Dec 2019 09:19:58 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/circular-drag-flutter/</guid>
      <description>A UI element that is not currently supported out of the box with Flutter is a click wheel, or knob, or radial control, rotatable circle, or whatever you want to call it. The following snippet demonstrates how to take a circular container, then detect which direction the user is rotating (clockwise or counter clockwise) and its velocity.
Full wheel demo source code.
Flutter Circular Pan Wheel Detect Pan Gestures Use a GestureDetector to wrap a container with a BoxShape.</description>
    </item>
    
    <item>
      <title>Build the Classic iPod UI in Flutter</title>
      <link>https://fireship.io/lessons/flutter-ipod/</link>
      <pubDate>Sun, 01 Dec 2019 09:12:43 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-ipod/</guid>
      <description>An awesome tweet was making the rounds last week that recreates the iPod Classic UI with SwiftUI. It features a click wheel that scrolls through a list of items when rotated and makes for an excellent Flutter UI challenge.
Turned my iPhone into an iPod Classic with Click Wheel and Cover Flow with #SwiftUI pic.twitter.com/zVk5YJj0rh
&amp;mdash; Elvin (@elvin_not_11) November 27, 2019 Creating an animated scrolling list with Flutter is a piece of cake, but calculating scroll direction/velocity from the pan events on the wheel is a bigger challenge.</description>
    </item>
    
    <item>
      <title>Access the Index on Dart List.map()</title>
      <link>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</link>
      <pubDate>Sun, 24 Nov 2019 07:55:05 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</guid>
      <description>The following snippet demonstrates how to access the iteration index when using List.map. It is a common need in Flutter when looping over or mapping a list of values to widgets.
Problem Unlike JavaScript, one cannot simply access the index of a list during a List.map operation in Dart.
file_type_dartlang main.dart List myList = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; myList.map( (val, index) { // This does not work! // Which index am I on?</description>
    </item>
    
    <item>
      <title>Build a Binary Clock with Flutter</title>
      <link>https://fireship.io/lessons/build-a-binary-clock-flutter/</link>
      <pubDate>Thu, 21 Nov 2019 12:40:31 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-binary-clock-flutter/</guid>
      <description>The Flutter Clock Contest is currently running with a submission deadline of Jan 20th, 2020. The following lesson will teach you how to build a basic clock with Flutter.
Binary Clock Basics We are building the binary clock shown in the demo video below. Notice how the clock ticks once-per-second and updates the highlighted boxes in the UI. The actual time is shown in big plain digits at the bottom, with the binary value for each number under it.</description>
    </item>
    
    <item>
      <title>Flutter Firebase - The Full Course</title>
      <link>https://fireship.io/courses/flutter-firebase-v1/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/flutter-firebase-v1/</guid>
      <description>Flutter Firebase - The Full Course Version 1 will take you from zero to a complex production-ready iOS or Android app using real-world cloud infrastructure.
‚ö†Ô∏è This course uses Flutter version 1. Checkout the latest version of Flutter Firebase course for version 2+.</description>
    </item>
    
    <item>
      <title>Flutter File Uploads</title>
      <link>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</link>
      <pubDate>Fri, 26 Jul 2019 12:14:09 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-file-uploads-cloud-storage/</guid>
      <description>Camera apps are one of the most popular niches in the market, with the recent viral growth of FaceApp being a prime example. There are a variety of plugins for Flutter that make camera-based features easy to develop, and when combined with Firebase the results can be easily uploaded your backend cloud infrastructure. The following lesson demonstrates the following features:
Capture images from the device camera or image gallery. Crop, rotate, and resize an image file.</description>
    </item>
    
    <item>
      <title>In App Purchases in Flutter</title>
      <link>https://fireship.io/lessons/flutter-inapp-purchases/</link>
      <pubDate>Tue, 25 Jun 2019 06:14:51 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-inapp-purchases/</guid>
      <description>Flutter recently launched official support for In App Purchases (IAP) and provides a unified plugin for both iOS and Android. Native mobile apps that collect payments for digital goods on the Apple App Store and/or Google Play Store are typically required to use the In App Purchases API, which means services like Stripe and Paypal are out of the question (with the exception of payments for physically shipped goods). In reality, In App Purchases are far more lucrative for digital products, with the game Candy Crush generating $4MM in revenue per day in 2018.</description>
    </item>
    
    <item>
      <title>FCM Push Notifications for Flutter</title>
      <link>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</link>
      <pubDate>Tue, 11 Jun 2019 06:37:28 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-push-notifications-fcm-guide/</guid>
      <description>When used correctly, push notifications can be an excellent way to drive user engagement and keep your app in focus on a consistent basis. When used incorrectly, they can be annoying and motivate users to simply uninstall your app and never look back. Fortunately, Firebase Cloud Messaging (FCM) provides a sophisticated set of tools to send notifications only to users who actually want them. The following lesson will teach you how to configure FCM in Flutter to broadcast both Topic-based, Device-based, and Segment-based push notifications.</description>
    </item>
    
    <item>
      <title>Flutter Provider with Firebase</title>
      <link>https://fireship.io/lessons/advanced-flutter-firebase/</link>
      <pubDate>Sat, 11 May 2019 13:59:08 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/advanced-flutter-firebase/</guid>
      <description>The following article discusses patterns that I have found exceptionally useful when implementing Firebase User Authentication and Firestore in Flutter. In particular, the Provider provides an excellent solution for sharing and managing streams with minimal boilerplate. However, to take full advantage of this package you must deserialize your raw data to a Dart class.
If you are building a major project with Flutter &amp;amp; Firebase, consider enrolling in the Full Flutter Firebase Course.</description>
    </item>
    
    <item>
      <title>Flutter Drag and Drop Basics</title>
      <link>https://fireship.io/lessons/flutter-drag-and-drop-basics/</link>
      <pubDate>Tue, 30 Apr 2019 11:45:14 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-drag-and-drop-basics/</guid>
      <description>The following lesson will teach you how to build a simple drag-and-drop UI with the Draggable and DragTarget widgets. The demo app is a kid&amp;rsquo;s game (ages 2 to 4) that requires the user to drag a fruit emoji üçã from the left column to the matching color on the right. If successfully dropped it will mark that item complete ‚úÖ and the score will increase by one. The user can also reset the game at any time by pressing on the floating action button.</description>
    </item>
    
    <item>
      <title>Flutter Flare 2D Animation Basics</title>
      <link>https://fireship.io/lessons/animated-navigation-flutter-flare/</link>
      <pubDate>Tue, 02 Apr 2019 11:00:35 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/animated-navigation-flutter-flare/</guid>
      <description>Whenever I see an awesome UI element in a native app my first question is How do I make that in Flutter?. That&amp;rsquo;s exactly what I asked when I downloaded the Giphy Android app recently, which has runs a colorful and fun animation for each icon in the bottom navbar.
These animations are complex. Hypothetically, they could be created in Flutter natively with a custom painter, but that would be very challenging and painful.</description>
    </item>
    
    <item>
      <title>Flutter Firestore Animated SlideShow</title>
      <link>https://fireship.io/lessons/flutter-slider-like-reflectly/</link>
      <pubDate>Wed, 20 Mar 2019 10:18:59 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-slider-like-reflectly/</guid>
      <description>One of the best examples of a well-designed UI in Flutter is Reflectly - an AI-powered journal app for iOS and Android. The following lesson will show you how to build an animated slideshow carousel inspired by the work of Reflectly. In addition, we will wire it up to Firestore to make it filterable and able to scale to an infinite number of pages.
PageView Widget Intro The most import widget in this lesson is the PageView, which makes it possible to easily build sliding pages.</description>
    </item>
    
    <item>
      <title>Flutter Skeleton Text with Shimmer Animation</title>
      <link>https://fireship.io/snippets/flutter-skeleton-text/</link>
      <pubDate>Tue, 19 Mar 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/flutter-skeleton-text/</guid>
      <description>Skeleton text is a strategy that improves the perceived load time of content by rendering a blank placeholder that roughly matches the size of the expected content. This method was originally made popular by Facebook, but is now used on many popular apps and websites.
Use this skeleton text widget as a placeholder when loading data from an external source.
Flutter Skeleton Text Widget The skeleton text effect can be created in Flutter with an animated loop over a color gradient.</description>
    </item>
    
    <item>
      <title>Flutter State Management Guide</title>
      <link>https://fireship.io/lessons/flutter-state-management-guide/</link>
      <pubDate>Fri, 08 Mar 2019 15:19:53 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-state-management-guide/</guid>
      <description>State management is a hot-button topic that brings out strong opinions in developers, and in extreme cases results in Twitter fights. In my experience, people tend to over-engineer features that would otherwise be straight-forward because they assume a full-blown state management library is necessary. In some cases, they just add complexity, but in others, they can be extremely valuable. My recommendation is to analyze these strategies closely and choose an approach that feels right for your app&amp;rsquo;s requirements and your team&amp;rsquo;s style.</description>
    </item>
    
    <item>
      <title>Flutter Animated Radial Menu</title>
      <link>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</link>
      <pubDate>Sun, 24 Feb 2019 09:14:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-radial-menu-staggered-animations/</guid>
      <description>Building a flashy animated radial menu in Flutter can be done with ease thanks to the Transform widget and staggered animations. The following lesson will teach you how to compose flutter animations into a cool rotating circular widget, which can easily maintain 60FPS on modern smartphones.
Step 1 - Initial Setup We will define two custom widgets for this demo.
The parent RadialMenu is a StatefulWidget responsible for defining an AnimationController that sets a duration for the animation.</description>
    </item>
    
    <item>
      <title>Flutter Realtime Geolocation Firebase</title>
      <link>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</link>
      <pubDate>Wed, 13 Feb 2019 06:22:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-realtime-geolocation-firebase/</guid>
      <description>Looking to build a realtime geolocation app like Lyft, Postmates, or Waze? It is easier than you might think when you combine the power of Flutter, Google Maps, and Firebase. The following lesson will show you how use Google Maps in Flutter, then listen to a realtime feed of geolocation data in Firestore queried by its distance from a centerpoint - made possible by the GeoFlutterFire package.
Special thanks to Darshan Gowda for creating the GeoFlutterFire library and providing the example code for this lesson.</description>
    </item>
    
    <item>
      <title>Flutter Widget Positioning - A Guide for the CSS Developer</title>
      <link>https://fireship.io/lessons/flutter-widget-positioning-guide/</link>
      <pubDate>Tue, 29 Jan 2019 07:10:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-widget-positioning-guide/</guid>
      <description>The addition of Flexbox to CSS revolutionized the way we position elements on the web. It makes the alignment of elements on a 2D plane automatic and well, flexible. Fortunately, Flutter uses the same principles for aligning widgets with Flex, Column, and Row. In addition, it supports absolute and fixed positioning with Stack.
The following lesson will teach you how to position containers and build layouts in Flutter with direct comparisons to CSS Flexbox.</description>
    </item>
    
    <item>
      <title>Flutter for JavaScript Developers</title>
      <link>https://fireship.io/lessons/flutter-for-js-developers/</link>
      <pubDate>Sun, 20 Jan 2019 12:28:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-for-js-developers/</guid>
      <description>So you&amp;rsquo;re a web developer working with JavaScript and curious about Flutter? That was me about one-year ago, and at the time, learning an uncommon language like Dart seemed ridiculous because there are existing hybrid app frameworks in JS. Then I tried it&amp;hellip; To my surprise, I was able to write productive code right out of the gate. The following lesson will compare Dart/Flutter to JS/ReactNative.
Source: FlutterDev subreddit
Throughout this lesson, you will see the üëâ emoji.</description>
    </item>
    
    <item>
      <title>Flutter Firebase Google SignIn &#43; Firestore</title>
      <link>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</link>
      <pubDate>Mon, 14 Jan 2019 07:43:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/flutter-firebase-google-oauth-firestore/</guid>
      <description>The following lesson will show you how to implement Google SignIn with Flutter and Firebase, then update a custom user profile in Firestore. We will demonstrate several key concepts related to building reactive UIs with realtime streaming data, including
Global Streams and Observables with RxDart StatefulWidget StreamBuilder Step 0: Prerequisites Install FlutterFire Step 1: Build Out the UI First, let&amp;rsquo;s start with a basic UI. Notice we have placeholders for LoginButton() and UserProfile() - these will be created later in the lesson.</description>
    </item>
    
    <item>
      <title>Flutter Google Maps Setup</title>
      <link>https://fireship.io/snippets/setup-google-maps-flutter/</link>
      <pubDate>Sat, 12 Jan 2019 10:13:59 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-google-maps-flutter/</guid>
      <description>The following guide is designed to get you up and running with Google Maps in Flutter for iOS and Android, as well as device GPS tracking.
Also refer to the official Flutter Google Maps Plugin setup docs as needed.
Google Maps for Flutter Get your Google Maps API Key First, obtain an API key for Google Maps within the context of a Google Cloud Platform project.
iOS Setup file_type_config ios/Runner/AppDelegate.m #include &amp;#34;AppDelegate.</description>
    </item>
    
  </channel>
</rss>
