<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quick Snippets on Fireship</title>
    <link>https://fireship.io/snippets/</link>
    <description>Recent content in Quick Snippets on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Jul 2021 23:11:49 -0400</lastBuildDate><atom:link href="https://fireship.io/snippets/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handle media queries in React with hooks</title>
      <link>https://fireship.io/snippets/use-media-query-hook/</link>
      <pubDate>Thu, 08 Jul 2021 23:11:49 -0400</pubDate>
      
      <guid>https://fireship.io/snippets/use-media-query-hook/</guid>
      <description>Hooks let you use state and other React features without writing a class.
useMediaQuery() This simple hook makes it easy to share &amp;amp;&amp;amp; render components, logic, styling, etc. through the use of media queries from your JSX code.
Create the hook hooks/useMediaQuery.jsx import { useState, useEffect } from &amp;#34;react&amp;#34;; const useMediaQuery = (query) =&amp;gt; { const [matches, setMatches] = useState(false); useEffect(() =&amp;gt; { const media = window.matchMedia(query); if (media.matches !== matches) { setMatches(media.</description>
    </item>
    
    <item>
      <title>Authenticate a Firebase User on the Server</title>
      <link>https://fireship.io/snippets/express-middleware-auth-token-firebase/</link>
      <pubDate>Fri, 22 May 2020 05:56:37 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/express-middleware-auth-token-firebase/</guid>
      <description>The following snippet demonstrates how to setup server-side authentication in Firebase on any node server using Express.js.
Note. If using Firebase Cloud Functions, you can use Callable Functions to automatically handle this type of authentication.
Client-side: Include the ID Token Your client-side code must attach the ID token to the authorization header when making a request to the server. The example below uses the browser&amp;rsquo;s built in fetch API.
file_type_js frontend-app.</description>
    </item>
    
    <item>
      <title>How to use JS with Flutter Web</title>
      <link>https://fireship.io/snippets/using-js-with-flutter-web/</link>
      <pubDate>Sun, 19 Apr 2020 08:00:17 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/using-js-with-flutter-web/</guid>
      <description>Flutter Web opens the door to building progressive web apps (PWAs) entirely in Dart. However, your Dart code will likely need to interop with JavaScript at some point to access browser APIs and/or your own custom JS apps. The following snippet demonstrates how access JS from a Flutter web app.
Using JavaScript in Dart &amp;amp; Flutter Dart.js is a built-in library that can interop with JavaScript.
Add a Script Create a JS file in the web directory and add some functions to it.</description>
    </item>
    
    <item>
      <title>How to Build a CSS Dropdown Menu</title>
      <link>https://fireship.io/snippets/basic-css-dropdown-menu/</link>
      <pubDate>Tue, 24 Mar 2020 12:03:21 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/basic-css-dropdown-menu/</guid>
      <description>The following snippet demonstrates how to build a dropdown menu with CSS (no JavaScript) that maintains its state when clicked. The special sauce in this demo is the :focus-within pseudo selector, which allows the dropdown to stay open when its child links are clicked.
Step 1: Start with a Navigation Bar Start with some navbar markup.
file_type_html &amp;lt;nav class=&amp;#34;navbar&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;navbar-nav&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;Home&amp;lt;/li&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;About&amp;lt;/li&amp;gt; &amp;lt;!-- Dropdown will go here --&amp;gt; &amp;lt;li class=&amp;#34;nav-item&amp;#34;&amp;gt;Login&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; The navbar is just simple flex container.</description>
    </item>
    
    <item>
      <title>Automatic Backups for Firestore via Github Actions</title>
      <link>https://fireship.io/snippets/firestore-automated-backups/</link>
      <pubDate>Thu, 12 Mar 2020 17:20:51 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-automated-backups/</guid>
      <description>As of today, Firestore does not support automatic backups, but it DOES support exports via the gcloud CLI or REST API. Although not technically a backup in database jargon, an automatic export is valuable to have for disaster recovery because it can be re-imported to replace lost data.
The following snippet exports all Firestore data automatically every day at midnight using a scheduled Github Action.
Generate a Service Key on GCP We need a service account to grant Github Actions permission to run the export command via the Google Cloud CLI.</description>
    </item>
    
    <item>
      <title>Delete a Firestore Collection</title>
      <link>https://fireship.io/snippets/delete-firestore-collection/</link>
      <pubDate>Tue, 11 Feb 2020 14:29:28 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/delete-firestore-collection/</guid>
      <description>Deleting an entire collection from Firestore should be handled on a backend server. Collections can grow infinitely large, so deleting a millions of documents can be an excessively large workload to put on a clientside web or mobile app.
Option A - Use the CLI or Console You can manually delete a collection or subcollection from the Firebase Console OR by using the CLI.
command line firebase firestore:delete path-to-delete Option B - Use a Cloud Function It is possible to interact with Firebase Tools from a Cloud Function.</description>
    </item>
    
    <item>
      <title>Handle Radial Pan Events in Flutter</title>
      <link>https://fireship.io/snippets/circular-drag-flutter/</link>
      <pubDate>Mon, 02 Dec 2019 09:19:58 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/circular-drag-flutter/</guid>
      <description>A UI element that is not currently supported out of the box with Flutter is a click wheel, or knob, or radial control, rotatable circle, or whatever you want to call it. The following snippet demonstrates how to take a circular container, then detect which direction the user is rotating (clockwise or counter clockwise) and its velocity.
Full wheel demo source code.
Flutter Circular Pan Wheel Detect Pan Gestures Use a GestureDetector to wrap a container with a BoxShape.</description>
    </item>
    
    <item>
      <title>Access the Index on Dart List.map()</title>
      <link>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</link>
      <pubDate>Sun, 24 Nov 2019 07:55:05 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/dart-how-to-get-the-index-on-array-loop-map/</guid>
      <description>The following snippet demonstrates how to access the iteration index when using List.map. It is a common need in Flutter when looping over or mapping a list of values to widgets.
Problem Unlike JavaScript, one cannot simply access the index of a list during a List.map operation in Dart.
file_type_dartlang main.dart List myList = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]; myList.map( (val, index) { // This does not work! // Which index am I on?</description>
    </item>
    
    <item>
      <title>Firestore Order by Document ID or Field</title>
      <link>https://fireship.io/snippets/firestore-increment-document-id-value/</link>
      <pubDate>Mon, 18 Nov 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-document-id-value/</guid>
      <description>The follow snippet contains strategies for ordering a collections sequentially. For example, you may want a field that increases by 1 after each new document is created. Cloud Firestore does not provide automatic ordering on the auto-generated docIDs, so we need be clever to solve this problem .
Auto-ordering Techniques Timestamp Approach The easiest way to order by creation time is to use a server timestamp. This tells Firestore to add a date to the document based on Google Cloud&amp;rsquo;s backend time, so you&amp;rsquo;re not relying on the client&amp;rsquo;s clock (which is likely to be inaccurate).</description>
    </item>
    
    <item>
      <title>Custom Svelte Store Examples</title>
      <link>https://fireship.io/snippets/custom-svelte-stores/</link>
      <pubDate>Fri, 15 Nov 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/custom-svelte-stores/</guid>
      <description>A store provides a reactive stream of data that can change over time. Creating a custom store in Svelte is easy. It&amp;rsquo;s just a simple matter of creating a writable store in a function and returning its subscribe function on an object.
Custom Store Use-Cases Use-case: Business logic An obvious use case is to create abstractions for your data. You can use writable as a low-level building block for more complex features.</description>
    </item>
    
    <item>
      <title>Setup Google Maps With Svelte 3</title>
      <link>https://fireship.io/snippets/setup-google-maps-with-svelte/</link>
      <pubDate>Thu, 22 Aug 2019 13:31:18 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-google-maps-with-svelte/</guid>
      <description>The following guide will show you how to configure Google Maps with Svelte 3.
Enable the Google Maps JS API First, you must enable Google Maps with a Google Cloud or Firebase project, then grab your API from the credentials tab.
Enable the Google Maps JavaScript API from a GCP or Firebase project.
Detect when Google Maps is Ready Google Maps will be loaded asynchronously and the script can notify us when it is ready by calling a callback function.</description>
    </item>
    
    <item>
      <title>Setup Nest on Cloud Functions</title>
      <link>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</link>
      <pubDate>Mon, 12 Aug 2019 10:26:16 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-nestjs-on-cloud-functions/</guid>
      <description>The following snippet demonstrates two different techniques for setting up NestJS on Firebase Cloud Functions.
Option A - Point a Function to Nest The first setup modifies the functions configuration to use the Nest /dist output, as opposed to the default functions directory. This option is ideal if you have an existing Nest app.
Step 1 - Create Nest App command line nest generate app server Step 2 - Add Functions Add functions, then delete the automatically generated directory.</description>
    </item>
    
    <item>
      <title>Cron Example Schedules</title>
      <link>https://fireship.io/snippets/crontab-crash-course/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/crontab-crash-course/</guid>
      <description>Cron is a long-running process used on Linux servers that ticks at specific times based on the crontab pattern (with a minimum of 1 minute of granularity). It is used to setup cronjobs, which are background tasks that get executed at a specific time or interval. Also, Firebase now has a time-triggered Cloud Function that can be set with crontab. The following guide will teach you how to schedule cronjobs in this format.</description>
    </item>
    
    <item>
      <title>How to Use Firestore Increment</title>
      <link>https://fireship.io/snippets/firestore-increment-tips/</link>
      <pubDate>Mon, 08 Apr 2019 07:41:02 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-increment-tips/</guid>
      <description>One of the common challenges faced when working with Firestore is maintaining an accurate count of a value on a document (or multiple documents). One cannot simply update a counter and expect it to be accurate because many clients might be competing to update the same value simultaneously. The solution to this problem has traditionally been to deploy a Cloud Function that runs the update in a transaction to guarantee an atomic update.</description>
    </item>
    
    <item>
      <title>Flutter Skeleton Text with Shimmer Animation</title>
      <link>https://fireship.io/snippets/flutter-skeleton-text/</link>
      <pubDate>Tue, 19 Mar 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/flutter-skeleton-text/</guid>
      <description>Skeleton text is a strategy that improves the perceived load time of content by rendering a blank placeholder that roughly matches the size of the expected content. This method was originally made popular by Facebook, but is now used on many popular apps and websites.
Use this skeleton text widget as a placeholder when loading data from an external source.
Flutter Skeleton Text Widget The skeleton text effect can be created in Flutter with an animated loop over a color gradient.</description>
    </item>
    
    <item>
      <title>GitHub Action deploying Angular App to Firebase Hosting</title>
      <link>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</link>
      <pubDate>Tue, 19 Feb 2019 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</guid>
      <description>This snippet helps you to setup GitHub Actions in your Angular project to build and deploy your app to Firebase on git push.
Step 1. Actions In your repository click on Actions.
Step 2. New Workflow To create your first workflow click on Set up a workflow yourself
Your first GitHub action looks like this:
main.yml name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Run a one-line script run: echo Hello, world!</description>
    </item>
    
    <item>
      <title>Intersection Observer for Lazy-Loaded Images</title>
      <link>https://fireship.io/snippets/intersection-observer-lazy-load-images/</link>
      <pubDate>Fri, 25 Jan 2019 05:48:23 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/intersection-observer-lazy-load-images/</guid>
      <description>IntersectionObserver is a browser API that allows you to detect when an element is visible in the window or within a scrollable element. Browser support is pretty decent with Safari being the main holdout at the time of this article, but there is a polyfill to support Apple users.
Packages using IntersectionObserver:
QuickLink - Adds a preload tag to visible links on the page. Vanilla Lazy Load - Lazy loaded images.</description>
    </item>
    
    <item>
      <title>How to Participate on Github</title>
      <link>https://fireship.io/snippets/git-how-to-participate-on-github/</link>
      <pubDate>Thu, 17 Jan 2019 05:42:54 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/git-how-to-participate-on-github/</guid>
      <description>Contributing to open-source is satisfying on many levels. Not only does it validate your skills for recruiters, but it leads to higher quality software that empowers developers to build better products. But submitting your first pull request on GitHub can be intimidating. The goal of this guide is to give you a clear set of steps for contributing any OS project (like fireship.io 🔥).
This guide assumes that you have a Github account and git installed on your machine.</description>
    </item>
    
    <item>
      <title>Flutter Google Maps Setup</title>
      <link>https://fireship.io/snippets/setup-google-maps-flutter/</link>
      <pubDate>Sat, 12 Jan 2019 10:13:59 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/setup-google-maps-flutter/</guid>
      <description>The following guide is designed to get you up and running with Google Maps in Flutter for iOS and Android, as well as device GPS tracking.
Also refer to the official Flutter Google Maps Plugin setup docs as needed.
Google Maps for Flutter Get your Google Maps API Key First, obtain an API key for Google Maps within the context of a Google Cloud Platform project.
iOS Setup file_type_config ios/Runner/AppDelegate.m #include &amp;#34;AppDelegate.</description>
    </item>
    
    <item>
      <title>Firestore Security Rules Cookbook</title>
      <link>https://fireship.io/snippets/firestore-rules-recipes/</link>
      <pubDate>Wed, 02 Jan 2019 09:35:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/firestore-rules-recipes/</guid>
      <description>The purpose of this reference is to demonstrate common Firestore security rules patterns. Many of the rules below are extracted into functions to maximize code reuse.
Basic Recipes Let&amp;rsquo;s start with some common Firestore security use cases needed by almost every app.
At runtime, Firebase rules look for the first valid allow == true rule and NOT vice-versa. This is very important to keep in mind, as you might think you secured a path, only for it to be allowed somewhere else.</description>
    </item>
    
    <item>
      <title>How to Pass Data to Modals in Ionic</title>
      <link>https://fireship.io/snippets/use-componentprops-to-pass-data-to-modals-in-ionic-4/</link>
      <pubDate>Sat, 22 Sep 2018 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/use-componentprops-to-pass-data-to-modals-in-ionic-4/</guid>
      <description>The snippet below shows you how to use componentProps to pass data into an Ionic 4 modal. This technique is useful when updating dynamic data.
Pass Data into Ionic4 Modals In previous versions of Ionic, the NavParams class was used to read the passed data. This is no longer necessary and should not be used, although it does still work technically. In version 4, sharing data with a modal is easier than ever&amp;hellip;</description>
    </item>
    
    <item>
      <title>Testing RxJS Observables With Jest</title>
      <link>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</link>
      <pubDate>Sat, 18 Aug 2018 18:39:19 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</guid>
      <description>The snippet below shows you how to test asynchronous RxJS Observables with Jest. It&amp;rsquo;s probably easier than you think.
Testing a Single Emitted Value Let&amp;rsquo;s imagine we have an Observable that should emit a string, which we can create with the of helper. The key to making this test work is passing it the the done keyword, otherwise it will finish before the data is emitted.
You can then write your expectations inside of the the subscribe callback, then call done() when you&amp;rsquo;re ready for the test to finish.</description>
    </item>
    
  </channel>
</rss>
