<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on Fireship</title>
    <link>https://fireship.io/tags/angular/</link>
    <description>Recent content in Angular on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2019 07:27:03 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/angular/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Javascript 2020 Predictions</title>
      <link>https://fireship.io/lessons/javascript-2020-predictions/</link>
      <pubDate>Mon, 16 Dec 2019 07:27:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/javascript-2020-predictions/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Graphql Basics Tutorial</title>
      <link>https://fireship.io/lessons/graphql-basics-tutorial/</link>
      <pubDate>Mon, 07 Oct 2019 09:38:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/graphql-basics-tutorial/</guid>
      <description>GraphQL has been one of the fastest growing web technologies over the past few years. This lesson covers the basics of GraphQL and demonstrates how to build an Angular app that fetches data with Apollo via the public SpaceX API.
üôè Special thanks to Arjun for producing the code for this demo! Head over to github for the Full Lesson and give it a ‚≠ê.</description>
    </item>
    
    <item>
      <title>Ionic 4 Firebase Master Course</title>
      <link>https://fireship.io/courses/ionic/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/ionic/</guid>
      <description>The Ionic4 Master Course will teach you the fundamentals of full-stack cross-platform app development, using the combined powers of Angular &amp;amp; Firebase.
üóø What will I build? This is a project-based course that starts from zero and works up to an authenticated realtime todo list with push notifications. While that may not sound super exciting, it provides an ideal foundation to showcase the UI features offered by Ionic and connent them to live cloud infrastructure.</description>
    </item>
    
    <item>
      <title>The Angular Firebase Project Course</title>
      <link>https://fireship.io/courses/angular/</link>
      <pubDate>Sat, 24 Aug 2019 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/angular/</guid>
      <description>üç± What will I build? The Angular Firebase PWA Course will teach you how to build a complex progressive web app with Angular 12 (ivy), Material Design, and Firebase. It starts from absolute basics and eventually culminates with the deployment of a server-rendered PWA on Google Cloud Run.
You will build a full-stack Kanban (ÁúãÊùø) storyboard app inspired by Trello. Authenticated users can create, sort, update, and delete boards with all interaction persisted in Firestore.</description>
    </item>
    
    <item>
      <title>Build a Chatbot With Dialogflow</title>
      <link>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</link>
      <pubDate>Mon, 12 Aug 2019 09:45:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-a-chatbot-with-dialogflow/</guid>
      <description>Chatbots make it possible for the average developer to deliver excellent (and affordable) customer service at scale - Building conversational experiences has never been easier thanks to the Dialogflow conversation platform.
Dialogflow is a free tool on Google Cloud for creating voice and text conversational interfaces. It uses Natural Language Processing NLP technology, allowing you to create experiences similar to Google Assistant or Amazon Alexa. In following lesson creates a chatbot from scratch in the three main steps:</description>
    </item>
    
    <item>
      <title>PayPal Checkout</title>
      <link>https://fireship.io/lessons/paypal-checkout-frontend/</link>
      <pubDate>Sun, 23 Jun 2019 06:44:00 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/paypal-checkout-frontend/</guid>
      <description>In February 2019, the PayPal Checkout API received a much needed facelift that brought massive improvements to the developer experience. The new v2 API has detailed documentation on par with Stripe and offers one of the smoothest paths to start accepting payments and/or subscriptions in a progressive web app. The following lesson will show you how to start accepting payments entirely from your frontend JavaScript code with PayPal Checkout with your choice of Angular, React, and Vue.</description>
    </item>
    
    <item>
      <title>Firebase Performance Quickstart</title>
      <link>https://fireship.io/lessons/firebase-performance-quickstart/</link>
      <pubDate>Thu, 09 May 2019 15:45:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-performance-quickstart/</guid>
      <description>Firebase announced Performance Monitoring for the Web at Google I/O 2019 - a long-awaited feature for Progressive Web Apps. It provides a simple way to add robust performance analytics to your app with minimal effort, while also adding the ability to run custom traces in your code. In the following lesson, you will learn how to add this new tool to any web app and setup traces to find performance bottlenecks.</description>
    </item>
    
    <item>
      <title>Stripe Elements and Checkout with Angular</title>
      <link>https://fireship.io/lessons/stripe-elements-angular/</link>
      <pubDate>Mon, 04 Mar 2019 08:48:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/stripe-elements-angular/</guid>
      <description>üí∞ Are you building a payment solution with Stripe? Consider enrolling the Stripe JavaScript Master Course.
Stripe provides several JavaScript libraries - Stripe Elements &amp;amp; Checkout - that makes it easy to collect and validate payment sources like credit cards, bank accounts, and more. The following lesson will show you how to integrate Stripe&amp;rsquo;s clientside JS packages into an Angular application.
Step 0. Prerequisites This lesson only covers the frontend code.</description>
    </item>
    
    <item>
      <title>GitHub Action deploying Angular App to Firebase Hosting</title>
      <link>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</link>
      <pubDate>Tue, 19 Feb 2019 23:12:09 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/github-actions-deploy-angular-to-firebase-hosting/</guid>
      <description>This snippet helps you to setup GitHub Actions in your Angular project to build and deploy your app to Firebase on git push.
Step 1. Actions In your repository click on Actions.
Step 2. New Workflow To create your first workflow click on Set up a workflow yourself
Your first GitHub action looks like this:
main.yml name: CI on: [push] jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v1 - name: Run a one-line script run: echo Hello, world!</description>
    </item>
    
    <item>
      <title>Upload Multiple Files to Firebase Storage with Angular</title>
      <link>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</link>
      <pubDate>Mon, 18 Feb 2019 13:45:50 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-firebase-storage-uploads-multi/</guid>
      <description>Firebase makes it easy to upload a huge payload of raw files a cloud storage bucket. The following lesson will teach you how to upload files to Firebase Storage with Angular, including several advanced concepts about how to&amp;hellip;
Handle multiple simultaneous concurrent file uploads. Save the resulting download URL to Firestore. Display a progress bar and provide UI controls to pause, cancel, and resume uploads. This post first appeared as Episode 82 on AngularFirebase.</description>
    </item>
    
    <item>
      <title>Angular Router Animations Guide</title>
      <link>https://fireship.io/lessons/angular-router-animations/</link>
      <pubDate>Sun, 10 Feb 2019 07:42:41 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-router-animations/</guid>
      <description>Smooth animated router transitions will impress your users and set your app apart from the crowd. In the following lesson, you will learn how to build complex router transition animations in Angular.
Here&amp;rsquo;s a summary of the animations that we will build from scratch.
fader basic fade in slider slide in from left or right transformer translate, scale, and rotate stepper complex keyframed animation sequences Router Animations Setup Let&amp;rsquo;s start by taking care of the initial Angular Router animations boilerplate.</description>
    </item>
    
    <item>
      <title>TypeScript Decorators by Example</title>
      <link>https://fireship.io/lessons/ts-decorators-by-example/</link>
      <pubDate>Sun, 03 Feb 2019 09:39:23 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ts-decorators-by-example/</guid>
      <description>One of coolest, yet least approachable features in TypeScript is the Decorator. We see Decorators implemented by the Angular Framework for classes like @Component, properties like @ViewChild, and methods like @HostListener, but have you ever considered building your own from scratch? They seem magical üçÑ in practice, but they are just JavaScript functions that allow us to annotate our code or hook into its behavior - this is known as Metaprogramming.</description>
    </item>
    
    <item>
      <title>Realtime Presence with Angular &#43; Firebase</title>
      <link>https://fireship.io/lessons/realtime-presence-angular-firebase/</link>
      <pubDate>Sun, 27 Jan 2019 14:04:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/realtime-presence-angular-firebase/</guid>
      <description>Social media and chat apps (think Slack, Facebook Messenger, etc) often have presence detection systems that can indicate if your friends are online, offline, or away. Traditionally, features like this have been challenging because you need manage state between the client &amp;amp; server, but the Firebase RealtimeDB makes it easy. The following lesson will show you how to build a realtime user presence system with Angular and Firebase.
The browser on the left shows the actual user activity, while the browser on the right is just a neutral observer of the presence changes</description>
    </item>
    
    <item>
      <title>Angular Universal SSR with Firebase</title>
      <link>https://fireship.io/lessons/angular-universal-firebase/</link>
      <pubDate>Tue, 22 Jan 2019 08:27:40 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-universal-firebase/</guid>
      <description>Nothing beats the user experience of a single page JS app on the web, but you sacrifice the ability to share metatags with social media bots and search engines on deep links. Fortunately, you can overcome this limitation with server-side rendering (SSR) via Angular Universal.
The following lesson will show you how to setup Angular Universal with ExpressJS. In addition, you will learn how to deploy the app with (1) Node via AppEngine or (2) Firebase Cloud Functions - both of which are are on the free tier.</description>
    </item>
    
    <item>
      <title>Google OAuth with @angular/fire</title>
      <link>https://fireship.io/lessons/angularfire-google-oauth/</link>
      <pubDate>Sat, 29 Dec 2018 06:51:33 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angularfire-google-oauth/</guid>
      <description>A solid user authentication system is the bedrock of most web applications. In fact, when starting a new project I genernally focus on user auth first because so many other features depend the user&amp;rsquo;s auth state. The following lesson will show you how to build an OAuth authentication feature using the Google sign-in method. In addition, we will save custom user data to the Firestore database, making it possible to customize a user&amp;rsquo;s profile and/or query all users.</description>
    </item>
    
    <item>
      <title>Infinite Virtual Scroll with the Angular CDK</title>
      <link>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</link>
      <pubDate>Sun, 21 Oct 2018 18:16:07 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-virtual-scroll-angular-cdk/</guid>
      <description>The release of Angular v7 gives us access to a new virtual scroll behavior in the Material Component Development Kit (CDK). It provides tools for looping over a lists that only render elements when they are visible in the viewport, preventing lag an janky-ness in the browser. As an added bonus, it exposes a reliable API for building an infinite scroll where new batches of data are retrieved automatically when the user scrolls to the bottom of the list.</description>
    </item>
    
    <item>
      <title>Group Chat with Firestore</title>
      <link>https://fireship.io/lessons/build-group-chat-with-firestore/</link>
      <pubDate>Sun, 14 Oct 2018 18:11:02 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-group-chat-with-firestore/</guid>
      <description>One of the most compelling reasons to choose Firebase as your backend is to meet the demands of complex realtime features, like group chat. Managing state between multiple clients in realtime is a major undertaking, but with Firebase it becomes almost trivial. The following lesson will teach you how to build a simple group chat app with Cloud Firestore.
This lesson is accompanied by a real demo! Give Firestore Mega Chat a whirl.</description>
    </item>
    
    <item>
      <title>Ionic Routing and Navigation Guide</title>
      <link>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</link>
      <pubDate>Tue, 04 Sep 2018 17:43:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic-4-routing-and-navigation-guide/</guid>
      <description>The single most important change from Ionic v3 to v4 is how routing and navigation is handled. In the past, Ionic used its own push-pop NavController, but has since decieded to use the Angular Router directly. This is a very smart move in my opinion because Angular&amp;rsquo;s router is just so powerful - but it does have a bit of a learning curve. In the following lesson, you will learn the fundamental concepts required to be successful with routing and navigation in Ionic 4.</description>
    </item>
    
    <item>
      <title>Ionic Intro Slider for New Users</title>
      <link>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</link>
      <pubDate>Sun, 19 Aug 2018 15:16:55 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ionic4-intro-slides-tutorial-to-educate-app-users/</guid>
      <description>A useful intro slider is a sign of a highly polished mobile app. A quick tutorial for using your app provides an excellent user experience and can reduce bounce rates for new users.
In the following lesson, you will learn how to use the slider component in Ionic 4 to build a multi-step introduction that educates users how to use your app.
Ionic slides as an app tutorial for new users</description>
    </item>
    
    <item>
      <title>Auto-save Reactive Form with Firestore</title>
      <link>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</link>
      <pubDate>Mon, 28 May 2018 14:17:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/auto-save-reactive-forms-with-firestore/</guid>
      <description>Forms are one of the most critical, yet most cumbersome aspects of app development. They require a ton of HTML markup and require complex validation rules for a good user experience. Almost all forms must be synced to a backend database, leaving us faced a state management conundrum that is not always easy to solve. In this lesson, my goal is to provide you with a reliable solution for syncing your frontend forms to any backend database.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Basics Guide</title>
      <link>https://fireship.io/lessons/basics-reactive-forms-in-angular/</link>
      <pubDate>Mon, 21 May 2018 14:03:18 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/basics-reactive-forms-in-angular/</guid>
      <description>As part of the Angular Basics Series, we will be taking a comprehensive look at Reactive Forms from the ground up. The official documentation is a very long read, so this guide is designed to help you master the basics by focusing on the bare essential concepts you must know.
Reactive Forms for PROs Advanced Auto-saving Firestore Form Email/Password Auth with Reactive Forms 1. Reactive Forms Fundamentals At this point, it is assumed that you have an existing Angular project started with the CLI v6+.</description>
    </item>
    
    <item>
      <title>Build an Angular Library With NgPackagr</title>
      <link>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</link>
      <pubDate>Wed, 02 May 2018 13:55:36 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-an-angular-library-with-ngpackagr/</guid>
      <description>In this lesson, I will show you how to build an Angular Library from scratch using NgPackagr. My main motivation for this article is that Google Analytics recently changed their main API to gtag.js, but solid Angular libraries were lacking, so I decided to build one from scratch. NgPackagr made the bundling process very easy.
Angular packages are standardized by the Angular Package Format, but generating this output manually is difficult.</description>
    </item>
    
    <item>
      <title>Angular Elements Guide</title>
      <link>https://fireship.io/lessons/angular-elements-quick-start-guide/</link>
      <pubDate>Sun, 29 Apr 2018 13:43:49 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-elements-quick-start-guide/</guid>
      <description>It is exciting to finally see the adoption of web components going mainstream. There are many tools available for building them, but none can match the power and stability of Angular Elements. The following lesson will provide a handful of useful techniques aimed at building complex production-ready custom elements.
In addition to this post, check out these resources:
Manfred Steyer&amp;rsquo;s Angular Elements Series Sam Julian&amp;rsquo;s Getting Started with Angular Elements Nrwl&amp;rsquo;s Five Reasons to Use Angular Elements Angular Elements QuickStart Rendering without Zone.</description>
    </item>
    
    <item>
      <title>NGXS Quick Start</title>
      <link>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</link>
      <pubDate>Fri, 06 Apr 2018 13:32:39 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/ngxs-quick-start-angular-state-management/</guid>
      <description>In this lesson we will get up and running with NGXS - a redux-style state management system for Angular. My goal in this lesson is to get you familiar with the core concepts that underpin this library and make some balanced comparisons to NgRx.
This article is a work in progress. Let me know what you think about NGXS in the comments. NgRx vs NGXS The big question on everybody&amp;rsquo;s mind is how does NGXS compare to NgRx?</description>
    </item>
    
    <item>
      <title>Typeahead Autocomplete with Firestore</title>
      <link>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</link>
      <pubDate>Tue, 20 Feb 2018 14:40:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/typeahead-autocomplete-with-firestore/</guid>
      <description>In this lesson, we will build a basic typeahead or autocomplete system using nothing but Firestore. It relies on an object/map data structure that exposes some of the more advanced query patterns available to us. The database contains a collection of movie documents, and our goal is to build a search form that will auto-populate results based on the movie&amp;rsquo;s title.
Typeahead demo using only Firestore
Method 1: Offset with the Magic uf8ff Character A few months ago I created a RealtimeDB Autocomplete lesson that uses &#39;\uf8ff&#39;, which is a very high Unicode point.</description>
    </item>
    
    <item>
      <title>Angular Reactive Forms Async Validation</title>
      <link>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</link>
      <pubDate>Sat, 10 Feb 2018 15:40:26 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/async-form-validation-in-firebase-enforce-uniqueness/</guid>
      <description>Reactive form validation can be a complex and difficult feature to implement, especially if you need to validate fields asynchronously. Angular ships with a few built-in validators, but they can only take you so far&amp;hellip;
Today, we are building a custom async validator that can verify username uniqueness in Firebase Firestore. My goal is to show you async validator for your reactive forms that you can apply to virtually any backend data source.</description>
    </item>
    
    <item>
      <title>Mobile Touch Animation with HammerJS</title>
      <link>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</link>
      <pubDate>Thu, 28 Dec 2017 14:17:38 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/hammerjs-angular-5-animations-for-mobile-gestures-tutorial/</guid>
      <description>If your app targets users on mobile devices (80% of apps do), then you should carefully consider the impact of touch gestures, i.e. swipe, tap, pinch, etc. In this lesson, I will show you how to listen to touch gestures with HammerJS, then apply cool animations to them with Angular.
In addition, we will learn how to customize the configuration of HammerJS and build our own custom events beyond the basic ones provided.</description>
    </item>
    
    <item>
      <title>Material Data Tables With Firestore</title>
      <link>https://fireship.io/lessons/material-data-tables-with-firestore/</link>
      <pubDate>Tue, 12 Dec 2017 05:49:37 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/material-data-tables-with-firestore/</guid>
      <description>In this lesson, I will show you how to build an Angular Material data datable that is sortable and filterable, while maintaining a realtime connection with Firestore. A dialog modal will be used share data between material components and update documents in Firestore.
This tutorial also makes suggestions for performance optimization when dealing with hundreds rows in the view. The end result is a table that&amp;hellip;
Uses Firebase/Firestore as the data source.</description>
    </item>
    
    <item>
      <title>Role Based Authorization With Firestore</title>
      <link>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</link>
      <pubDate>Thu, 07 Dec 2017 05:39:29 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/role-based-authorization-with-firestore-nosql-and-angular-5/</guid>
      <description>Learn more about data modeling in Firestore in the full course.
In this lesson, I will show you how to assign roles to users with the Firestore NoSQL database, then secure them on both the frontend and backend. This feature is known as role-based access control and is commonly used in forums, social media, etc - Stack Overflow Privileges is an excellent specimen of this feature in the wild (minus the ranking system).</description>
    </item>
    
    <item>
      <title>PWA Performance Optimization Tips</title>
      <link>https://fireship.io/lessons/pwa-performance-optimization-angular/</link>
      <pubDate>Sat, 25 Nov 2017 12:27:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/pwa-performance-optimization-angular/</guid>
      <description>The following lesson contains a handful of tips and ideas aimed at optimizing the Lighthouse PWA performance score. Any good optimization starts with a solid analysis, so I will also provide you with some advanced tools for analyzing the performance for your progressive web app.
High Performance PWAs with Angular PWA performance is largely dependent on the way you design your app. In this demo, I am following the PRPL pattern from Polymer as closely as possible.</description>
    </item>
    
    <item>
      <title>Multi-step Reactive Form for Email-Password Signup</title>
      <link>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</link>
      <pubDate>Sun, 12 Nov 2017 12:05:03 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/multi-step-signup-firebase-email-password-auth-angular-reactive-forms/</guid>
      <description>Firebase password auth can be configured with a few lines of code, but what happens if you need additional custom user data before authorizing activity in your app? In this lesson, my goal is to show you several important concepts.
Email/Password Auth Reactive Forms in Angular Security with custom Firebase user data What are we Building? This lesson is based off of the [Firstarter PWA starter app](https://firestarter-96e46.firebaseapp.com/), which is organized into NgModules.</description>
    </item>
    
    <item>
      <title>Middleware for Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</link>
      <pubDate>Wed, 08 Nov 2017 11:57:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-2-firebase-cloud-functions-middleware-for-rendertron/</guid>
      <description>In Angular SEO Part 1, I introduced the awesomeness of Headless Chrome and Rendertron. The only thing missing is the middleware that can determine if incoming traffic is a bot or a regular user. Rendertron has officially supported Express middleware or you can create your own from scratch using Firebase Cloud Functions. As you will see, it&amp;rsquo;s not all that difficult.
This method works really well with Firebase and here&amp;rsquo;s why&amp;hellip;</description>
    </item>
    
    <item>
      <title>Angular SEO with Rendertron</title>
      <link>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</link>
      <pubDate>Mon, 06 Nov 2017 11:43:06 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/seo-angular-part-1-rendertron-meta-tags/</guid>
      <description>‚ö†Ô∏è As of 2020, SEO and SSR in Angular is much-improved. Consider Angular Universal as your first option before this approach.
The single most common question I receive is How do I make Angular SEO friendly. Usually my answer is Well, it&amp;rsquo;s complicated&amp;hellip; no more. Today I bring you a simple solution to this very important problem.
I am going to show you a novel SEO strategy to make an Angular5 (or any Progressive Web App for that matter) visible to search engine crawlers and social media link preview bots.</description>
    </item>
    
    <item>
      <title>Star Ratings System With Firestore</title>
      <link>https://fireship.io/lessons/star-ratings-system-with-firestore/</link>
      <pubDate>Tue, 17 Oct 2017 11:17:30 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/star-ratings-system-with-firestore/</guid>
      <description>In this lesson, we will build a five-star rating system from scratch with Angular and Firebase.
Knowing how to implement star reviews in Angular is an important skill for a developer because the same concepts are used for likes, hearts, votes, and many other common UX features.
Firestore Data Structure How do we model star-ratings in a NoSQL database like firestore? In the SQL world, this is known as a many-to-many-through` relationship where Users have many Movies through Reviews AND Movies have many Users through Reviews</description>
    </item>
    
    <item>
      <title>Http With Angular Quick Start</title>
      <link>https://fireship.io/lessons/http-with-angular-quick-start/</link>
      <pubDate>Wed, 11 Oct 2017 10:56:12 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/http-with-angular-quick-start/</guid>
      <description>In this lesson, we are going to use the Angular HTTP Client to make API calls to an API endpoint to retrieve data. My goal is to teach you the fundamental concepts needed to start using one of the thousands of RESTful APIs in the world.
This lesson uses the newer `HttpClientModule` introduced in Angular 4.3, not to be confused with the old standalone HttpModule.
To simulate requests to a real API we are using JSONPlaceholder.</description>
    </item>
    
    <item>
      <title>Infinite Scroll Firestore Angular</title>
      <link>https://fireship.io/lessons/infinite-scroll-firestore-angular/</link>
      <pubDate>Wed, 11 Oct 2017 05:26:11 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/infinite-scroll-firestore-angular/</guid>
      <description>A few months ago, I showed you how to create a basic infinite scroll feature using Realtime Database. Today, we will create a more sophisticated and flexible pagination service with Firestore to facilitate infinite scroll.
As an added bonus, the feature will be able to scroll upwards, which is useful when scrolling back in time through a text feed - think Facebook Messenger or Slack.
Get the [Firestore Pagination source code](https://github.</description>
    </item>
    
    <item>
      <title>Build a Weather App with Angular</title>
      <link>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</link>
      <pubDate>Mon, 09 Oct 2017 11:07:52 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/weather-app-with-the-angular-http-client-and-dark-sky-api/</guid>
      <description>In this lesson, you will learn how to retrieve weather data from an API and use it in a frontend Angular app. A secure backend built with Firebase Cloud Functions will make the HTTP request to ensure sensitive data is not exposed in Angular.
The end result looks like this, but you will have access to whole bunch of weather data to completely customize the user experience.
Weather forecasting app demo</description>
    </item>
    
    <item>
      <title>Desktop Apps with Electron and Angular</title>
      <link>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</link>
      <pubDate>Thu, 21 Sep 2017 06:56:25 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/desktop-apps-with-electron-and-angular/</guid>
      <description>In this lesson, you will learn how to build native desktop apps with Angular and Electron. You might be surprised how easy it is to start building high-quality desktop apps for any platform, or even port your existing Angular app to native desktop platforms.
This lesson covers the following topics:
Configure Electron 1.7 with Angular. Build a simple timer app in Angular. Package the app for install on Windows 10, macOS, and Linux Ubuntu.</description>
    </item>
    
    <item>
      <title>Angular NgRx Starter Guide</title>
      <link>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</link>
      <pubDate>Sun, 27 Aug 2017 06:25:17 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-ngrx-redux-starter-guide/</guid>
      <description>The Redux JavaScript library was made famous by React and Elm, but its design patterns can also be applied in Angular. The general idea is that all application data is kept in a single JavaScript object on the client, giving you a predictable tree of state changes (we&amp;rsquo;ll get into this later). In this lesson, we are going to build a simple NgRx Angular app from scratch, that will eventually become this NgRx-Fire demo app.</description>
    </item>
    
    <item>
      <title>Build Realtime Maps with Mapbox GL</title>
      <link>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</link>
      <pubDate>Fri, 28 Jul 2017 04:59:58 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/build-realtime-maps-in-angular-with-mapbox-gl/</guid>
      <description>In this lesson, I am going to cover the basics of building realtime map features with Angular4, Firebase, and MapBox. Here‚Äôs a highlight of what is covered in the code below. How to obtain a user‚Äôs current location How to connect Firebase data with Mapbox How to format GeoJSON data. How to quickly customize map styles. realtime interaction between two maps
Initial Setup Start by signing up for a free Mapbox account, then installing mapbox-gl in your Angular project.</description>
    </item>
    
    <item>
      <title>Angular Animations Examples</title>
      <link>https://fireship.io/lessons/angular-animations-examples/</link>
      <pubDate>Mon, 24 Jul 2017 04:50:44 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-animations-examples/</guid>
      <description>Animation is often the X-factor that sets remarkable apps apart from average apps. In this lesson, I provide five basic animation examples based on Angular 4.3+. This article covers the animation techniques I find most useful when building Angular apps, but check out this excellent post on new Angular 4.2 animation features for a more comprehensive look at the latest features.
All animations can be boiled down into two simple steps:</description>
    </item>
    
    <item>
      <title>Firebase Phone Authentication</title>
      <link>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</link>
      <pubDate>Wed, 19 Jul 2017 04:34:42 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/firebase-phone-authentication-with-angular-4-tutorial/</guid>
      <description>Signing up users with a phone number adds certain degree of trust or confidence to an app. In this lesson, we are going to use the new phone authentication paradigm from Firebase in our Angular 4 app. At this time, phone auth is not supported in AngularFire, so we will use the firebase JavaScript SDK directly. Phone auth can also be used to link accounts, providing an effective solution for two-factor authentication.</description>
    </item>
    
    <item>
      <title>Facebook-Inspired Reactions From Scratch</title>
      <link>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</link>
      <pubDate>Wed, 05 Jul 2017 16:00:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/facebook-inspired-reactions-from-scratch-with-angular-and-firebase/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build a Facebook-inspired reaction component. It works by mapping each reaction type to an integer then saves it with an associated userId. This is similar to the reddit voting system lesson, with some added complexity to manage the various reaction types. Importing the Graphics First, let‚Äôs add some graphics to the assets folder.</description>
    </item>
    
    <item>
      <title>Angular Toast Message Notifications From Scratch</title>
      <link>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</link>
      <pubDate>Mon, 03 Jul 2017 15:50:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/angular-toast-message-notifications-from-scratch/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices.
In this lesson, we are going to build toast notifications from scratch with Angular 4. There are a couple of good Angular toast packages that solve this problem, but it‚Äôs not very hard to do from scratch. This implementation provides a feed of 5 messages/notifications, which the user can dismiss by clicking. A service will manage the notifications, so they can be observed or updated from any component.</description>
    </item>
    
    <item>
      <title>Twitter Inspired Follow System with Firebase</title>
      <link>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</link>
      <pubDate>Tue, 27 Jun 2017 15:36:01 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/twitter-inspired-follow-system-with-firebase-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
The idea of user following and unfollowing has been around since the rise of Twitter, but add this feature into an app is not as easy as you might think. It is an inherently relational problem, so making it work with a NoSQL database requires some tradeoffs. In this lesson, we are going to build twitter-inspired follow and unfollow feature using on Firebase and Angular 4.</description>
    </item>
    
    <item>
      <title>Custom Usernames With Firebase Authentication and Angular</title>
      <link>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</link>
      <pubDate>Sat, 24 Jun 2017 15:27:32 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/custom-usernames-with-firebase-authentication-and-angular/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app and the custom Firebase Usernames tutorial.
Firebase authentication is super convenient, but you can‚Äôt easily assign custom usernames out of the box. In this lesson, we are going to give users custom usernames and asynchronously validate their availability during the signup process. On every keyup, the username will be checked for duplicates, so we can display a helpful message to the user.</description>
    </item>
    
    <item>
      <title>Reddit Style Upvoting in Angular 4 and Firebase</title>
      <link>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</link>
      <pubDate>Fri, 23 Jun 2017 15:09:54 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reddit-style-upvoting-in-angular-4-and-firebase-nosql/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
Upvoting and downvoting is an excellent ay handle community-driven content curation. Reddit is the most famous example of this feature, but it is common throughout the interwebs on places like StackOverflow, Kaggle, and others. In this lesson, we will use Angular 4 and Firebase to implement upvoting with ease.</description>
    </item>
    
    <item>
      <title>Sharing Data between Angular Components - Four Methods</title>
      <link>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</link>
      <pubDate>Thu, 20 Apr 2017 14:13:20 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/sharing-data-between-angular-components-four-methods/</guid>
      <description>Learning Angular? Check out the full Angular 9 Course
Data sharing is an essential concept to understand before diving into your first Angular project. In this lesson, I provide four different methods for sharing data between Angular components.
The Parent-Child-Sibling structure of our Angular app.
Parent to Child: Sharing Data via Input This is probably the most common and straightforward method of sharing data. It works by using the @Input() decorator to allow data to be passed via the template.</description>
    </item>
    
    <item>
      <title>Reactive Crud App With Angular and Firebase Tutorial</title>
      <link>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</link>
      <pubDate>Mon, 10 Apr 2017 13:06:04 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/reactive-crud-app-with-angular-and-firebase-tutorial/</guid>
      <description>‚ö†Ô∏è This lesson has been archived! Check out the Full Angular Course for the latest best practices about building a CRUD app.
We‚Äôre going to be building a basic list of items that you do CRUD to - create, read, update, delete. The feature itself is nothing special, it‚Äôs really just a skeleton that demonstrates how to do the most common operations with Angular and Firebase. The realtime database from Firebase uses NoSQL, so think of CRUD in the following terms.</description>
    </item>
    
  </channel>
</rss>
