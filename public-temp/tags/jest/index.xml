<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jest on Fireship</title>
    <link>https://fireship.io/tags/jest/</link>
    <description>Recent content in jest on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Oct 2018 18:20:34 -0700</lastBuildDate><atom:link href="https://fireship.io/tags/jest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Firestore Security Rules With the Emulator</title>
      <link>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</link>
      <pubDate>Wed, 31 Oct 2018 18:20:34 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-firestore-security-rules-with-the-emulator/</guid>
      <description>ðŸ”¥ Deep dive with the Firestore Security Rules Master Course.
The most exciting announcement (in my opinion) at Firebase Summit 2018 was the local emulator for Firestore and RTDB, making it possible to test security rules locally or on a CI server. If you&amp;rsquo;re brand new to Firebase security, make sure to watch the Firestore Security Rules Guide.
Project Setup The following lesson creates an isolated testing environment solely for testing rules logic.</description>
    </item>
    
    <item>
      <title>Testing RxJS Observables With Jest</title>
      <link>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</link>
      <pubDate>Sat, 18 Aug 2018 18:39:19 -0700</pubDate>
      
      <guid>https://fireship.io/snippets/testing-rxjs-observables-with-jest/</guid>
      <description>The snippet below shows you how to test asynchronous RxJS Observables with Jest. It&amp;rsquo;s probably easier than you think.
Testing a Single Emitted Value Let&amp;rsquo;s imagine we have an Observable that should emit a string, which we can create with the of helper. The key to making this test work is passing it the the done keyword, otherwise it will finish before the data is emitted.
You can then write your expectations inside of the the subscribe callback, then call done() when you&amp;rsquo;re ready for the test to finish.</description>
    </item>
    
    <item>
      <title>Test Firebase Cloud Functions with Jest</title>
      <link>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</link>
      <pubDate>Wed, 23 May 2018 14:25:19 -0700</pubDate>
      
      <guid>https://fireship.io/lessons/testing-cloud-functions-in-firebase/</guid>
      <description>Firebase Cloud Functions makes building a serverless backend easy and fun, but the proper way to write unit tests in this environment is not exactly clear. In this episode, I will show you how to setup a testing environment for your functions and use Jest to implement unit tests.
Jest is my preferred testing framework for Cloud Functions, but the official docs use Mocha, Sinon, and Chai. Either approach works.</description>
    </item>
    
  </channel>
</rss>
