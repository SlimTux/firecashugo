<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>That Weird JavaScript Course on Fireship</title>
    <link>https://fireship.io/courses/javascript/</link>
    <description>Recent content in That Weird JavaScript Course on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 22 Jun 2019 09:12:30 -0800</lastBuildDate><atom:link href="https://fireship.io/courses/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The History of JavaScript</title>
      <link>https://fireship.io/courses/javascript/intro-history/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/intro-history/</guid>
      <description>JavaScript started as a prototype scripting language written by Brendan Eich in 1995 for the Netscape Navigator browser under the working name of &amp;ldquo;Mocha&amp;rdquo;. After being renamed to &amp;ldquo;JavaScript&amp;rdquo;, it was standardized by ECMA International as ECMA-262, or ECMAScript in 1997. The authoritative group of people/orgs in charge of the standard is known as TC-39.
Over the next 25 years, it would see a variety of highs and lows. The most notable releases include</description>
    </item>
    
    <item>
      <title>How JavaScript Works</title>
      <link>https://fireship.io/courses/javascript/intro-how-js-works/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/intro-how-js-works/</guid>
      <description>JavaScript is often described as some variation of &amp;ldquo;high-level, single-threaded, garbage-collected, interpreted (or just-in-time compiled), prototype-based, multi-paradigm, dynamic language with a non-blocking event loop&amp;rdquo;. You may encounter these terms during an JS job interview, but understanding their meaning will help you better understand the behavior of your code. Let&amp;rsquo;s unpack each of these key terms.
Keep in mind, you don&#39;t *need* to know these concepts to start using JavaScript productively. It may take years of development experience before they really start to sink in, so don&#39;t worry if it feels overwhelming.</description>
    </item>
    
    <item>
      <title>How to Run JavaScript Code</title>
      <link>https://fireship.io/courses/javascript/beginner-js-where-to-run/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-where-to-run/</guid>
      <description>In order to follow along with this course, you need to know how and where you run your JavaScript code. You have several options to run your first hello world programming:
Open your editor and create a file named index.js.
file_type_js index.js console.log(&amp;#39;hello world&amp;#39;) How to Run JavaScript from the Command Line Running a JS program from the command line is handled by NodeJS. Start by installing NodeJS on local machine if necessary.</description>
    </item>
    
    <item>
      <title>The JavaScript Survival Guide</title>
      <link>https://fireship.io/courses/javascript/beginner-js-survival-guide/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-survival-guide/</guid>
      <description>The JavaScript Survival Guide is a primer for the so-called &amp;ldquo;weird&amp;rdquo; features of the language. These concepts are common pain-points for developers, but they become relatively simple when you understand relationship between your code and the JS engine. Not to mention, these topics come up frequently on JS interviews.
All research this section is based on the guidance from Mozilla - the holy grail of JS documentation.
Primitive vs Object The lowest level building blocks in JavaScript are primitives, which include: undefined, null, string, number, bigint, boolean, and symbol.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://fireship.io/courses/javascript/beginner-js-functions/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-functions/</guid>
      <description>Functions are the backbone of JavaScript development, but perhaps the most difficult concept to master. The following section defines key concepts related to JS functions with practical examples that you can try on your own.
Anatomy of a Function A function is piece of code that can be called during the lifecycle of the app to perform a task or return a value. A function declaration can be broken down into the following pieces.</description>
    </item>
    
    <item>
      <title>Objects</title>
      <link>https://fireship.io/courses/javascript/beginner-js-objects/</link>
      <pubDate>Tue, 16 Apr 2019 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/beginner-js-objects/</guid>
      <description>The JavaScript object is a collection of key-value pairs, similar to a map, dictionary, or hash-table in other programming languages. Anything that is not a JS primitive is an Object.
An Object is a collection of properties. A Property is a key-value pair that contains a name and a value. A Property Name is a unique value that can be coerced to a string that points to a value. A Property Value can be any value, including other objects or functions, that associated with the name/key.</description>
    </item>
    
    <item>
      <title>The Console</title>
      <link>https://fireship.io/courses/javascript/concepts-console/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/concepts-console/</guid>
      <description>At this point in your JS career, you likely know what console.log does - but the Console API can do so much more! It can be an effective debugging tool, but it can also be nightmare when abused. Let&amp;rsquo;s take a look at some tricks that will keep your console output concise and beautiful. Open the console on your browser by running Ctrl + Shift + J to get started with this section.</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://fireship.io/courses/javascript/concepts-modules/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/concepts-modules/</guid>
      <description>A module is just a file that exports some JavaScript code.
First, a file exports (package) something useful&amp;hellip;
file_type_js awesome-pacakge.js export default &amp;#39;üßÅ&amp;#39;; Second, a different file uses this code by importing it.
file_type_js my-app.js import cupcake from &amp;#39;../path/to/awesome-package.js&amp;#39;; Pretty simple! But there more you should know.
Default Exports A module can specify at most 1 default export.
export default &amp;#39;üßÅ&amp;#39;; This allows the consumer to name the module whatever it prefers when importing.</description>
    </item>
    
    <item>
      <title>Graph Traversal</title>
      <link>https://fireship.io/courses/javascript/interview-graphs/</link>
      <pubDate>Tue, 18 Feb 2020 09:12:30 -0800</pubDate>
      
      <guid>https://fireship.io/courses/javascript/interview-graphs/</guid>
      <description>Graph Representation as Adjacency List A graph can be represented as an adjacency matrix or adjacency list. In most cases, it is more efficient to use the latter because it requires less memory and offers better time-complexity when performing search algorithms.
Imagine we have a dataset that contains airports and routes. We can represent the graph as a Map where each key (node) is an airport and the value (edges) is an array airports that it can connect to.</description>
    </item>
    
    <item>
      <title>Node.js Quickstart</title>
      <link>https://fireship.io/courses/javascript/node-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/node-basics/</guid>
      <description>Step 1 - What is Node? Node is a runtime that allows you to run JavaScript on the server. Learn more in the how JavaScript works section of this course.
Step 2 - Install Node Follow these instructions to install NodeJS. This course uses Node version 12, nvm install 12.
Step 3 - Hello world Create a JavaScript file.
file_type_js index.js console.log(&amp;#39;hello world&amp;#39;) Run it with node.
command line node .</description>
    </item>
    
    <item>
      <title>Deno Quickstart</title>
      <link>https://fireship.io/courses/javascript/deno-basics/</link>
      <pubDate>Wed, 20 May 2020 04:58:32 -0700</pubDate>
      
      <guid>https://fireship.io/courses/javascript/deno-basics/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
