<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Next.js Firebase Full Course on Fireship</title>
    <link>https://fireship.io/courses/react-next-firebase/</link>
    <description>Recent content in Next.js Firebase Full Course on Fireship</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2022 10:23:30 -0900</lastBuildDate><atom:link href="https://fireship.io/courses/react-next-firebase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>README</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-resources/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-resources/</guid>
      <description>I updated my package.json with the versions specified in this lesson? Using other versions could result in broken code
Essentials üöÄ Live Demo üíæ Source code üí¨ Slack Official Resources Next Docs Firebase Docs React Docs Helpful Bonus Content React Dropdown Firebase Data Modeling Course Firebase Security Course Packages It is highly recommended that you follow along with the same package versions show below.
file_type_npm package.json { // ... &amp;#34;dependencies&amp;#34;: { &amp;#34;firebase&amp;#34;: &amp;#34;^8.</description>
    </item>
    
    <item>
      <title>React Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-react-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-react-basics/</guid>
      <description>Which hook will be fired when the component is first mounted or created? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for React. It is not required to build the main demo app in the course.</description>
    </item>
    
    <item>
      <title>Firebase Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-firebase-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-firebase-basics/</guid>
      <description>What is the name of the function used to listen to realtime Firestore data? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for Firebase. It is not required to build the main demo app in the course.
Read the full Firebase lesson here.</description>
    </item>
    
    <item>
      <title>Next.js Basics</title>
      <link>https://fireship.io/courses/react-next-firebase/intro-next-basics/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/intro-next-basics/</guid>
      <description>Where do you define routes in Next.js? ‚ö†Ô∏è Optional This video was originally released on YouTube and is intended to be a primer for Next.js. It is not required to build the main demo app in the course.
Next.js Basics Source Code</description>
    </item>
    
    <item>
      <title>Technical Overview</title>
      <link>https://fireship.io/courses/react-next-firebase/app-technical-overview/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-technical-overview/</guid>
      <description> Which page must be BOTH server and client rendered? </description>
    </item>
    
    <item>
      <title>Next.js Setup</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-setup/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-setup/</guid>
      <description>Create a Next.js App command line npx create-next-app nextfire File Structure components reusable UI components lib reusable JavaScript libraries and/or helper functions pages main routes for site Global CSS https://raw.githubusercontent.com/fireship-io/next-firebase-course/main/styles/globals.css</description>
    </item>
    
    <item>
      <title>TypeScript</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-typescript/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-typescript/</guid>
      <description>Next TypeScript Docs</description>
    </item>
    
    <item>
      <title>Firebase Setup</title>
      <link>https://fireship.io/courses/react-next-firebase/app-next-firebase/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-next-firebase/</guid>
      <description>Firebase Setup command line npm install firebase react-firebase-hooks Firebase JS works in both the browser and Node.js react-firebase-hooks abstracts realtime Firebase streams to React hooks Firebase Lib Export common Firebase SDKs and utilities.
file_type_js lib/firebase.js import firebase from &amp;#39;firebase/app&amp;#39; import &amp;#39;firebase/auth&amp;#39;; import &amp;#39;firebase/firestore&amp;#39;; import &amp;#39;firebase/storage&amp;#39;; const firebaseConfig = { // your config }; if (!firebase.apps.length) { firebase.initializeApp(firebaseConfig) } export const auth = firebase.auth(); export const firestore = firebase.firestore(); export const storage = firebase.</description>
    </item>
    
    <item>
      <title>Routing</title>
      <link>https://fireship.io/courses/react-next-firebase/app-routing/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-routing/</guid>
      <description> What is the syntax for creating a dynamic route? Routes Create the following routes.
/enter /[username] /[username]/[slug] /admin /admin/[slug] VS Code Component Snippet Add your own VS Code snippets
file_type_config user-snippets.json { &amp;#34;component&amp;#34;: { &amp;#34;scope&amp;#34;: &amp;#34;javascript,typescript&amp;#34;, &amp;#34;prefix&amp;#34;: &amp;#34;next-page&amp;#34;, &amp;#34;body&amp;#34;: [ &amp;#34;export default function Page({ }) {&amp;#34;, &amp;#34; return (&amp;#34;, &amp;#34; &amp;lt;main&amp;gt;&amp;#34;, &amp;#34; &amp;lt;/main&amp;gt;&amp;#34;, &amp;#34; )&amp;#34;, &amp;#34;}&amp;#34;, ], &amp;#34;description&amp;#34;: &amp;#34;React component&amp;#34; } } </description>
    </item>
    
    <item>
      <title>Loader</title>
      <link>https://fireship.io/courses/react-next-firebase/app-loader/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-loader/</guid>
      <description> Which CSS animation property will cause the spinner to rotate forever? Build a Loading Spinner file_type_js components/Loader.js // Loading Spinner export default function Loader({ show }) { return show ? &amp;lt;div className=&amp;#34;loader&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; : null; } file_type_css globals.css .loader { border: 10px solid var(--color-bg); border-top: 10px solid var(--color-blue); border-radius: 50%; width: 50px; height: 50px; animation: spin 2s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } </description>
    </item>
    
    <item>
      <title>Navbar</title>
      <link>https://fireship.io/courses/react-next-firebase/app-navbar/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-navbar/</guid>
      <description>Which element or component is used to create links in Next.js Navbar Component file_type_js components/Navbar.js import Link from &amp;#39;next/link&amp;#39;; // Top navbar export default function Navbar() { const user = null; const username = null; return ( &amp;lt;nav className=&amp;#34;navbar&amp;#34;&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt; &amp;lt;Link href=&amp;#34;/&amp;#34;&amp;gt; &amp;lt;button className=&amp;#34;btn-logo&amp;#34;&amp;gt;FEED&amp;lt;/button&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; {/* user is signed-in and has username */} {username &amp;amp;&amp;amp; ( &amp;lt;&amp;gt; &amp;lt;li className=&amp;#34;push-left&amp;#34;&amp;gt; &amp;lt;Link href=&amp;#34;/admin&amp;#34;&amp;gt; &amp;lt;button className=&amp;#34;btn-blue&amp;#34;&amp;gt;Write Posts&amp;lt;/button&amp;gt; &amp;lt;/Link&amp;gt; &amp;lt;/li&amp;gt; &amp;lt;li&amp;gt; &amp;lt;Link href={`/${username}`}&amp;gt; &amp;lt;img src={user?</description>
    </item>
    
    <item>
      <title>Toast</title>
      <link>https://fireship.io/courses/react-next-firebase/app-toast/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/app-toast/</guid>
      <description>Install Hot Toast command line npm i react-hot-toast Check out the official docs.
Declare the Toaster file_type_js pages/_app.js import Navbar from &amp;#39;../components/Navbar&amp;#39;; import { Toaster } from &amp;#39;react-hot-toast&amp;#39;; function MyApp({ Component, pageProps }) { return ( &amp;lt;&amp;gt; &amp;lt;Navbar /&amp;gt; &amp;lt;Component {...pageProps} /&amp;gt; &amp;lt;Toaster /&amp;gt; &amp;lt;/&amp;gt; ); } Trigger a Toast Message file_type_js pages/index.js import toast from &amp;#39;react-hot-toast&amp;#39;; export default function Home() { return ( &amp;lt;div&amp;gt; &amp;lt;button onClick={() =&amp;gt; toast.success(&amp;#39;hello toast!&amp;#39;)}&amp;gt; Toast Me &amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ); } </description>
    </item>
    
    <item>
      <title>Auth Intro</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-primer/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-primer/</guid>
      <description> How do we avoid fetching the user data on every page change? </description>
    </item>
    
    <item>
      <title>Google SignIn</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-google-signin/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-google-signin/</guid>
      <description>What mechanism does Firebase use to manage the authentication state on the server? Google Auth Provider file_type_js lib/firebase.js export const googleAuthProvider = new firebase.auth.GoogleAuthProvider(); SignIn Button file_type_js pages/enter.js import { auth, googleAuthProvider } from &amp;#39;../lib/firebase&amp;#39;; export default function Enter(props) { const user = null; const username = null; // 1. user signed out &amp;lt;SignInButton /&amp;gt; // 2. user signed in, but missing username &amp;lt;UsernameForm /&amp;gt; // 3. user signed in, has username &amp;lt;SignOutButton /&amp;gt; return ( &amp;lt;main&amp;gt; {user ?</description>
    </item>
    
    <item>
      <title>Auth Context</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-context/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-context/</guid>
      <description>Create Context Learn more about React Context.
file_type_js lib/context.js import { createContext } from &amp;#39;react&amp;#39;; export const UserContext = createContext({ user: null, username: null }); Provide Context file_type_js pages/_app.js import { UserContext } from &amp;#39;../lib/context&amp;#39;; function MyApp({ Component, pageProps }) { return ( &amp;lt;UserContext.Provider value={{ user: {}, username: &amp;#39;jeff&amp;#39; }}&amp;gt; &amp;lt;Navbar /&amp;gt; &amp;lt;Component {...pageProps} /&amp;gt; &amp;lt;Toaster /&amp;gt; &amp;lt;/UserContext.Provider&amp;gt; ); } Consume Context file_type_js components/Navbar.js import { useContext } from &amp;#39;react&amp;#39;; import { UserContext } from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Auth Hook</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-hook/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-hook/</guid>
      <description>Custom User Data Hook Use this hook to read the current Firebase User, then use the uid to fetch the public profile document from Firestore.
file_type_js lib/hooks.js import { auth, firestore } from &amp;#39;../lib/firebase&amp;#39;; import { useEffect, useState } from &amp;#39;react&amp;#39;; import { useAuthState } from &amp;#39;react-firebase-hooks/auth&amp;#39;; // Custom hook to read auth record and user profile doc export function useUserData() { const [user] = useAuthState(auth); const [username, setUsername] = useState(null); useEffect(() =&amp;gt; { // turn off realtime subscription let unsubscribe; if (user) { const ref = firestore.</description>
    </item>
    
    <item>
      <title>Custom Usernames</title>
      <link>https://fireship.io/courses/react-next-firebase/auth-custom-username/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/auth-custom-username/</guid>
      <description>How do you perform atomic writes in Firestore? Custom Username Form The form below asynchronously validates the existance of a Firestore document. Learn more with a full breakdown of Firebase custom usernames
file_type_js pages/enter.js import { auth, firestore, googleAuthProvider } from &amp;#39;../lib/firebase&amp;#39;; import { UserContext } from &amp;#39;../lib/context&amp;#39;; import { useEffect, useState, useCallback, useContext } from &amp;#39;react&amp;#39;; import debounce from &amp;#39;lodash.debounce&amp;#39;; export default function Enter(props) { const { user, username } = useContext(UserContext); // 1.</description>
    </item>
    
    <item>
      <title>SSR &amp; SEO in Next</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-next-seo/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-next-seo/</guid>
      <description>You have a page that doesn&#39;t change often, but will be shared on social media. Which strategy is ideal? In this section we will look at techniques for data fetching and server-side rendering in Next.js.
Should I fetch data on the server? A flow chart to help you determine the right rendering strategy based on SEO and performance</description>
    </item>
    
    <item>
      <title>Data Model</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-data-model/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-data-model/</guid>
      <description>Database Structure users/{uid} Public user profile usernames/{username} Username uniqueness tracking users/{uid}/posts/{slug} User can have many posts users/{uid}/posts/{slug}/hearts/{uid} many-to-many relationship between users and posts via hearts Data Model for Posts Example post document with all expected fields.
// users/{uid}/posts/{slug} { title: &amp;#39;Hello World, slug: &amp;#39;hello-world&amp;#39;, uid: &amp;#39;userID&amp;#39;, username: &amp;#39;jeffd23&amp;#39;, published: false, content: &amp;#39;# hello world!&amp;#39;, createdAt: TimeStamp, updatedAt: TimeStamp, heartCount: 0, } </description>
    </item>
    
    <item>
      <title>SSR User Profile Page</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-profile-page/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-profile-page/</guid>
      <description>How do you return a single result from a Firestore collection query Helpers The following helpers will be reused on in other components to simplify the code.
file_type_js lib/firebase.js /**` * Gets a users/{uid} document with username * @param {string} username */ export async function getUserWithUsername(username) { const usersRef = firestore.collection(&amp;#39;users&amp;#39;); const query = usersRef.where(&amp;#39;username&amp;#39;, &amp;#39;==&amp;#39;, username).limit(1); const userDoc = (await query.get()).docs[0]; return userDoc; } /**` * Converts a firestore document to JSON * @param {DocumentSnapshot} doc */ export function postToJSON(doc) { const data = doc.</description>
    </item>
    
    <item>
      <title>SSR &#43; Paginated Home Page Feed</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-home-page/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-home-page/</guid>
      <description>Firebase Lib Use this function to convert a Firestore timestamp to a number.
file_type_js lib/firebase.js export const fromMillis = firebase.firestore.Timestamp.fromMillis; Home Page Post Feed The first batch is rendered on the server, while all subsequent queries are executed clientside.
file_type_js pages/index.js import PostFeed from &amp;#39;../components/PostFeed&amp;#39;; import Loader from &amp;#39;../components/Loader&amp;#39;; import { firestore, fromMillis, postToJSON } from &amp;#39;../lib/firebase&amp;#39;; import { useState } from &amp;#39;react&amp;#39;; // Max post to query per page const LIMIT = 1; export async function getServerSideProps(context) { const postsQuery = firestore .</description>
    </item>
    
    <item>
      <title>ISR Incremental Static Regeneration</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-isr/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-isr/</guid>
      <description>What is the advantage of ISR over SSG? Main Post Content Page This page is statically generated, BUT regenerated after new requests come in at an interval of 5000ms. If a prerendered page does not exist, will fallback to regular SSR.
file_type_js pages/username/slug.js import styles from &amp;#39;../../styles/Post.module.css&amp;#39;; import PostContent from &amp;#39;../../components/PostContent&amp;#39;; import { firestore, getUserWithUsername, postToJSON } from &amp;#39;../../lib/firebase&amp;#39;; import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; export async function getStaticProps({ params }) { const { username, slug } = params; const userDoc = await getUserWithUsername(username); let post; let path; if (userDoc) { const postRef = userDoc.</description>
    </item>
    
    <item>
      <title>Realtime Data Hydration</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-hydration/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-hydration/</guid>
      <description>When does hydration need to happen? Hydrate Server Props to Realtime Data The post value will prefer the realtime value, but default to the server rendered content while it is loading.
file_type_js pages/username/slug.js import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; export default function Post(props) { const postRef = firestore.doc(props.path); const [realtimePost] = useDocumentData(postRef); const post = realtimePost || props.post; return ( &amp;lt;main className={styles.container}&amp;gt; &amp;lt;section&amp;gt; &amp;lt;PostContent post={post} /&amp;gt; &amp;lt;/section&amp;gt; &amp;lt;aside className=&amp;#34;card&amp;#34;&amp;gt; &amp;lt;p&amp;gt; &amp;lt;strong&amp;gt;{post.</description>
    </item>
    
    <item>
      <title>Custom 404 Page</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-404/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-404/</guid>
      <description>Any page that is server rendered can redirect to a 404 if the data is not available.
file_type_js pages/username/index.js export async function getServerSideProps({ query }) { const { username } = query; const userDoc = await getUserWithUsername(username); // If no user, short circuit to 404 page if (!userDoc) { return { notFound: true, }; } } pages/404.js import Link from &amp;#39;next/link&amp;#39;; export default function Custom404() { return ( &amp;lt;main&amp;gt; &amp;lt;h1&amp;gt;404 - That page does not seem to exist.</description>
    </item>
    
    <item>
      <title>Metatags for SEO</title>
      <link>https://fireship.io/courses/react-next-firebase/ssr-meta-tags/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/ssr-meta-tags/</guid>
      <description> Who created the Open Graph Protocol commonly used in metatags? Metatags Component file_type_js components/Metatags.js import Head from &amp;#39;next/head&amp;#39;; export default function Metatags({ title = &amp;#39;The Full Next.js + Firebase Course&amp;#39;, description = &amp;#39;A complete Next.js + Firebase course by Fireship.io&amp;#39;, image = &amp;#39;https://fireship.io/courses/react-next-firebase/img/featured.png&amp;#39;, }) { return ( &amp;lt;Head&amp;gt; &amp;lt;title&amp;gt;{title}&amp;lt;/title&amp;gt; &amp;lt;meta name=&amp;#34;twitter:card&amp;#34; content=&amp;#34;summary&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:site&amp;#34; content=&amp;#34;@fireship_dev&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:title&amp;#34; content={title} /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:description&amp;#34; content={description} /&amp;gt; &amp;lt;meta name=&amp;#34;twitter:image&amp;#34; content={image} /&amp;gt; &amp;lt;meta property=&amp;#34;og:title&amp;#34; content={title} /&amp;gt; &amp;lt;meta property=&amp;#34;og:description&amp;#34; content={description} /&amp;gt; &amp;lt;meta property=&amp;#34;og:image&amp;#34; content={image} /&amp;gt; &amp;lt;/Head&amp;gt; ); } </description>
    </item>
    
    <item>
      <title>Admin Pages</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-auth-guard/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-auth-guard/</guid>
      <description>Client-side security logic will keep your app 100% secure? Auth Check or Route Guard file_type_js components/AuthCheck.js import Link from &amp;#39;next/link&amp;#39;; import { useContext } from &amp;#39;react&amp;#39;; import { UserContext } from &amp;#39;../lib/context&amp;#39;; // Component&amp;#39;s children only shown to logged-in users export default function AuthCheck(props) { const { username } = useContext(UserContext); return username ? props.children : props.fallback || &amp;lt;Link href=&amp;#34;/enter&amp;#34;&amp;gt;You must be signed in&amp;lt;/Link&amp;gt;; } Usage in a Component file_type_js admin/index.</description>
    </item>
    
    <item>
      <title>Create Data with Firestore</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-create-post/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-create-post/</guid>
      <description>Install Lodash kebabCase command line npm i lodash.kebabcase Firebase Server Timestamp The server timestamp ensures data time-based data will be consistent for all users.
file_type_js lib/firebase.js export const serverTimestamp = firebase.firestore.FieldValue.serverTimestamp; Create a Post The post form will set default values for in Firestore. It will also generate a URI safe slug as the Firebase document ID.
file_type_js posts/admin/index.js import styles from &amp;#39;../../styles/Admin.module.css&amp;#39;; import AuthCheck from &amp;#39;../../components/AuthCheck&amp;#39;; import PostFeed from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Post Editing Form</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-forms/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-forms/</guid>
      <description>React Hook Form Package command line npm install react-hook-form Check out the official docs
Post Editing Form file_type_js pages/admin/slug.js import styles from &amp;#39;../../styles/Admin.module.css&amp;#39;; import AuthCheck from &amp;#39;../../components/AuthCheck&amp;#39;; import { firestore, auth, serverTimestamp } from &amp;#39;../../lib/firebase&amp;#39;; import { useState } from &amp;#39;react&amp;#39;; import { useRouter } from &amp;#39;next/router&amp;#39;; import { useDocumentData } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; import { useForm } from &amp;#39;react-hook-form&amp;#39;; import ReactMarkdown from &amp;#39;react-markdown&amp;#39;; import Link from &amp;#39;next/link&amp;#39;; import toast from &amp;#39;react-hot-toast&amp;#39;; export default function AdminPostEdit(props) { return ( &amp;lt;AuthCheck&amp;gt; &amp;lt;PostManager /&amp;gt; &amp;lt;/AuthCheck&amp;gt; ); } function PostManager() { const [preview, setPreview] = useState(false); const router = useRouter(); const { slug } = router.</description>
    </item>
    
    <item>
      <title>Form Validation</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-form-validation/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-form-validation/</guid>
      <description>Form Validation React Hook Form makes it easy to add reactive form validation.
file_type_js pages/admin/slug.js const { register, handleSubmit, reset, watch, formState, errors } = useForm({ defaultValues, mode: &amp;#39;onChange&amp;#39; }); const { isValid, isDirty } = formState; // ... &amp;lt;textarea name=&amp;#34;content&amp;#34; ref={register({ maxLength: { value: 20000, message: &amp;#39;content is too long&amp;#39; }, minLength: { value: 10, message: &amp;#39;content is too short&amp;#39; }, required: { value: true, message: &amp;#39;content is required&amp;#39;} })}&amp;gt; &amp;lt;/textarea&amp;gt; {errors.</description>
    </item>
    
    <item>
      <title>Image Uploads</title>
      <link>https://fireship.io/courses/react-next-firebase/admin-image-uploads/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/admin-image-uploads/</guid>
      <description>How do you associate a Firebase user to a file upload? Upload State Changed Event file_type_js lib/firebase.js // Storage exports export const storage = firebase.storage(); export const STATE_CHANGED = firebase.storage.TaskEvent.STATE_CHANGED; Image Uploader Component file_type_js components/ImageUploader.js import { useState } from &amp;#39;react&amp;#39;; import { auth, storage, STATE_CHANGED } from &amp;#39;../lib/firebase&amp;#39;; import Loader from &amp;#39;./Loader&amp;#39;; // Uploads images to Firebase Storage export default function ImageUploader() { const [uploading, setUploading] = useState(false); const [progress, setProgress] = useState(0); const [downloadURL, setDownloadURL] = useState(null); // Creates a Firebase Upload Task const uploadFile = async (e) =&amp;gt; { // Get the file const file = Array.</description>
    </item>
    
    <item>
      <title>Hearts, Likes, Claps</title>
      <link>https://fireship.io/courses/react-next-firebase/hearts-create/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/hearts-create/</guid>
      <description>Heart Button file_type_js components/HeartButton.js import { firestore, auth, increment } from &amp;#39;../lib/firebase&amp;#39;; import { useDocument } from &amp;#39;react-firebase-hooks/firestore&amp;#39;; // Allows user to heart or like a post export default function Heart({ postRef }) { // Listen to heart document for currently logged in user const heartRef = postRef.collection(&amp;#39;hearts&amp;#39;).doc(auth.currentUser.uid); const [heartDoc] = useDocument(heartRef); // Create a user-to-post relationship const addHeart = async () =&amp;gt; { const uid = auth.currentUser.uid; const batch = firestore.</description>
    </item>
    
    <item>
      <title>Backend Security</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-security/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-security/</guid>
      <description>Complete Firestore Rules file_type_firebase firestore.rules rules_version = &amp;#39;2&amp;#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { // Required for collection group queries match /posts/{postId} { allow read; } match /users/{userId} { allow read; allow create: if isValidUser(userId); } match /usernames/{username} { allow read; allow create: if isValidUsername(username); } match /users/{userId}/posts/{postId} { allow read; allow create: if canCreatePost(userId); allow update: if canUpdatePost(userId) || canIncrementHearts(userId, postId); allow delete: if request.auth.uid == userId; } match /users/{userId}/posts/{postId}/hearts/{heartId} { allow read; allow write: if request.</description>
    </item>
    
    <item>
      <title>Vercel Deployment</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-vercel/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-vercel/</guid>
      <description>Which cloud provider does Vercel primarily use under the hood? Vercel is the company behind Next.js and their platform is highly optimized for it. Create a free Vercel account to deploy your code.
Note: When deploying to Vercel remember to add your vercel deployment domain to the authorized domains within your firebase app project, to ensure that your Google Sign-In works. Add the domain in the format {ProjectName}.vercel.app as an Authorized Domain under Authentication / Sign-in method / Authorized Domains</description>
    </item>
    
    <item>
      <title>Firebase Deployment</title>
      <link>https://fireship.io/courses/react-next-firebase/deploy-firebase/</link>
      <pubDate>Mon, 01 Feb 2021 10:23:30 -0900</pubDate>
      
      <guid>https://fireship.io/courses/react-next-firebase/deploy-firebase/</guid>
      <description>Deploy as Static Site Note: This method works for static sites that use getStaticProps ONLY. Deployment with full SSR requires cloud functions or some other form of a backend server.
command line firebase init hosting # select /out as your hosting directory next build next export firebase deploy --only hosting Deployment with SSR See the custom server docs for a general idea of the process.</description>
    </item>
    
  </channel>
</rss>
